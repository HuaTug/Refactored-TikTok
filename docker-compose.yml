services:
  mysql:
    image: mysql:latest
    container_name: kitex_mysql    
    volumes:
      - ./config/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./config/mysql/my.cnf:/etc/mysql/my.cnf
    environment:
      - MYSQL_DATABASE=TikTok
      - MYSQL_ROOT_PASSWORD=TikTok@MySQL#2025!Secure
    ports:
      - "3307:3306"  # 修改端口避免冲突
    privileged: true
    networks:
      - docker_net

  redis:
    image: redis:latest
    container_name: kitex_redis
    ports:
      - "6379:6379"
    volumes:
      - ./config/cache/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./data/redis:/data  # 数据持久化
      - ./logs/redis:/logs  # 日志目录
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=Redis@TikTok#2025_SecurePass
    # 使用非root用户运行Redis
    user: "999:999"  # redis用户
    # 安全限制
    security_opt:
      - no-new-privileges:true
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "Redis@TikTok2025_SecurePass", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - docker_net
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./config/Es:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - docker_net
    user: "1000:1000"  # 解决权限问题

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    networks:
      - docker_net
    depends_on:
      - elasticsearch

  etcd:
    image: bitnami/etcd:3.5.9
    container_name: etcd
    ports:
      - "2379:2379"
      - "2380:2380"
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_NAME=etcd01
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_INITIAL_CLUSTER_STATE=new
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster-1
      - ETCD_INITIAL_CLUSTER=etcd01=http://etcd:2380
    networks:
      - docker_net

  minio:
    image: minio/minio:latest # 使用最新的 MinIO 版本
    container_name: minio
    ports:
      - "9002:9000"  # 修改端口避免冲突
      - "9003:9001"  # 修改端口避免冲突
    environment:
      MINIO_ROOT_USER: tiktok_minio_admin
      MINIO_ROOT_PASSWORD: MainMinIO@TikTok#2025!SecurePass
    command: server /data --console-address ":9001"
    volumes:
      - ./config/minio/data:/data
    networks:
      - docker_net

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: kitex_rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
      - ./logs/rabbitmq:/var/log/rabbitmq
    # 健康检查
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - docker_net
    restart: unless-stopped

  kafka:
    image: wurstmeister/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "test-topic:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - docker_net

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: "TRUE"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - docker_net

  # ZooKeeper 安全配置 - 支持ACL权限认证
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: secure_zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      # 基础配置
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
      
      # 安全配置 - 启用SASL认证
      ZOOKEEPER_AUTH_PROVIDER_SASL: org.apache.zookeeper.server.auth.SASLAuthenticationProvider
      ZOOKEEPER_REQUIRE_CLIENT_AUTH_SCHEME: sasl
      ZOOKEEPER_JAAS_LOGIN_RENEW: 3600000
      
      # JVM配置
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35"
      
      # 日志配置
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: INFO
      ZOOKEEPER_LOG4J_LOGGERS: "org.apache.zookeeper=INFO"
      
      # 安全选项
      KAFKA_OPTS: >-
        -Djava.security.auth.login.config=/etc/kafka/secrets/zookeeper_jaas.conf
        -Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
        -Dzookeeper.requireClientAuthScheme=sasl
        -Dzookeeper.skipACL=false
    volumes:
      # 配置文件挂载 - 移除log4j.properties挂载避免权限问题
      - ./config/zookeeper/zoo.cfg:/etc/kafka/zoo.cfg
      - ./config/zookeeper/zookeeper_jaas.conf:/etc/kafka/secrets/zookeeper_jaas.conf
      - ./config/zookeeper/init-acl.sh:/opt/kafka/bin/init-acl.sh
      # 数据持久化
      - ./data/zookeeper/data:/var/lib/zookeeper/data
      - ./data/zookeeper/logs:/var/lib/zookeeper/log
      - ./logs/zookeeper:/logs
    # 安全限制
    security_opt:
      - no-new-privileges:true
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    # 健康检查
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - docker_net
    restart: unless-stopped
    
  work:
    image: work:latest
    container_name: Micro_Server
    depends_on:
      - mysql
      - redis
      - rabbitmq
      - elasticsearch
      - kibana
      - etcd
      - minio
      - kafka
    profiles: 
      - release
    ports:
      - 8000:8888
    networks:
      - docker_net

networks:
  docker_net:
    driver: bridge
