// Code generated by hertz generator.

package videos

import (
	videos "HuaTug.com/cmd/api/handlers/video"
	"github.com/cloudwego/hertz/pkg/app/server"
)

/*
 This file will register all the routes of the services in the master idl.
 And it will update automatically when you use the "update" command for the idl.
 So don't modify the contents of the file, or your code will be deleted when it is updated.
*/

// Register register routes based on the IDL 'api.${HTTP Method}' annotation.
func Register(r *server.Hertz) {

	root := r.Group("/", rootMw()...)
	{
		// ========== V2版本API（推荐使用） ==========
		_v2 := root.Group("/v2", _v2Mw()...)
		{
			// 核心上传流程
			_publish := _v2.Group("/publish", _publishV2Mw()...)
			_publish.POST("/start", append(_videopublishstartV2Mw(), videos.VideoPublishStartV2)...)
			_publish.POST("/uploading", append(_videopublishuploadingV2Mw(), videos.VideoPublishUploadingV2)...)
			_publish.POST("/complete", append(_videopublishcompleteV2Mw(), videos.VideoPublishCompleteV2)...)
			_publish.POST("/cancel", append(_videopublishcancelV2Mw(), videos.VideoPublishCancelV2)...)

			// 上传管理
			_publish.GET("/progress", append(_getuploadprogressV2Mw(), videos.GetUploadProgressV2)...)
			_publish.POST("/resume", append(_resumeuploadV2Mw(), videos.ResumeUploadV2)...)

			// 存储管理
			_storage := _v2.Group("/storage", _storageV2Mw()...)
			_storage.POST("/heat/manage", append(_managevideoheatV2Mw(), videos.ManageVideoHeatV2)...)
			_storage.POST("/quota/manage", append(_manageuserquotaV2Mw(), videos.ManageUserQuotaV2)...)

			// 批量操作
			_videos := _v2.Group("/videos", _videosV2Mw()...)
			_videos.POST("/batch", append(_batchoperateV2Mw(), videos.BatchOperateVideosV2)...)

			// 转码服务
			_video := _v2.Group("/video", _videoV2Mw()...)
			_video.POST("/transcode", append(_transcodevideoV2Mw(), videos.TranscodeVideoV2)...)
			_video.GET("/analytics", append(_getvideoanalyticsV2Mw(), videos.GetVideoAnalyticsV2)...)
		}

		// ========== 通用功能（迁移到V2路径） ==========
		_v2.POST("/stream", append(_videoStreamVideoMv(), videos.VideoStream)...)
		_v2.GET("/recommend/video", append(_videorecommendvideoMw(), videos.RecommendVideo)...)

		//自己添加路由 - 迁移到V2
		{
			_popular := _v2.Group("/popular")
			_popular.GET("/", videos.VideoPopular)
		}

		{
			_favorite := _v2.Group("/favorite")
			_favorite.POST("/create", append(_createFavoriteMv(), videos.CreateFavoriteVideo)...)
			_favorite.GET("/list", append(_getFavoriteListMv(), videos.GetFavoroteList)...)
			_favorite.GET("/video/list", append(_getFavoriteVideoMv(), videos.GetFavoriteVideoList)...)
			_favorite.GET("/video", append(_getVideoFromFavoriteMv(), videos.GetFavoriteVideo)...)
			_favorite.POST("/video/add", append(_addFavoriteVideoMv(), videos.AddVideoToFavorite)...)
			_favorite.DELETE("/delete", append(_deleteFavoriteMv(), videos.DeleteFavorite)...)
			_favorite.DELETE("/video/delete", append(_deleteVideoFromFavoriteMv(), videos.DeleteVideoFromFavorite)...)
		}

		{
			_shared := _v2.Group("/share")
			_shared.POST("/video", append(_sharedVideoMv(), videos.SharedVideo)...)
		}

		{
			_video := _v2.Group("/video", _videoMw()...)
			_video.GET("/feed", append(_feedserviceMw(), videos.FeedService)...)
			_video.GET("/list", append(_videofeedlistMw(), videos.VideoFeedList)...)
			_video.GET("/popular", append(_videopopularMw(), videos.VideoPopular)...)
			_video.POST("/search", append(_videosearchMw(), videos.VideoSearch)...)
			_video.DELETE("/delete", append(_videodeleteMw(), videos.VideoDelete)...)
		}

		{
			// 视频流和资源代理路由
			_stream := _v2.Group("/stream")
			_stream.GET("/video", videos.VideoStreamProxy)        // 视频流代理
			_stream.GET("/thumbnail", videos.VideoThumbnailProxy) // 缩略图代理
			_stream.GET("/metadata", videos.VideoMetadataProxy)   // 视频元数据
		}

		{
			_visit := _v2.Group("/visit", _visitMw()...)
			_visit.POST("/:id", append(_videoidlistMw(), videos.VideoVisit)...)
		}
	}
}
