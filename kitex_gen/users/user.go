// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package users

import (
	"HuaTug.com/kitex_gen/base"
	"context"
	"fmt"
)

type CreateUserRequest struct {
	UserName string `thrift:"user_name,1" frugal:"1,default,string" json:"user_name"`
	Password string `thrift:"password,2" frugal:"2,default,string" json:"password"`
	Email    string `thrift:"email,3" frugal:"3,default,string" json:"email"`
	Sex      int64  `thrift:"sex,4" frugal:"4,default,i64" json:"sex"`
}

func NewCreateUserRequest() *CreateUserRequest {
	return &CreateUserRequest{}
}

func (p *CreateUserRequest) InitDefault() {
}

func (p *CreateUserRequest) GetUserName() (v string) {
	return p.UserName
}

func (p *CreateUserRequest) GetPassword() (v string) {
	return p.Password
}

func (p *CreateUserRequest) GetEmail() (v string) {
	return p.Email
}

func (p *CreateUserRequest) GetSex() (v int64) {
	return p.Sex
}
func (p *CreateUserRequest) SetUserName(val string) {
	p.UserName = val
}
func (p *CreateUserRequest) SetPassword(val string) {
	p.Password = val
}
func (p *CreateUserRequest) SetEmail(val string) {
	p.Email = val
}
func (p *CreateUserRequest) SetSex(val int64) {
	p.Sex = val
}

func (p *CreateUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserRequest(%+v)", *p)
}

var fieldIDToName_CreateUserRequest = map[int16]string{
	1: "user_name",
	2: "password",
	3: "email",
	4: "sex",
}

type CreateUserResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewCreateUserResponse() *CreateUserResponse {
	return &CreateUserResponse{}
}

func (p *CreateUserResponse) InitDefault() {
}

var CreateUserResponse_Base_DEFAULT *base.Status

func (p *CreateUserResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return CreateUserResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateUserResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *CreateUserResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateUserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserResponse(%+v)", *p)
}

var fieldIDToName_CreateUserResponse = map[int16]string{
	1: "base",
}

type QueryUserRequest struct {
	Keyword  *string `thrift:"Keyword,1,optional" frugal:"1,optional,string" json:"Keyword,omitempty"`
	Page     int64   `thrift:"page,2" frugal:"2,default,i64" json:"page"`
	PageSize int64   `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewQueryUserRequest() *QueryUserRequest {
	return &QueryUserRequest{}
}

func (p *QueryUserRequest) InitDefault() {
}

var QueryUserRequest_Keyword_DEFAULT string

func (p *QueryUserRequest) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return QueryUserRequest_Keyword_DEFAULT
	}
	return *p.Keyword
}

func (p *QueryUserRequest) GetPage() (v int64) {
	return p.Page
}

func (p *QueryUserRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *QueryUserRequest) SetKeyword(val *string) {
	p.Keyword = val
}
func (p *QueryUserRequest) SetPage(val int64) {
	p.Page = val
}
func (p *QueryUserRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *QueryUserRequest) IsSetKeyword() bool {
	return p.Keyword != nil
}

func (p *QueryUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserRequest(%+v)", *p)
}

var fieldIDToName_QueryUserRequest = map[int16]string{
	1: "Keyword",
	2: "page",
	3: "page_size",
}

type QueryUserResponse struct {
	Base   *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Users  []*base.User `thrift:"users,3" frugal:"3,default,list<base.User>" json:"users"`
	Totoal int64        `thrift:"totoal,4" frugal:"4,default,i64" json:"totoal"`
}

func NewQueryUserResponse() *QueryUserResponse {
	return &QueryUserResponse{}
}

func (p *QueryUserResponse) InitDefault() {
}

var QueryUserResponse_Base_DEFAULT *base.Status

func (p *QueryUserResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return QueryUserResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *QueryUserResponse) GetUsers() (v []*base.User) {
	return p.Users
}

func (p *QueryUserResponse) GetTotoal() (v int64) {
	return p.Totoal
}
func (p *QueryUserResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *QueryUserResponse) SetUsers(val []*base.User) {
	p.Users = val
}
func (p *QueryUserResponse) SetTotoal(val int64) {
	p.Totoal = val
}

func (p *QueryUserResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *QueryUserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserResponse(%+v)", *p)
}

var fieldIDToName_QueryUserResponse = map[int16]string{
	1: "base",
	3: "users",
	4: "totoal",
}

type DeleteUserRequest struct {
	UserId int64 `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
}

func NewDeleteUserRequest() *DeleteUserRequest {
	return &DeleteUserRequest{}
}

func (p *DeleteUserRequest) InitDefault() {
}

func (p *DeleteUserRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *DeleteUserRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *DeleteUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteUserRequest(%+v)", *p)
}

var fieldIDToName_DeleteUserRequest = map[int16]string{
	1: "userId",
}

type DeleteUserResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewDeleteUserResponse() *DeleteUserResponse {
	return &DeleteUserResponse{}
}

func (p *DeleteUserResponse) InitDefault() {
}

var DeleteUserResponse_Base_DEFAULT *base.Status

func (p *DeleteUserResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return DeleteUserResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteUserResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *DeleteUserResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteUserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteUserResponse(%+v)", *p)
}

var fieldIDToName_DeleteUserResponse = map[int16]string{
	1: "base",
}

type UpdateUserRequest struct {
	UserName string `thrift:"user_name,1" frugal:"1,default,string" json:"user_name"`
	UserId   int64  `thrift:"userId,2" frugal:"2,default,i64" json:"userId"`
	Password string `thrift:"password,3" frugal:"3,default,string" json:"password"`
	Data     []byte `thrift:"data,4" frugal:"4,default,binary" json:"data"`
	Filesize int64  `thrift:"filesize,5" frugal:"5,default,i64" json:"filesize"`
}

func NewUpdateUserRequest() *UpdateUserRequest {
	return &UpdateUserRequest{}
}

func (p *UpdateUserRequest) InitDefault() {
}

func (p *UpdateUserRequest) GetUserName() (v string) {
	return p.UserName
}

func (p *UpdateUserRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *UpdateUserRequest) GetPassword() (v string) {
	return p.Password
}

func (p *UpdateUserRequest) GetData() (v []byte) {
	return p.Data
}

func (p *UpdateUserRequest) GetFilesize() (v int64) {
	return p.Filesize
}
func (p *UpdateUserRequest) SetUserName(val string) {
	p.UserName = val
}
func (p *UpdateUserRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *UpdateUserRequest) SetPassword(val string) {
	p.Password = val
}
func (p *UpdateUserRequest) SetData(val []byte) {
	p.Data = val
}
func (p *UpdateUserRequest) SetFilesize(val int64) {
	p.Filesize = val
}

func (p *UpdateUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserRequest(%+v)", *p)
}

var fieldIDToName_UpdateUserRequest = map[int16]string{
	1: "user_name",
	2: "userId",
	3: "password",
	4: "data",
	5: "filesize",
}

type UpdateUserResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Data *base.User   `thrift:"data,2" frugal:"2,default,base.User" json:"data"`
}

func NewUpdateUserResponse() *UpdateUserResponse {
	return &UpdateUserResponse{}
}

func (p *UpdateUserResponse) InitDefault() {
}

var UpdateUserResponse_Base_DEFAULT *base.Status

func (p *UpdateUserResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UpdateUserResponse_Base_DEFAULT
	}
	return p.Base
}

var UpdateUserResponse_Data_DEFAULT *base.User

func (p *UpdateUserResponse) GetData() (v *base.User) {
	if !p.IsSetData() {
		return UpdateUserResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *UpdateUserResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *UpdateUserResponse) SetData(val *base.User) {
	p.Data = val
}

func (p *UpdateUserResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateUserResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *UpdateUserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserResponse(%+v)", *p)
}

var fieldIDToName_UpdateUserResponse = map[int16]string{
	1: "base",
	2: "data",
}

type LoginUserResquest struct {
	UserName string `thrift:"user_name,1" frugal:"1,default,string" json:"user_name"`
	Password string `thrift:"Password,2" frugal:"2,default,string" json:"Password"`
	Email    string `thrift:"Email,3" frugal:"3,default,string" json:"Email"`
}

func NewLoginUserResquest() *LoginUserResquest {
	return &LoginUserResquest{}
}

func (p *LoginUserResquest) InitDefault() {
}

func (p *LoginUserResquest) GetUserName() (v string) {
	return p.UserName
}

func (p *LoginUserResquest) GetPassword() (v string) {
	return p.Password
}

func (p *LoginUserResquest) GetEmail() (v string) {
	return p.Email
}
func (p *LoginUserResquest) SetUserName(val string) {
	p.UserName = val
}
func (p *LoginUserResquest) SetPassword(val string) {
	p.Password = val
}
func (p *LoginUserResquest) SetEmail(val string) {
	p.Email = val
}

func (p *LoginUserResquest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginUserResquest(%+v)", *p)
}

var fieldIDToName_LoginUserResquest = map[int16]string{
	1: "user_name",
	2: "Password",
	3: "Email",
}

type LoginUserResponse struct {
	Base         *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Token        string       `thrift:"token,2" frugal:"2,default,string" json:"token"`
	RefreshToken string       `thrift:"RefreshToken,3" frugal:"3,default,string" json:"RefreshToken"`
	User         *base.User   `thrift:"user,4" frugal:"4,default,base.User" json:"user"`
}

func NewLoginUserResponse() *LoginUserResponse {
	return &LoginUserResponse{}
}

func (p *LoginUserResponse) InitDefault() {
}

var LoginUserResponse_Base_DEFAULT *base.Status

func (p *LoginUserResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return LoginUserResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *LoginUserResponse) GetToken() (v string) {
	return p.Token
}

func (p *LoginUserResponse) GetRefreshToken() (v string) {
	return p.RefreshToken
}

var LoginUserResponse_User_DEFAULT *base.User

func (p *LoginUserResponse) GetUser() (v *base.User) {
	if !p.IsSetUser() {
		return LoginUserResponse_User_DEFAULT
	}
	return p.User
}
func (p *LoginUserResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *LoginUserResponse) SetToken(val string) {
	p.Token = val
}
func (p *LoginUserResponse) SetRefreshToken(val string) {
	p.RefreshToken = val
}
func (p *LoginUserResponse) SetUser(val *base.User) {
	p.User = val
}

func (p *LoginUserResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LoginUserResponse) IsSetUser() bool {
	return p.User != nil
}

func (p *LoginUserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginUserResponse(%+v)", *p)
}

var fieldIDToName_LoginUserResponse = map[int16]string{
	1: "base",
	2: "token",
	3: "RefreshToken",
	4: "user",
}

type CheckUserExistsByIdRequst struct {
	UserId int64 `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
}

func NewCheckUserExistsByIdRequst() *CheckUserExistsByIdRequst {
	return &CheckUserExistsByIdRequst{}
}

func (p *CheckUserExistsByIdRequst) InitDefault() {
}

func (p *CheckUserExistsByIdRequst) GetUserId() (v int64) {
	return p.UserId
}
func (p *CheckUserExistsByIdRequst) SetUserId(val int64) {
	p.UserId = val
}

func (p *CheckUserExistsByIdRequst) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckUserExistsByIdRequst(%+v)", *p)
}

var fieldIDToName_CheckUserExistsByIdRequst = map[int16]string{
	1: "userId",
}

type CheckUserExistsByIdResponse struct {
	Base   *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Exists bool         `thrift:"exists,2" frugal:"2,default,bool" json:"exists"`
}

func NewCheckUserExistsByIdResponse() *CheckUserExistsByIdResponse {
	return &CheckUserExistsByIdResponse{}
}

func (p *CheckUserExistsByIdResponse) InitDefault() {
}

var CheckUserExistsByIdResponse_Base_DEFAULT *base.Status

func (p *CheckUserExistsByIdResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return CheckUserExistsByIdResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *CheckUserExistsByIdResponse) GetExists() (v bool) {
	return p.Exists
}
func (p *CheckUserExistsByIdResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *CheckUserExistsByIdResponse) SetExists(val bool) {
	p.Exists = val
}

func (p *CheckUserExistsByIdResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CheckUserExistsByIdResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckUserExistsByIdResponse(%+v)", *p)
}

var fieldIDToName_CheckUserExistsByIdResponse = map[int16]string{
	1: "base",
	2: "exists",
}

type GetUserInfoRequest struct {
	UserId int64 `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
}

func NewGetUserInfoRequest() *GetUserInfoRequest {
	return &GetUserInfoRequest{}
}

func (p *GetUserInfoRequest) InitDefault() {
}

func (p *GetUserInfoRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetUserInfoRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *GetUserInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoRequest(%+v)", *p)
}

var fieldIDToName_GetUserInfoRequest = map[int16]string{
	1: "userId",
}

type GetUserInfoResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	User *base.User   `thrift:"User,2" frugal:"2,default,base.User" json:"User"`
}

func NewGetUserInfoResponse() *GetUserInfoResponse {
	return &GetUserInfoResponse{}
}

func (p *GetUserInfoResponse) InitDefault() {
}

var GetUserInfoResponse_Base_DEFAULT *base.Status

func (p *GetUserInfoResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetUserInfoResponse_Base_DEFAULT
	}
	return p.Base
}

var GetUserInfoResponse_User_DEFAULT *base.User

func (p *GetUserInfoResponse) GetUser() (v *base.User) {
	if !p.IsSetUser() {
		return GetUserInfoResponse_User_DEFAULT
	}
	return p.User
}
func (p *GetUserInfoResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetUserInfoResponse) SetUser(val *base.User) {
	p.User = val
}

func (p *GetUserInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetUserInfoResponse) IsSetUser() bool {
	return p.User != nil
}

func (p *GetUserInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoResponse(%+v)", *p)
}

var fieldIDToName_GetUserInfoResponse = map[int16]string{
	1: "base",
	2: "User",
}

type VerifyCodeRequest struct {
	Code  string `thrift:"code,1" frugal:"1,default,string" json:"code"`
	Email string `thrift:"email,2" frugal:"2,default,string" json:"email"`
}

func NewVerifyCodeRequest() *VerifyCodeRequest {
	return &VerifyCodeRequest{}
}

func (p *VerifyCodeRequest) InitDefault() {
}

func (p *VerifyCodeRequest) GetCode() (v string) {
	return p.Code
}

func (p *VerifyCodeRequest) GetEmail() (v string) {
	return p.Email
}
func (p *VerifyCodeRequest) SetCode(val string) {
	p.Code = val
}
func (p *VerifyCodeRequest) SetEmail(val string) {
	p.Email = val
}

func (p *VerifyCodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyCodeRequest(%+v)", *p)
}

var fieldIDToName_VerifyCodeRequest = map[int16]string{
	1: "code",
	2: "email",
}

type VerifyCodeResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewVerifyCodeResponse() *VerifyCodeResponse {
	return &VerifyCodeResponse{}
}

func (p *VerifyCodeResponse) InitDefault() {
}

var VerifyCodeResponse_Base_DEFAULT *base.Status

func (p *VerifyCodeResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VerifyCodeResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *VerifyCodeResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *VerifyCodeResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VerifyCodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyCodeResponse(%+v)", *p)
}

var fieldIDToName_VerifyCodeResponse = map[int16]string{
	1: "base",
}

type SendCodeRequest struct {
	Email string `thrift:"email,1" frugal:"1,default,string" json:"email"`
}

func NewSendCodeRequest() *SendCodeRequest {
	return &SendCodeRequest{}
}

func (p *SendCodeRequest) InitDefault() {
}

func (p *SendCodeRequest) GetEmail() (v string) {
	return p.Email
}
func (p *SendCodeRequest) SetEmail(val string) {
	p.Email = val
}

func (p *SendCodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendCodeRequest(%+v)", *p)
}

var fieldIDToName_SendCodeRequest = map[int16]string{
	1: "email",
}

type SendCodeResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewSendCodeResponse() *SendCodeResponse {
	return &SendCodeResponse{}
}

func (p *SendCodeResponse) InitDefault() {
}

var SendCodeResponse_Base_DEFAULT *base.Status

func (p *SendCodeResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return SendCodeResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *SendCodeResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *SendCodeResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SendCodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendCodeResponse(%+v)", *p)
}

var fieldIDToName_SendCodeResponse = map[int16]string{
	1: "base",
}

type ForgotPasswordRequest struct {
	Email string `thrift:"email,1" frugal:"1,default,string" json:"email"`
}

func NewForgotPasswordRequest() *ForgotPasswordRequest {
	return &ForgotPasswordRequest{}
}

func (p *ForgotPasswordRequest) InitDefault() {
}

func (p *ForgotPasswordRequest) GetEmail() (v string) {
	return p.Email
}
func (p *ForgotPasswordRequest) SetEmail(val string) {
	p.Email = val
}

func (p *ForgotPasswordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ForgotPasswordRequest(%+v)", *p)
}

var fieldIDToName_ForgotPasswordRequest = map[int16]string{
	1: "email",
}

type ForgotPasswordResponse struct {
	Base       *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	ResetToken string       `thrift:"reset_token,2" frugal:"2,default,string" json:"reset_token"`
}

func NewForgotPasswordResponse() *ForgotPasswordResponse {
	return &ForgotPasswordResponse{}
}

func (p *ForgotPasswordResponse) InitDefault() {
}

var ForgotPasswordResponse_Base_DEFAULT *base.Status

func (p *ForgotPasswordResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return ForgotPasswordResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ForgotPasswordResponse) GetResetToken() (v string) {
	return p.ResetToken
}
func (p *ForgotPasswordResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *ForgotPasswordResponse) SetResetToken(val string) {
	p.ResetToken = val
}

func (p *ForgotPasswordResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ForgotPasswordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ForgotPasswordResponse(%+v)", *p)
}

var fieldIDToName_ForgotPasswordResponse = map[int16]string{
	1: "base",
	2: "reset_token",
}

type ResetPasswordRequest struct {
	ResetToken   string `thrift:"reset_token,1" frugal:"1,default,string" json:"reset_token"`
	NewPassword_ string `thrift:"new_password,2" frugal:"2,default,string" json:"new_password"`
}

func NewResetPasswordRequest() *ResetPasswordRequest {
	return &ResetPasswordRequest{}
}

func (p *ResetPasswordRequest) InitDefault() {
}

func (p *ResetPasswordRequest) GetResetToken() (v string) {
	return p.ResetToken
}

func (p *ResetPasswordRequest) GetNewPassword_() (v string) {
	return p.NewPassword_
}
func (p *ResetPasswordRequest) SetResetToken(val string) {
	p.ResetToken = val
}
func (p *ResetPasswordRequest) SetNewPassword_(val string) {
	p.NewPassword_ = val
}

func (p *ResetPasswordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResetPasswordRequest(%+v)", *p)
}

var fieldIDToName_ResetPasswordRequest = map[int16]string{
	1: "reset_token",
	2: "new_password",
}

type ResetPasswordResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewResetPasswordResponse() *ResetPasswordResponse {
	return &ResetPasswordResponse{}
}

func (p *ResetPasswordResponse) InitDefault() {
}

var ResetPasswordResponse_Base_DEFAULT *base.Status

func (p *ResetPasswordResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return ResetPasswordResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ResetPasswordResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *ResetPasswordResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ResetPasswordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResetPasswordResponse(%+v)", *p)
}

var fieldIDToName_ResetPasswordResponse = map[int16]string{
	1: "base",
}

type GetMyProfileRequest struct {
}

func NewGetMyProfileRequest() *GetMyProfileRequest {
	return &GetMyProfileRequest{}
}

func (p *GetMyProfileRequest) InitDefault() {
}

func (p *GetMyProfileRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMyProfileRequest(%+v)", *p)
}

var fieldIDToName_GetMyProfileRequest = map[int16]string{}

type GetMyProfileResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	User *base.User   `thrift:"user,2" frugal:"2,default,base.User" json:"user"`
}

func NewGetMyProfileResponse() *GetMyProfileResponse {
	return &GetMyProfileResponse{}
}

func (p *GetMyProfileResponse) InitDefault() {
}

var GetMyProfileResponse_Base_DEFAULT *base.Status

func (p *GetMyProfileResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetMyProfileResponse_Base_DEFAULT
	}
	return p.Base
}

var GetMyProfileResponse_User_DEFAULT *base.User

func (p *GetMyProfileResponse) GetUser() (v *base.User) {
	if !p.IsSetUser() {
		return GetMyProfileResponse_User_DEFAULT
	}
	return p.User
}
func (p *GetMyProfileResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetMyProfileResponse) SetUser(val *base.User) {
	p.User = val
}

func (p *GetMyProfileResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetMyProfileResponse) IsSetUser() bool {
	return p.User != nil
}

func (p *GetMyProfileResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMyProfileResponse(%+v)", *p)
}

var fieldIDToName_GetMyProfileResponse = map[int16]string{
	1: "base",
	2: "user",
}

type GetAvatarUploadUrlRequest struct {
	FileExtension string `thrift:"file_extension,1" frugal:"1,default,string" json:"file_extension"`
}

func NewGetAvatarUploadUrlRequest() *GetAvatarUploadUrlRequest {
	return &GetAvatarUploadUrlRequest{}
}

func (p *GetAvatarUploadUrlRequest) InitDefault() {
}

func (p *GetAvatarUploadUrlRequest) GetFileExtension() (v string) {
	return p.FileExtension
}
func (p *GetAvatarUploadUrlRequest) SetFileExtension(val string) {
	p.FileExtension = val
}

func (p *GetAvatarUploadUrlRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAvatarUploadUrlRequest(%+v)", *p)
}

var fieldIDToName_GetAvatarUploadUrlRequest = map[int16]string{
	1: "file_extension",
}

type GetAvatarUploadUrlResponse struct {
	Base      *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	UploadUrl string       `thrift:"upload_url,2" frugal:"2,default,string" json:"upload_url"`
	AccessUrl string       `thrift:"access_url,3" frugal:"3,default,string" json:"access_url"`
	ExpiresIn int64        `thrift:"expires_in,4" frugal:"4,default,i64" json:"expires_in"`
}

func NewGetAvatarUploadUrlResponse() *GetAvatarUploadUrlResponse {
	return &GetAvatarUploadUrlResponse{}
}

func (p *GetAvatarUploadUrlResponse) InitDefault() {
}

var GetAvatarUploadUrlResponse_Base_DEFAULT *base.Status

func (p *GetAvatarUploadUrlResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetAvatarUploadUrlResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetAvatarUploadUrlResponse) GetUploadUrl() (v string) {
	return p.UploadUrl
}

func (p *GetAvatarUploadUrlResponse) GetAccessUrl() (v string) {
	return p.AccessUrl
}

func (p *GetAvatarUploadUrlResponse) GetExpiresIn() (v int64) {
	return p.ExpiresIn
}
func (p *GetAvatarUploadUrlResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetAvatarUploadUrlResponse) SetUploadUrl(val string) {
	p.UploadUrl = val
}
func (p *GetAvatarUploadUrlResponse) SetAccessUrl(val string) {
	p.AccessUrl = val
}
func (p *GetAvatarUploadUrlResponse) SetExpiresIn(val int64) {
	p.ExpiresIn = val
}

func (p *GetAvatarUploadUrlResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetAvatarUploadUrlResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAvatarUploadUrlResponse(%+v)", *p)
}

var fieldIDToName_GetAvatarUploadUrlResponse = map[int16]string{
	1: "base",
	2: "upload_url",
	3: "access_url",
	4: "expires_in",
}

type UpdateAvatarRequest struct {
	AvatarUrl string `thrift:"avatar_url,1" frugal:"1,default,string" json:"avatar_url"`
}

func NewUpdateAvatarRequest() *UpdateAvatarRequest {
	return &UpdateAvatarRequest{}
}

func (p *UpdateAvatarRequest) InitDefault() {
}

func (p *UpdateAvatarRequest) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}
func (p *UpdateAvatarRequest) SetAvatarUrl(val string) {
	p.AvatarUrl = val
}

func (p *UpdateAvatarRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateAvatarRequest(%+v)", *p)
}

var fieldIDToName_UpdateAvatarRequest = map[int16]string{
	1: "avatar_url",
}

type UpdateAvatarResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	User *base.User   `thrift:"user,2" frugal:"2,default,base.User" json:"user"`
}

func NewUpdateAvatarResponse() *UpdateAvatarResponse {
	return &UpdateAvatarResponse{}
}

func (p *UpdateAvatarResponse) InitDefault() {
}

var UpdateAvatarResponse_Base_DEFAULT *base.Status

func (p *UpdateAvatarResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UpdateAvatarResponse_Base_DEFAULT
	}
	return p.Base
}

var UpdateAvatarResponse_User_DEFAULT *base.User

func (p *UpdateAvatarResponse) GetUser() (v *base.User) {
	if !p.IsSetUser() {
		return UpdateAvatarResponse_User_DEFAULT
	}
	return p.User
}
func (p *UpdateAvatarResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *UpdateAvatarResponse) SetUser(val *base.User) {
	p.User = val
}

func (p *UpdateAvatarResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateAvatarResponse) IsSetUser() bool {
	return p.User != nil
}

func (p *UpdateAvatarResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateAvatarResponse(%+v)", *p)
}

var fieldIDToName_UpdateAvatarResponse = map[int16]string{
	1: "base",
	2: "user",
}

type ChangePasswordRequest struct {
	OldPassword     string `thrift:"old_password,1" frugal:"1,default,string" json:"old_password"`
	NewPassword_    string `thrift:"new_password,2" frugal:"2,default,string" json:"new_password"`
	ConfirmPassword string `thrift:"confirm_password,3" frugal:"3,default,string" json:"confirm_password"`
}

func NewChangePasswordRequest() *ChangePasswordRequest {
	return &ChangePasswordRequest{}
}

func (p *ChangePasswordRequest) InitDefault() {
}

func (p *ChangePasswordRequest) GetOldPassword() (v string) {
	return p.OldPassword
}

func (p *ChangePasswordRequest) GetNewPassword_() (v string) {
	return p.NewPassword_
}

func (p *ChangePasswordRequest) GetConfirmPassword() (v string) {
	return p.ConfirmPassword
}
func (p *ChangePasswordRequest) SetOldPassword(val string) {
	p.OldPassword = val
}
func (p *ChangePasswordRequest) SetNewPassword_(val string) {
	p.NewPassword_ = val
}
func (p *ChangePasswordRequest) SetConfirmPassword(val string) {
	p.ConfirmPassword = val
}

func (p *ChangePasswordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangePasswordRequest(%+v)", *p)
}

var fieldIDToName_ChangePasswordRequest = map[int16]string{
	1: "old_password",
	2: "new_password",
	3: "confirm_password",
}

type ChangePasswordResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewChangePasswordResponse() *ChangePasswordResponse {
	return &ChangePasswordResponse{}
}

func (p *ChangePasswordResponse) InitDefault() {
}

var ChangePasswordResponse_Base_DEFAULT *base.Status

func (p *ChangePasswordResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return ChangePasswordResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ChangePasswordResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *ChangePasswordResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ChangePasswordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangePasswordResponse(%+v)", *p)
}

var fieldIDToName_ChangePasswordResponse = map[int16]string{
	1: "base",
}

type UserService interface {
	UpdateUser(ctx context.Context, req *UpdateUserRequest) (r *UpdateUserResponse, err error)

	DeleteUser(ctx context.Context, req *DeleteUserRequest) (r *DeleteUserResponse, err error)

	QueryUser(ctx context.Context, req *QueryUserRequest) (r *QueryUserResponse, err error)

	CreateUser(ctx context.Context, req *CreateUserRequest) (r *CreateUserResponse, err error)

	LoginUser(ctx context.Context, req *LoginUserResquest) (r *LoginUserResponse, err error)

	GetUserInfo(ctx context.Context, req *GetUserInfoRequest) (r *GetUserInfoResponse, err error)

	CheckUserExistsById(ctx context.Context, req *CheckUserExistsByIdRequst) (r *CheckUserExistsByIdResponse, err error)

	VerifyCode(ctx context.Context, req *VerifyCodeRequest) (r *VerifyCodeResponse, err error)

	SendCode(ctx context.Context, req *SendCodeRequest) (r *SendCodeResponse, err error)

	ForgotPassword(ctx context.Context, req *ForgotPasswordRequest) (r *ForgotPasswordResponse, err error)

	ResetPassword(ctx context.Context, req *ResetPasswordRequest) (r *ResetPasswordResponse, err error)

	GetMyProfile(ctx context.Context, req *GetMyProfileRequest) (r *GetMyProfileResponse, err error)

	GetAvatarUploadUrl(ctx context.Context, req *GetAvatarUploadUrlRequest) (r *GetAvatarUploadUrlResponse, err error)

	UpdateAvatar(ctx context.Context, req *UpdateAvatarRequest) (r *UpdateAvatarResponse, err error)

	ChangePassword(ctx context.Context, req *ChangePasswordRequest) (r *ChangePasswordResponse, err error)
}

type UserServiceUpdateUserArgs struct {
	Req *UpdateUserRequest `thrift:"req,1" frugal:"1,default,UpdateUserRequest" json:"req"`
}

func NewUserServiceUpdateUserArgs() *UserServiceUpdateUserArgs {
	return &UserServiceUpdateUserArgs{}
}

func (p *UserServiceUpdateUserArgs) InitDefault() {
}

var UserServiceUpdateUserArgs_Req_DEFAULT *UpdateUserRequest

func (p *UserServiceUpdateUserArgs) GetReq() (v *UpdateUserRequest) {
	if !p.IsSetReq() {
		return UserServiceUpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUpdateUserArgs) SetReq(val *UpdateUserRequest) {
	p.Req = val
}

func (p *UserServiceUpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUpdateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceUpdateUserArgs = map[int16]string{
	1: "req",
}

type UserServiceUpdateUserResult struct {
	Success *UpdateUserResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateUserResponse" json:"success,omitempty"`
}

func NewUserServiceUpdateUserResult() *UserServiceUpdateUserResult {
	return &UserServiceUpdateUserResult{}
}

func (p *UserServiceUpdateUserResult) InitDefault() {
}

var UserServiceUpdateUserResult_Success_DEFAULT *UpdateUserResponse

func (p *UserServiceUpdateUserResult) GetSuccess() (v *UpdateUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceUpdateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUpdateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateUserResponse)
}

func (p *UserServiceUpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceUpdateUserResult = map[int16]string{
	0: "success",
}

type UserServiceDeleteUserArgs struct {
	Req *DeleteUserRequest `thrift:"req,1" frugal:"1,default,DeleteUserRequest" json:"req"`
}

func NewUserServiceDeleteUserArgs() *UserServiceDeleteUserArgs {
	return &UserServiceDeleteUserArgs{}
}

func (p *UserServiceDeleteUserArgs) InitDefault() {
}

var UserServiceDeleteUserArgs_Req_DEFAULT *DeleteUserRequest

func (p *UserServiceDeleteUserArgs) GetReq() (v *DeleteUserRequest) {
	if !p.IsSetReq() {
		return UserServiceDeleteUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceDeleteUserArgs) SetReq(val *DeleteUserRequest) {
	p.Req = val
}

func (p *UserServiceDeleteUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceDeleteUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceDeleteUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceDeleteUserArgs = map[int16]string{
	1: "req",
}

type UserServiceDeleteUserResult struct {
	Success *DeleteUserResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteUserResponse" json:"success,omitempty"`
}

func NewUserServiceDeleteUserResult() *UserServiceDeleteUserResult {
	return &UserServiceDeleteUserResult{}
}

func (p *UserServiceDeleteUserResult) InitDefault() {
}

var UserServiceDeleteUserResult_Success_DEFAULT *DeleteUserResponse

func (p *UserServiceDeleteUserResult) GetSuccess() (v *DeleteUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceDeleteUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceDeleteUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteUserResponse)
}

func (p *UserServiceDeleteUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceDeleteUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceDeleteUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceDeleteUserResult = map[int16]string{
	0: "success",
}

type UserServiceQueryUserArgs struct {
	Req *QueryUserRequest `thrift:"req,1" frugal:"1,default,QueryUserRequest" json:"req"`
}

func NewUserServiceQueryUserArgs() *UserServiceQueryUserArgs {
	return &UserServiceQueryUserArgs{}
}

func (p *UserServiceQueryUserArgs) InitDefault() {
}

var UserServiceQueryUserArgs_Req_DEFAULT *QueryUserRequest

func (p *UserServiceQueryUserArgs) GetReq() (v *QueryUserRequest) {
	if !p.IsSetReq() {
		return UserServiceQueryUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceQueryUserArgs) SetReq(val *QueryUserRequest) {
	p.Req = val
}

func (p *UserServiceQueryUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceQueryUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceQueryUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceQueryUserArgs = map[int16]string{
	1: "req",
}

type UserServiceQueryUserResult struct {
	Success *QueryUserResponse `thrift:"success,0,optional" frugal:"0,optional,QueryUserResponse" json:"success,omitempty"`
}

func NewUserServiceQueryUserResult() *UserServiceQueryUserResult {
	return &UserServiceQueryUserResult{}
}

func (p *UserServiceQueryUserResult) InitDefault() {
}

var UserServiceQueryUserResult_Success_DEFAULT *QueryUserResponse

func (p *UserServiceQueryUserResult) GetSuccess() (v *QueryUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceQueryUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceQueryUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryUserResponse)
}

func (p *UserServiceQueryUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceQueryUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceQueryUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceQueryUserResult = map[int16]string{
	0: "success",
}

type UserServiceCreateUserArgs struct {
	Req *CreateUserRequest `thrift:"req,1" frugal:"1,default,CreateUserRequest" json:"req"`
}

func NewUserServiceCreateUserArgs() *UserServiceCreateUserArgs {
	return &UserServiceCreateUserArgs{}
}

func (p *UserServiceCreateUserArgs) InitDefault() {
}

var UserServiceCreateUserArgs_Req_DEFAULT *CreateUserRequest

func (p *UserServiceCreateUserArgs) GetReq() (v *CreateUserRequest) {
	if !p.IsSetReq() {
		return UserServiceCreateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceCreateUserArgs) SetReq(val *CreateUserRequest) {
	p.Req = val
}

func (p *UserServiceCreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceCreateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCreateUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceCreateUserArgs = map[int16]string{
	1: "req",
}

type UserServiceCreateUserResult struct {
	Success *CreateUserResponse `thrift:"success,0,optional" frugal:"0,optional,CreateUserResponse" json:"success,omitempty"`
}

func NewUserServiceCreateUserResult() *UserServiceCreateUserResult {
	return &UserServiceCreateUserResult{}
}

func (p *UserServiceCreateUserResult) InitDefault() {
}

var UserServiceCreateUserResult_Success_DEFAULT *CreateUserResponse

func (p *UserServiceCreateUserResult) GetSuccess() (v *CreateUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceCreateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceCreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateUserResponse)
}

func (p *UserServiceCreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceCreateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCreateUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceCreateUserResult = map[int16]string{
	0: "success",
}

type UserServiceLoginUserArgs struct {
	Req *LoginUserResquest `thrift:"req,1" frugal:"1,default,LoginUserResquest" json:"req"`
}

func NewUserServiceLoginUserArgs() *UserServiceLoginUserArgs {
	return &UserServiceLoginUserArgs{}
}

func (p *UserServiceLoginUserArgs) InitDefault() {
}

var UserServiceLoginUserArgs_Req_DEFAULT *LoginUserResquest

func (p *UserServiceLoginUserArgs) GetReq() (v *LoginUserResquest) {
	if !p.IsSetReq() {
		return UserServiceLoginUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceLoginUserArgs) SetReq(val *LoginUserResquest) {
	p.Req = val
}

func (p *UserServiceLoginUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceLoginUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceLoginUserArgs = map[int16]string{
	1: "req",
}

type UserServiceLoginUserResult struct {
	Success *LoginUserResponse `thrift:"success,0,optional" frugal:"0,optional,LoginUserResponse" json:"success,omitempty"`
}

func NewUserServiceLoginUserResult() *UserServiceLoginUserResult {
	return &UserServiceLoginUserResult{}
}

func (p *UserServiceLoginUserResult) InitDefault() {
}

var UserServiceLoginUserResult_Success_DEFAULT *LoginUserResponse

func (p *UserServiceLoginUserResult) GetSuccess() (v *LoginUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceLoginUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceLoginUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginUserResponse)
}

func (p *UserServiceLoginUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceLoginUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceLoginUserResult = map[int16]string{
	0: "success",
}

type UserServiceGetUserInfoArgs struct {
	Req *GetUserInfoRequest `thrift:"req,1" frugal:"1,default,GetUserInfoRequest" json:"req"`
}

func NewUserServiceGetUserInfoArgs() *UserServiceGetUserInfoArgs {
	return &UserServiceGetUserInfoArgs{}
}

func (p *UserServiceGetUserInfoArgs) InitDefault() {
}

var UserServiceGetUserInfoArgs_Req_DEFAULT *GetUserInfoRequest

func (p *UserServiceGetUserInfoArgs) GetReq() (v *GetUserInfoRequest) {
	if !p.IsSetReq() {
		return UserServiceGetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserInfoArgs) SetReq(val *GetUserInfoRequest) {
	p.Req = val
}

func (p *UserServiceGetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoArgs = map[int16]string{
	1: "req",
}

type UserServiceGetUserInfoResult struct {
	Success *GetUserInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserInfoResponse" json:"success,omitempty"`
}

func NewUserServiceGetUserInfoResult() *UserServiceGetUserInfoResult {
	return &UserServiceGetUserInfoResult{}
}

func (p *UserServiceGetUserInfoResult) InitDefault() {
}

var UserServiceGetUserInfoResult_Success_DEFAULT *GetUserInfoResponse

func (p *UserServiceGetUserInfoResult) GetSuccess() (v *GetUserInfoResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserInfoResponse)
}

func (p *UserServiceGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoResult = map[int16]string{
	0: "success",
}

type UserServiceCheckUserExistsByIdArgs struct {
	Req *CheckUserExistsByIdRequst `thrift:"req,1" frugal:"1,default,CheckUserExistsByIdRequst" json:"req"`
}

func NewUserServiceCheckUserExistsByIdArgs() *UserServiceCheckUserExistsByIdArgs {
	return &UserServiceCheckUserExistsByIdArgs{}
}

func (p *UserServiceCheckUserExistsByIdArgs) InitDefault() {
}

var UserServiceCheckUserExistsByIdArgs_Req_DEFAULT *CheckUserExistsByIdRequst

func (p *UserServiceCheckUserExistsByIdArgs) GetReq() (v *CheckUserExistsByIdRequst) {
	if !p.IsSetReq() {
		return UserServiceCheckUserExistsByIdArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceCheckUserExistsByIdArgs) SetReq(val *CheckUserExistsByIdRequst) {
	p.Req = val
}

func (p *UserServiceCheckUserExistsByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceCheckUserExistsByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCheckUserExistsByIdArgs(%+v)", *p)
}

var fieldIDToName_UserServiceCheckUserExistsByIdArgs = map[int16]string{
	1: "req",
}

type UserServiceCheckUserExistsByIdResult struct {
	Success *CheckUserExistsByIdResponse `thrift:"success,0,optional" frugal:"0,optional,CheckUserExistsByIdResponse" json:"success,omitempty"`
}

func NewUserServiceCheckUserExistsByIdResult() *UserServiceCheckUserExistsByIdResult {
	return &UserServiceCheckUserExistsByIdResult{}
}

func (p *UserServiceCheckUserExistsByIdResult) InitDefault() {
}

var UserServiceCheckUserExistsByIdResult_Success_DEFAULT *CheckUserExistsByIdResponse

func (p *UserServiceCheckUserExistsByIdResult) GetSuccess() (v *CheckUserExistsByIdResponse) {
	if !p.IsSetSuccess() {
		return UserServiceCheckUserExistsByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceCheckUserExistsByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*CheckUserExistsByIdResponse)
}

func (p *UserServiceCheckUserExistsByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceCheckUserExistsByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCheckUserExistsByIdResult(%+v)", *p)
}

var fieldIDToName_UserServiceCheckUserExistsByIdResult = map[int16]string{
	0: "success",
}

type UserServiceVerifyCodeArgs struct {
	Req *VerifyCodeRequest `thrift:"req,1" frugal:"1,default,VerifyCodeRequest" json:"req"`
}

func NewUserServiceVerifyCodeArgs() *UserServiceVerifyCodeArgs {
	return &UserServiceVerifyCodeArgs{}
}

func (p *UserServiceVerifyCodeArgs) InitDefault() {
}

var UserServiceVerifyCodeArgs_Req_DEFAULT *VerifyCodeRequest

func (p *UserServiceVerifyCodeArgs) GetReq() (v *VerifyCodeRequest) {
	if !p.IsSetReq() {
		return UserServiceVerifyCodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceVerifyCodeArgs) SetReq(val *VerifyCodeRequest) {
	p.Req = val
}

func (p *UserServiceVerifyCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceVerifyCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceVerifyCodeArgs(%+v)", *p)
}

var fieldIDToName_UserServiceVerifyCodeArgs = map[int16]string{
	1: "req",
}

type UserServiceVerifyCodeResult struct {
	Success *VerifyCodeResponse `thrift:"success,0,optional" frugal:"0,optional,VerifyCodeResponse" json:"success,omitempty"`
}

func NewUserServiceVerifyCodeResult() *UserServiceVerifyCodeResult {
	return &UserServiceVerifyCodeResult{}
}

func (p *UserServiceVerifyCodeResult) InitDefault() {
}

var UserServiceVerifyCodeResult_Success_DEFAULT *VerifyCodeResponse

func (p *UserServiceVerifyCodeResult) GetSuccess() (v *VerifyCodeResponse) {
	if !p.IsSetSuccess() {
		return UserServiceVerifyCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceVerifyCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*VerifyCodeResponse)
}

func (p *UserServiceVerifyCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceVerifyCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceVerifyCodeResult(%+v)", *p)
}

var fieldIDToName_UserServiceVerifyCodeResult = map[int16]string{
	0: "success",
}

type UserServiceSendCodeArgs struct {
	Req *SendCodeRequest `thrift:"req,1" frugal:"1,default,SendCodeRequest" json:"req"`
}

func NewUserServiceSendCodeArgs() *UserServiceSendCodeArgs {
	return &UserServiceSendCodeArgs{}
}

func (p *UserServiceSendCodeArgs) InitDefault() {
}

var UserServiceSendCodeArgs_Req_DEFAULT *SendCodeRequest

func (p *UserServiceSendCodeArgs) GetReq() (v *SendCodeRequest) {
	if !p.IsSetReq() {
		return UserServiceSendCodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceSendCodeArgs) SetReq(val *SendCodeRequest) {
	p.Req = val
}

func (p *UserServiceSendCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceSendCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceSendCodeArgs(%+v)", *p)
}

var fieldIDToName_UserServiceSendCodeArgs = map[int16]string{
	1: "req",
}

type UserServiceSendCodeResult struct {
	Success *SendCodeResponse `thrift:"success,0,optional" frugal:"0,optional,SendCodeResponse" json:"success,omitempty"`
}

func NewUserServiceSendCodeResult() *UserServiceSendCodeResult {
	return &UserServiceSendCodeResult{}
}

func (p *UserServiceSendCodeResult) InitDefault() {
}

var UserServiceSendCodeResult_Success_DEFAULT *SendCodeResponse

func (p *UserServiceSendCodeResult) GetSuccess() (v *SendCodeResponse) {
	if !p.IsSetSuccess() {
		return UserServiceSendCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceSendCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*SendCodeResponse)
}

func (p *UserServiceSendCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceSendCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceSendCodeResult(%+v)", *p)
}

var fieldIDToName_UserServiceSendCodeResult = map[int16]string{
	0: "success",
}

type UserServiceForgotPasswordArgs struct {
	Req *ForgotPasswordRequest `thrift:"req,1" frugal:"1,default,ForgotPasswordRequest" json:"req"`
}

func NewUserServiceForgotPasswordArgs() *UserServiceForgotPasswordArgs {
	return &UserServiceForgotPasswordArgs{}
}

func (p *UserServiceForgotPasswordArgs) InitDefault() {
}

var UserServiceForgotPasswordArgs_Req_DEFAULT *ForgotPasswordRequest

func (p *UserServiceForgotPasswordArgs) GetReq() (v *ForgotPasswordRequest) {
	if !p.IsSetReq() {
		return UserServiceForgotPasswordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceForgotPasswordArgs) SetReq(val *ForgotPasswordRequest) {
	p.Req = val
}

func (p *UserServiceForgotPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceForgotPasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceForgotPasswordArgs(%+v)", *p)
}

var fieldIDToName_UserServiceForgotPasswordArgs = map[int16]string{
	1: "req",
}

type UserServiceForgotPasswordResult struct {
	Success *ForgotPasswordResponse `thrift:"success,0,optional" frugal:"0,optional,ForgotPasswordResponse" json:"success,omitempty"`
}

func NewUserServiceForgotPasswordResult() *UserServiceForgotPasswordResult {
	return &UserServiceForgotPasswordResult{}
}

func (p *UserServiceForgotPasswordResult) InitDefault() {
}

var UserServiceForgotPasswordResult_Success_DEFAULT *ForgotPasswordResponse

func (p *UserServiceForgotPasswordResult) GetSuccess() (v *ForgotPasswordResponse) {
	if !p.IsSetSuccess() {
		return UserServiceForgotPasswordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceForgotPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*ForgotPasswordResponse)
}

func (p *UserServiceForgotPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceForgotPasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceForgotPasswordResult(%+v)", *p)
}

var fieldIDToName_UserServiceForgotPasswordResult = map[int16]string{
	0: "success",
}

type UserServiceResetPasswordArgs struct {
	Req *ResetPasswordRequest `thrift:"req,1" frugal:"1,default,ResetPasswordRequest" json:"req"`
}

func NewUserServiceResetPasswordArgs() *UserServiceResetPasswordArgs {
	return &UserServiceResetPasswordArgs{}
}

func (p *UserServiceResetPasswordArgs) InitDefault() {
}

var UserServiceResetPasswordArgs_Req_DEFAULT *ResetPasswordRequest

func (p *UserServiceResetPasswordArgs) GetReq() (v *ResetPasswordRequest) {
	if !p.IsSetReq() {
		return UserServiceResetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceResetPasswordArgs) SetReq(val *ResetPasswordRequest) {
	p.Req = val
}

func (p *UserServiceResetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceResetPasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceResetPasswordArgs(%+v)", *p)
}

var fieldIDToName_UserServiceResetPasswordArgs = map[int16]string{
	1: "req",
}

type UserServiceResetPasswordResult struct {
	Success *ResetPasswordResponse `thrift:"success,0,optional" frugal:"0,optional,ResetPasswordResponse" json:"success,omitempty"`
}

func NewUserServiceResetPasswordResult() *UserServiceResetPasswordResult {
	return &UserServiceResetPasswordResult{}
}

func (p *UserServiceResetPasswordResult) InitDefault() {
}

var UserServiceResetPasswordResult_Success_DEFAULT *ResetPasswordResponse

func (p *UserServiceResetPasswordResult) GetSuccess() (v *ResetPasswordResponse) {
	if !p.IsSetSuccess() {
		return UserServiceResetPasswordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceResetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*ResetPasswordResponse)
}

func (p *UserServiceResetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceResetPasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceResetPasswordResult(%+v)", *p)
}

var fieldIDToName_UserServiceResetPasswordResult = map[int16]string{
	0: "success",
}

type UserServiceGetMyProfileArgs struct {
	Req *GetMyProfileRequest `thrift:"req,1" frugal:"1,default,GetMyProfileRequest" json:"req"`
}

func NewUserServiceGetMyProfileArgs() *UserServiceGetMyProfileArgs {
	return &UserServiceGetMyProfileArgs{}
}

func (p *UserServiceGetMyProfileArgs) InitDefault() {
}

var UserServiceGetMyProfileArgs_Req_DEFAULT *GetMyProfileRequest

func (p *UserServiceGetMyProfileArgs) GetReq() (v *GetMyProfileRequest) {
	if !p.IsSetReq() {
		return UserServiceGetMyProfileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetMyProfileArgs) SetReq(val *GetMyProfileRequest) {
	p.Req = val
}

func (p *UserServiceGetMyProfileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetMyProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetMyProfileArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetMyProfileArgs = map[int16]string{
	1: "req",
}

type UserServiceGetMyProfileResult struct {
	Success *GetMyProfileResponse `thrift:"success,0,optional" frugal:"0,optional,GetMyProfileResponse" json:"success,omitempty"`
}

func NewUserServiceGetMyProfileResult() *UserServiceGetMyProfileResult {
	return &UserServiceGetMyProfileResult{}
}

func (p *UserServiceGetMyProfileResult) InitDefault() {
}

var UserServiceGetMyProfileResult_Success_DEFAULT *GetMyProfileResponse

func (p *UserServiceGetMyProfileResult) GetSuccess() (v *GetMyProfileResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetMyProfileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetMyProfileResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetMyProfileResponse)
}

func (p *UserServiceGetMyProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetMyProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetMyProfileResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetMyProfileResult = map[int16]string{
	0: "success",
}

type UserServiceGetAvatarUploadUrlArgs struct {
	Req *GetAvatarUploadUrlRequest `thrift:"req,1" frugal:"1,default,GetAvatarUploadUrlRequest" json:"req"`
}

func NewUserServiceGetAvatarUploadUrlArgs() *UserServiceGetAvatarUploadUrlArgs {
	return &UserServiceGetAvatarUploadUrlArgs{}
}

func (p *UserServiceGetAvatarUploadUrlArgs) InitDefault() {
}

var UserServiceGetAvatarUploadUrlArgs_Req_DEFAULT *GetAvatarUploadUrlRequest

func (p *UserServiceGetAvatarUploadUrlArgs) GetReq() (v *GetAvatarUploadUrlRequest) {
	if !p.IsSetReq() {
		return UserServiceGetAvatarUploadUrlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetAvatarUploadUrlArgs) SetReq(val *GetAvatarUploadUrlRequest) {
	p.Req = val
}

func (p *UserServiceGetAvatarUploadUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetAvatarUploadUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetAvatarUploadUrlArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetAvatarUploadUrlArgs = map[int16]string{
	1: "req",
}

type UserServiceGetAvatarUploadUrlResult struct {
	Success *GetAvatarUploadUrlResponse `thrift:"success,0,optional" frugal:"0,optional,GetAvatarUploadUrlResponse" json:"success,omitempty"`
}

func NewUserServiceGetAvatarUploadUrlResult() *UserServiceGetAvatarUploadUrlResult {
	return &UserServiceGetAvatarUploadUrlResult{}
}

func (p *UserServiceGetAvatarUploadUrlResult) InitDefault() {
}

var UserServiceGetAvatarUploadUrlResult_Success_DEFAULT *GetAvatarUploadUrlResponse

func (p *UserServiceGetAvatarUploadUrlResult) GetSuccess() (v *GetAvatarUploadUrlResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetAvatarUploadUrlResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetAvatarUploadUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetAvatarUploadUrlResponse)
}

func (p *UserServiceGetAvatarUploadUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetAvatarUploadUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetAvatarUploadUrlResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetAvatarUploadUrlResult = map[int16]string{
	0: "success",
}

type UserServiceUpdateAvatarArgs struct {
	Req *UpdateAvatarRequest `thrift:"req,1" frugal:"1,default,UpdateAvatarRequest" json:"req"`
}

func NewUserServiceUpdateAvatarArgs() *UserServiceUpdateAvatarArgs {
	return &UserServiceUpdateAvatarArgs{}
}

func (p *UserServiceUpdateAvatarArgs) InitDefault() {
}

var UserServiceUpdateAvatarArgs_Req_DEFAULT *UpdateAvatarRequest

func (p *UserServiceUpdateAvatarArgs) GetReq() (v *UpdateAvatarRequest) {
	if !p.IsSetReq() {
		return UserServiceUpdateAvatarArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUpdateAvatarArgs) SetReq(val *UpdateAvatarRequest) {
	p.Req = val
}

func (p *UserServiceUpdateAvatarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUpdateAvatarArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateAvatarArgs(%+v)", *p)
}

var fieldIDToName_UserServiceUpdateAvatarArgs = map[int16]string{
	1: "req",
}

type UserServiceUpdateAvatarResult struct {
	Success *UpdateAvatarResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateAvatarResponse" json:"success,omitempty"`
}

func NewUserServiceUpdateAvatarResult() *UserServiceUpdateAvatarResult {
	return &UserServiceUpdateAvatarResult{}
}

func (p *UserServiceUpdateAvatarResult) InitDefault() {
}

var UserServiceUpdateAvatarResult_Success_DEFAULT *UpdateAvatarResponse

func (p *UserServiceUpdateAvatarResult) GetSuccess() (v *UpdateAvatarResponse) {
	if !p.IsSetSuccess() {
		return UserServiceUpdateAvatarResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUpdateAvatarResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateAvatarResponse)
}

func (p *UserServiceUpdateAvatarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateAvatarResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateAvatarResult(%+v)", *p)
}

var fieldIDToName_UserServiceUpdateAvatarResult = map[int16]string{
	0: "success",
}

type UserServiceChangePasswordArgs struct {
	Req *ChangePasswordRequest `thrift:"req,1" frugal:"1,default,ChangePasswordRequest" json:"req"`
}

func NewUserServiceChangePasswordArgs() *UserServiceChangePasswordArgs {
	return &UserServiceChangePasswordArgs{}
}

func (p *UserServiceChangePasswordArgs) InitDefault() {
}

var UserServiceChangePasswordArgs_Req_DEFAULT *ChangePasswordRequest

func (p *UserServiceChangePasswordArgs) GetReq() (v *ChangePasswordRequest) {
	if !p.IsSetReq() {
		return UserServiceChangePasswordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceChangePasswordArgs) SetReq(val *ChangePasswordRequest) {
	p.Req = val
}

func (p *UserServiceChangePasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceChangePasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceChangePasswordArgs(%+v)", *p)
}

var fieldIDToName_UserServiceChangePasswordArgs = map[int16]string{
	1: "req",
}

type UserServiceChangePasswordResult struct {
	Success *ChangePasswordResponse `thrift:"success,0,optional" frugal:"0,optional,ChangePasswordResponse" json:"success,omitempty"`
}

func NewUserServiceChangePasswordResult() *UserServiceChangePasswordResult {
	return &UserServiceChangePasswordResult{}
}

func (p *UserServiceChangePasswordResult) InitDefault() {
}

var UserServiceChangePasswordResult_Success_DEFAULT *ChangePasswordResponse

func (p *UserServiceChangePasswordResult) GetSuccess() (v *ChangePasswordResponse) {
	if !p.IsSetSuccess() {
		return UserServiceChangePasswordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceChangePasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChangePasswordResponse)
}

func (p *UserServiceChangePasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceChangePasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceChangePasswordResult(%+v)", *p)
}

var fieldIDToName_UserServiceChangePasswordResult = map[int16]string{
	0: "success",
}
