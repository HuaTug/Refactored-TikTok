// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package relations

import (
	"HuaTug.com/kitex_gen/base"
	"context"
	"fmt"
)

type RelationServiceRequest struct {
	ActionType int64 `thrift:"action_type,1" frugal:"1,default,i64" json:"action_type"`
	FromUserId int64 `thrift:"from_user_id,2" frugal:"2,default,i64" json:"from_user_id"`
	ToUserId   int64 `thrift:"to_user_id,3" frugal:"3,default,i64" json:"to_user_id"`
}

func NewRelationServiceRequest() *RelationServiceRequest {
	return &RelationServiceRequest{}
}

func (p *RelationServiceRequest) InitDefault() {
}

func (p *RelationServiceRequest) GetActionType() (v int64) {
	return p.ActionType
}

func (p *RelationServiceRequest) GetFromUserId() (v int64) {
	return p.FromUserId
}

func (p *RelationServiceRequest) GetToUserId() (v int64) {
	return p.ToUserId
}
func (p *RelationServiceRequest) SetActionType(val int64) {
	p.ActionType = val
}
func (p *RelationServiceRequest) SetFromUserId(val int64) {
	p.FromUserId = val
}
func (p *RelationServiceRequest) SetToUserId(val int64) {
	p.ToUserId = val
}

func (p *RelationServiceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationServiceRequest(%+v)", *p)
}

var fieldIDToName_RelationServiceRequest = map[int16]string{
	1: "action_type",
	2: "from_user_id",
	3: "to_user_id",
}

type RelationServiceResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewRelationServiceResponse() *RelationServiceResponse {
	return &RelationServiceResponse{}
}

func (p *RelationServiceResponse) InitDefault() {
}

var RelationServiceResponse_Base_DEFAULT *base.Status

func (p *RelationServiceResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return RelationServiceResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *RelationServiceResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *RelationServiceResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *RelationServiceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationServiceResponse(%+v)", *p)
}

var fieldIDToName_RelationServiceResponse = map[int16]string{
	1: "base",
}

type FollowingListRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum  int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewFollowingListRequest() *FollowingListRequest {
	return &FollowingListRequest{}
}

func (p *FollowingListRequest) InitDefault() {
}

func (p *FollowingListRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *FollowingListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *FollowingListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *FollowingListRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *FollowingListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *FollowingListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *FollowingListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowingListRequest(%+v)", *p)
}

var fieldIDToName_FollowingListRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
}

type FollowingListResponse struct {
	Base  *base.Status     `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Items []*base.UserLite `thrift:"items,2" frugal:"2,default,list<base.UserLite>" json:"items"`
	Total int64            `thrift:"total,3" frugal:"3,default,i64" json:"total"`
}

func NewFollowingListResponse() *FollowingListResponse {
	return &FollowingListResponse{}
}

func (p *FollowingListResponse) InitDefault() {
}

var FollowingListResponse_Base_DEFAULT *base.Status

func (p *FollowingListResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return FollowingListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *FollowingListResponse) GetItems() (v []*base.UserLite) {
	return p.Items
}

func (p *FollowingListResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *FollowingListResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *FollowingListResponse) SetItems(val []*base.UserLite) {
	p.Items = val
}
func (p *FollowingListResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *FollowingListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *FollowingListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowingListResponse(%+v)", *p)
}

var fieldIDToName_FollowingListResponse = map[int16]string{
	1: "base",
	2: "items",
	3: "total",
}

type FollowerListRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum  int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewFollowerListRequest() *FollowerListRequest {
	return &FollowerListRequest{}
}

func (p *FollowerListRequest) InitDefault() {
}

func (p *FollowerListRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *FollowerListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *FollowerListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *FollowerListRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *FollowerListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *FollowerListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *FollowerListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowerListRequest(%+v)", *p)
}

var fieldIDToName_FollowerListRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
}

type FollowerListResponse struct {
	Base  *base.Status     `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Items []*base.UserLite `thrift:"items,2" frugal:"2,default,list<base.UserLite>" json:"items"`
	Total int64            `thrift:"total,3" frugal:"3,default,i64" json:"total"`
}

func NewFollowerListResponse() *FollowerListResponse {
	return &FollowerListResponse{}
}

func (p *FollowerListResponse) InitDefault() {
}

var FollowerListResponse_Base_DEFAULT *base.Status

func (p *FollowerListResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return FollowerListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *FollowerListResponse) GetItems() (v []*base.UserLite) {
	return p.Items
}

func (p *FollowerListResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *FollowerListResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *FollowerListResponse) SetItems(val []*base.UserLite) {
	p.Items = val
}
func (p *FollowerListResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *FollowerListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *FollowerListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowerListResponse(%+v)", *p)
}

var fieldIDToName_FollowerListResponse = map[int16]string{
	1: "base",
	2: "items",
	3: "total",
}

type FriendListRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum  int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewFriendListRequest() *FriendListRequest {
	return &FriendListRequest{}
}

func (p *FriendListRequest) InitDefault() {
}

func (p *FriendListRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *FriendListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *FriendListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *FriendListRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *FriendListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *FriendListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *FriendListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendListRequest(%+v)", *p)
}

var fieldIDToName_FriendListRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
}

type FriendListResponse struct {
	Base  *base.Status     `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Items []*base.UserLite `thrift:"items,2" frugal:"2,default,list<base.UserLite>" json:"items"`
	Total int64            `thrift:"total,3" frugal:"3,default,i64" json:"total"`
}

func NewFriendListResponse() *FriendListResponse {
	return &FriendListResponse{}
}

func (p *FriendListResponse) InitDefault() {
}

var FriendListResponse_Base_DEFAULT *base.Status

func (p *FriendListResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return FriendListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *FriendListResponse) GetItems() (v []*base.UserLite) {
	return p.Items
}

func (p *FriendListResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *FriendListResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *FriendListResponse) SetItems(val []*base.UserLite) {
	p.Items = val
}
func (p *FriendListResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *FriendListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *FriendListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendListResponse(%+v)", *p)
}

var fieldIDToName_FriendListResponse = map[int16]string{
	1: "base",
	2: "items",
	3: "total",
}

type FollowService interface {
	RelationService(ctx context.Context, req *RelationServiceRequest) (r *RelationServiceResponse, err error)

	FollowingList(ctx context.Context, req *FollowingListRequest) (r *FollowingListResponse, err error)

	FollowerList(ctx context.Context, req *FollowerListRequest) (r *FollowerListResponse, err error)

	FriendList(ctx context.Context, req *FriendListRequest) (r *FriendListResponse, err error)
}

type FollowServiceRelationServiceArgs struct {
	Req *RelationServiceRequest `thrift:"req,1" frugal:"1,default,RelationServiceRequest" json:"req"`
}

func NewFollowServiceRelationServiceArgs() *FollowServiceRelationServiceArgs {
	return &FollowServiceRelationServiceArgs{}
}

func (p *FollowServiceRelationServiceArgs) InitDefault() {
}

var FollowServiceRelationServiceArgs_Req_DEFAULT *RelationServiceRequest

func (p *FollowServiceRelationServiceArgs) GetReq() (v *RelationServiceRequest) {
	if !p.IsSetReq() {
		return FollowServiceRelationServiceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowServiceRelationServiceArgs) SetReq(val *RelationServiceRequest) {
	p.Req = val
}

func (p *FollowServiceRelationServiceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowServiceRelationServiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceRelationServiceArgs(%+v)", *p)
}

var fieldIDToName_FollowServiceRelationServiceArgs = map[int16]string{
	1: "req",
}

type FollowServiceRelationServiceResult struct {
	Success *RelationServiceResponse `thrift:"success,0,optional" frugal:"0,optional,RelationServiceResponse" json:"success,omitempty"`
}

func NewFollowServiceRelationServiceResult() *FollowServiceRelationServiceResult {
	return &FollowServiceRelationServiceResult{}
}

func (p *FollowServiceRelationServiceResult) InitDefault() {
}

var FollowServiceRelationServiceResult_Success_DEFAULT *RelationServiceResponse

func (p *FollowServiceRelationServiceResult) GetSuccess() (v *RelationServiceResponse) {
	if !p.IsSetSuccess() {
		return FollowServiceRelationServiceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowServiceRelationServiceResult) SetSuccess(x interface{}) {
	p.Success = x.(*RelationServiceResponse)
}

func (p *FollowServiceRelationServiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowServiceRelationServiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceRelationServiceResult(%+v)", *p)
}

var fieldIDToName_FollowServiceRelationServiceResult = map[int16]string{
	0: "success",
}

type FollowServiceFollowingListArgs struct {
	Req *FollowingListRequest `thrift:"req,1" frugal:"1,default,FollowingListRequest" json:"req"`
}

func NewFollowServiceFollowingListArgs() *FollowServiceFollowingListArgs {
	return &FollowServiceFollowingListArgs{}
}

func (p *FollowServiceFollowingListArgs) InitDefault() {
}

var FollowServiceFollowingListArgs_Req_DEFAULT *FollowingListRequest

func (p *FollowServiceFollowingListArgs) GetReq() (v *FollowingListRequest) {
	if !p.IsSetReq() {
		return FollowServiceFollowingListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowServiceFollowingListArgs) SetReq(val *FollowingListRequest) {
	p.Req = val
}

func (p *FollowServiceFollowingListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowServiceFollowingListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceFollowingListArgs(%+v)", *p)
}

var fieldIDToName_FollowServiceFollowingListArgs = map[int16]string{
	1: "req",
}

type FollowServiceFollowingListResult struct {
	Success *FollowingListResponse `thrift:"success,0,optional" frugal:"0,optional,FollowingListResponse" json:"success,omitempty"`
}

func NewFollowServiceFollowingListResult() *FollowServiceFollowingListResult {
	return &FollowServiceFollowingListResult{}
}

func (p *FollowServiceFollowingListResult) InitDefault() {
}

var FollowServiceFollowingListResult_Success_DEFAULT *FollowingListResponse

func (p *FollowServiceFollowingListResult) GetSuccess() (v *FollowingListResponse) {
	if !p.IsSetSuccess() {
		return FollowServiceFollowingListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowServiceFollowingListResult) SetSuccess(x interface{}) {
	p.Success = x.(*FollowingListResponse)
}

func (p *FollowServiceFollowingListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowServiceFollowingListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceFollowingListResult(%+v)", *p)
}

var fieldIDToName_FollowServiceFollowingListResult = map[int16]string{
	0: "success",
}

type FollowServiceFollowerListArgs struct {
	Req *FollowerListRequest `thrift:"req,1" frugal:"1,default,FollowerListRequest" json:"req"`
}

func NewFollowServiceFollowerListArgs() *FollowServiceFollowerListArgs {
	return &FollowServiceFollowerListArgs{}
}

func (p *FollowServiceFollowerListArgs) InitDefault() {
}

var FollowServiceFollowerListArgs_Req_DEFAULT *FollowerListRequest

func (p *FollowServiceFollowerListArgs) GetReq() (v *FollowerListRequest) {
	if !p.IsSetReq() {
		return FollowServiceFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowServiceFollowerListArgs) SetReq(val *FollowerListRequest) {
	p.Req = val
}

func (p *FollowServiceFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowServiceFollowerListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceFollowerListArgs(%+v)", *p)
}

var fieldIDToName_FollowServiceFollowerListArgs = map[int16]string{
	1: "req",
}

type FollowServiceFollowerListResult struct {
	Success *FollowerListResponse `thrift:"success,0,optional" frugal:"0,optional,FollowerListResponse" json:"success,omitempty"`
}

func NewFollowServiceFollowerListResult() *FollowServiceFollowerListResult {
	return &FollowServiceFollowerListResult{}
}

func (p *FollowServiceFollowerListResult) InitDefault() {
}

var FollowServiceFollowerListResult_Success_DEFAULT *FollowerListResponse

func (p *FollowServiceFollowerListResult) GetSuccess() (v *FollowerListResponse) {
	if !p.IsSetSuccess() {
		return FollowServiceFollowerListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowServiceFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*FollowerListResponse)
}

func (p *FollowServiceFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowServiceFollowerListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceFollowerListResult(%+v)", *p)
}

var fieldIDToName_FollowServiceFollowerListResult = map[int16]string{
	0: "success",
}

type FollowServiceFriendListArgs struct {
	Req *FriendListRequest `thrift:"req,1" frugal:"1,default,FriendListRequest" json:"req"`
}

func NewFollowServiceFriendListArgs() *FollowServiceFriendListArgs {
	return &FollowServiceFriendListArgs{}
}

func (p *FollowServiceFriendListArgs) InitDefault() {
}

var FollowServiceFriendListArgs_Req_DEFAULT *FriendListRequest

func (p *FollowServiceFriendListArgs) GetReq() (v *FriendListRequest) {
	if !p.IsSetReq() {
		return FollowServiceFriendListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowServiceFriendListArgs) SetReq(val *FriendListRequest) {
	p.Req = val
}

func (p *FollowServiceFriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowServiceFriendListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceFriendListArgs(%+v)", *p)
}

var fieldIDToName_FollowServiceFriendListArgs = map[int16]string{
	1: "req",
}

type FollowServiceFriendListResult struct {
	Success *FriendListResponse `thrift:"success,0,optional" frugal:"0,optional,FriendListResponse" json:"success,omitempty"`
}

func NewFollowServiceFriendListResult() *FollowServiceFriendListResult {
	return &FollowServiceFriendListResult{}
}

func (p *FollowServiceFriendListResult) InitDefault() {
}

var FollowServiceFriendListResult_Success_DEFAULT *FriendListResponse

func (p *FollowServiceFriendListResult) GetSuccess() (v *FriendListResponse) {
	if !p.IsSetSuccess() {
		return FollowServiceFriendListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowServiceFriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*FriendListResponse)
}

func (p *FollowServiceFriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowServiceFriendListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceFriendListResult(%+v)", *p)
}

var fieldIDToName_FollowServiceFriendListResult = map[int16]string{
	0: "success",
}
