// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package base

import (
	"fmt"
)

type Status struct {
	Code int64  `thrift:"code,1" frugal:"1,default,i64" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewStatus() *Status {
	return &Status{}
}

func (p *Status) InitDefault() {
}

func (p *Status) GetCode() (v int64) {
	return p.Code
}

func (p *Status) GetMsg() (v string) {
	return p.Msg
}
func (p *Status) SetCode(val int64) {
	p.Code = val
}
func (p *Status) SetMsg(val string) {
	p.Msg = val
}

func (p *Status) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Status(%+v)", *p)
}

var fieldIDToName_Status = map[int16]string{
	1: "code",
	2: "msg",
}

type User struct {
	UserId    int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	UserName  string `thrift:"user_name,2" frugal:"2,default,string" json:"user_name"`
	Email     string `thrift:"email,3" frugal:"3,default,string" json:"email"`
	Password  string `thrift:"password,4" frugal:"4,default,string" json:"password"`
	Sex       int64  `thrift:"sex,5" frugal:"5,default,i64" json:"sex"`
	AvatarUrl string `thrift:"avatar_url,6" frugal:"6,default,string" json:"avatar_url"`
	CreatedAt string `thrift:"created_at,7" frugal:"7,default,string" json:"created_at"`
	UpdatedAt string `thrift:"updated_at,8" frugal:"8,default,string" json:"updated_at"`
	DeletedAt string `thrift:"deleted_at,9" frugal:"9,default,string" json:"deleted_at"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
}

func (p *User) GetUserId() (v int64) {
	return p.UserId
}

func (p *User) GetUserName() (v string) {
	return p.UserName
}

func (p *User) GetEmail() (v string) {
	return p.Email
}

func (p *User) GetPassword() (v string) {
	return p.Password
}

func (p *User) GetSex() (v int64) {
	return p.Sex
}

func (p *User) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}

func (p *User) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *User) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *User) GetDeletedAt() (v string) {
	return p.DeletedAt
}
func (p *User) SetUserId(val int64) {
	p.UserId = val
}
func (p *User) SetUserName(val string) {
	p.UserName = val
}
func (p *User) SetEmail(val string) {
	p.Email = val
}
func (p *User) SetPassword(val string) {
	p.Password = val
}
func (p *User) SetSex(val int64) {
	p.Sex = val
}
func (p *User) SetAvatarUrl(val string) {
	p.AvatarUrl = val
}
func (p *User) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *User) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *User) SetDeletedAt(val string) {
	p.DeletedAt = val
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1: "user_id",
	2: "user_name",
	3: "email",
	4: "password",
	5: "sex",
	6: "avatar_url",
	7: "created_at",
	8: "updated_at",
	9: "deleted_at",
}

type UserLite struct {
	Uid       int64  `thrift:"uid,1" frugal:"1,default,i64" json:"uid"`
	UserName  string `thrift:"user_name,2" frugal:"2,default,string" json:"user_name"`
	AvatarUrl string `thrift:"avatar_url,3" frugal:"3,default,string" json:"avatar_url"`
}

func NewUserLite() *UserLite {
	return &UserLite{}
}

func (p *UserLite) InitDefault() {
}

func (p *UserLite) GetUid() (v int64) {
	return p.Uid
}

func (p *UserLite) GetUserName() (v string) {
	return p.UserName
}

func (p *UserLite) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}
func (p *UserLite) SetUid(val int64) {
	p.Uid = val
}
func (p *UserLite) SetUserName(val string) {
	p.UserName = val
}
func (p *UserLite) SetAvatarUrl(val string) {
	p.AvatarUrl = val
}

func (p *UserLite) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLite(%+v)", *p)
}

var fieldIDToName_UserLite = map[int16]string{
	1: "uid",
	2: "user_name",
	3: "avatar_url",
}

type Video struct {
	VideoId        int64  `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	UserId         int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	VideoUrl       string `thrift:"video_url,3" frugal:"3,default,string" json:"video_url"`
	CoverUrl       string `thrift:"cover_url,4" frugal:"4,default,string" json:"cover_url"`
	Title          string `thrift:"title,5" frugal:"5,default,string" json:"title"`
	Description    string `thrift:"description,6" frugal:"6,default,string" json:"description"`
	VisitCount     int64  `thrift:"visit_count,7" frugal:"7,default,i64" json:"visit_count"`
	LikesCount     int64  `thrift:"likes_count,8" frugal:"8,default,i64" json:"likes_count"`
	CommentCount   int64  `thrift:"comment_count,9" frugal:"9,default,i64" json:"comment_count"`
	CreatedAt      string `thrift:"created_at,10" frugal:"10,default,string" json:"created_at"`
	UpdatedAt      string `thrift:"updated_at,11" frugal:"11,default,string" json:"updated_at"`
	DeletedAt      string `thrift:"deleted_at,12" frugal:"12,default,string" json:"deleted_at"`
	Open           int64  `thrift:"open,13" frugal:"13,default,i64" json:"open"`
	AuditStatus    int64  `thrift:"audit_status,14" frugal:"14,default,i64" json:"audit_status"`
	ShareCount     string `thrift:"share_count,15" frugal:"15,default,string" json:"share_count"`
	LabelNames     string `thrift:"label_names,16" frugal:"16,default,string" json:"label_names"`
	FavoritesCount string `thrift:"favorites_count,17" frugal:"17,default,string" json:"favorites_count"`
	HistoryCount   string `thrift:"history_count,18" frugal:"18,default,string" json:"history_count"`
	Category       string `thrift:"category,19" frugal:"19,default,string" json:"category"`
}

func NewVideo() *Video {
	return &Video{}
}

func (p *Video) InitDefault() {
}

func (p *Video) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *Video) GetUserId() (v int64) {
	return p.UserId
}

func (p *Video) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *Video) GetCoverUrl() (v string) {
	return p.CoverUrl
}

func (p *Video) GetTitle() (v string) {
	return p.Title
}

func (p *Video) GetDescription() (v string) {
	return p.Description
}

func (p *Video) GetVisitCount() (v int64) {
	return p.VisitCount
}

func (p *Video) GetLikesCount() (v int64) {
	return p.LikesCount
}

func (p *Video) GetCommentCount() (v int64) {
	return p.CommentCount
}

func (p *Video) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Video) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *Video) GetDeletedAt() (v string) {
	return p.DeletedAt
}

func (p *Video) GetOpen() (v int64) {
	return p.Open
}

func (p *Video) GetAuditStatus() (v int64) {
	return p.AuditStatus
}

func (p *Video) GetShareCount() (v string) {
	return p.ShareCount
}

func (p *Video) GetLabelNames() (v string) {
	return p.LabelNames
}

func (p *Video) GetFavoritesCount() (v string) {
	return p.FavoritesCount
}

func (p *Video) GetHistoryCount() (v string) {
	return p.HistoryCount
}

func (p *Video) GetCategory() (v string) {
	return p.Category
}
func (p *Video) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *Video) SetUserId(val int64) {
	p.UserId = val
}
func (p *Video) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *Video) SetCoverUrl(val string) {
	p.CoverUrl = val
}
func (p *Video) SetTitle(val string) {
	p.Title = val
}
func (p *Video) SetDescription(val string) {
	p.Description = val
}
func (p *Video) SetVisitCount(val int64) {
	p.VisitCount = val
}
func (p *Video) SetLikesCount(val int64) {
	p.LikesCount = val
}
func (p *Video) SetCommentCount(val int64) {
	p.CommentCount = val
}
func (p *Video) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Video) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *Video) SetDeletedAt(val string) {
	p.DeletedAt = val
}
func (p *Video) SetOpen(val int64) {
	p.Open = val
}
func (p *Video) SetAuditStatus(val int64) {
	p.AuditStatus = val
}
func (p *Video) SetShareCount(val string) {
	p.ShareCount = val
}
func (p *Video) SetLabelNames(val string) {
	p.LabelNames = val
}
func (p *Video) SetFavoritesCount(val string) {
	p.FavoritesCount = val
}
func (p *Video) SetHistoryCount(val string) {
	p.HistoryCount = val
}
func (p *Video) SetCategory(val string) {
	p.Category = val
}

func (p *Video) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Video(%+v)", *p)
}

var fieldIDToName_Video = map[int16]string{
	1:  "video_id",
	2:  "user_id",
	3:  "video_url",
	4:  "cover_url",
	5:  "title",
	6:  "description",
	7:  "visit_count",
	8:  "likes_count",
	9:  "comment_count",
	10: "created_at",
	11: "updated_at",
	12: "deleted_at",
	13: "open",
	14: "audit_status",
	15: "share_count",
	16: "label_names",
	17: "favorites_count",
	18: "history_count",
	19: "category",
}

type Comment struct {
	CommentId        int64  `thrift:"comment_id,1" frugal:"1,default,i64" json:"comment_id"`
	UserId           int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	VideoId          int64  `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
	ParentId         int64  `thrift:"parent_id,4" frugal:"4,default,i64" json:"parent_id"`
	LikeCount        int64  `thrift:"like_count,5" frugal:"5,default,i64" json:"like_count"`
	ChildCount       int64  `thrift:"child_count,6" frugal:"6,default,i64" json:"child_count"`
	Content          string `thrift:"content,7" frugal:"7,default,string" json:"content"`
	CreatedAt        string `thrift:"created_at,8" frugal:"8,default,string" json:"created_at"`
	UpdatedAt        string `thrift:"updated_at,9" frugal:"9,default,string" json:"updated_at"`
	DeletedAt        string `thrift:"deleted_at,10" frugal:"10,default,string" json:"deleted_at"`
	ReplyToCommentId int64  `thrift:"reply_to_comment_id,11" frugal:"11,default,i64" json:"reply_to_comment_id"`
}

func NewComment() *Comment {
	return &Comment{}
}

func (p *Comment) InitDefault() {
}

func (p *Comment) GetCommentId() (v int64) {
	return p.CommentId
}

func (p *Comment) GetUserId() (v int64) {
	return p.UserId
}

func (p *Comment) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *Comment) GetParentId() (v int64) {
	return p.ParentId
}

func (p *Comment) GetLikeCount() (v int64) {
	return p.LikeCount
}

func (p *Comment) GetChildCount() (v int64) {
	return p.ChildCount
}

func (p *Comment) GetContent() (v string) {
	return p.Content
}

func (p *Comment) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Comment) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *Comment) GetDeletedAt() (v string) {
	return p.DeletedAt
}

func (p *Comment) GetReplyToCommentId() (v int64) {
	return p.ReplyToCommentId
}
func (p *Comment) SetCommentId(val int64) {
	p.CommentId = val
}
func (p *Comment) SetUserId(val int64) {
	p.UserId = val
}
func (p *Comment) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *Comment) SetParentId(val int64) {
	p.ParentId = val
}
func (p *Comment) SetLikeCount(val int64) {
	p.LikeCount = val
}
func (p *Comment) SetChildCount(val int64) {
	p.ChildCount = val
}
func (p *Comment) SetContent(val string) {
	p.Content = val
}
func (p *Comment) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Comment) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *Comment) SetDeletedAt(val string) {
	p.DeletedAt = val
}
func (p *Comment) SetReplyToCommentId(val int64) {
	p.ReplyToCommentId = val
}

func (p *Comment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Comment(%+v)", *p)
}

var fieldIDToName_Comment = map[int16]string{
	1:  "comment_id",
	2:  "user_id",
	3:  "video_id",
	4:  "parent_id",
	5:  "like_count",
	6:  "child_count",
	7:  "content",
	8:  "created_at",
	9:  "updated_at",
	10: "deleted_at",
	11: "reply_to_comment_id",
}

type Favorite struct {
	FavoriteId  int64  `thrift:"favorite_id,1" frugal:"1,default,i64" json:"favorite_id"`
	UserId      int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	Name        string `thrift:"name,3" frugal:"3,default,string" json:"name"`
	Description string `thrift:"description,4" frugal:"4,default,string" json:"description"`
	CoverUrl    string `thrift:"cover_url,5" frugal:"5,default,string" json:"cover_url"`
	CreatedAt   string `thrift:"created_at,6" frugal:"6,default,string" json:"created_at"`
	DeletedAt   string `thrift:"deleted_at,7" frugal:"7,default,string" json:"deleted_at"`
}

func NewFavorite() *Favorite {
	return &Favorite{}
}

func (p *Favorite) InitDefault() {
}

func (p *Favorite) GetFavoriteId() (v int64) {
	return p.FavoriteId
}

func (p *Favorite) GetUserId() (v int64) {
	return p.UserId
}

func (p *Favorite) GetName() (v string) {
	return p.Name
}

func (p *Favorite) GetDescription() (v string) {
	return p.Description
}

func (p *Favorite) GetCoverUrl() (v string) {
	return p.CoverUrl
}

func (p *Favorite) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Favorite) GetDeletedAt() (v string) {
	return p.DeletedAt
}
func (p *Favorite) SetFavoriteId(val int64) {
	p.FavoriteId = val
}
func (p *Favorite) SetUserId(val int64) {
	p.UserId = val
}
func (p *Favorite) SetName(val string) {
	p.Name = val
}
func (p *Favorite) SetDescription(val string) {
	p.Description = val
}
func (p *Favorite) SetCoverUrl(val string) {
	p.CoverUrl = val
}
func (p *Favorite) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Favorite) SetDeletedAt(val string) {
	p.DeletedAt = val
}

func (p *Favorite) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Favorite(%+v)", *p)
}

var fieldIDToName_Favorite = map[int16]string{
	1: "favorite_id",
	2: "user_id",
	3: "name",
	4: "description",
	5: "cover_url",
	6: "created_at",
	7: "deleted_at",
}

type Recomendation struct {
	VideoId     int64  `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	Title       string `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Description string `thrift:"description,3" frugal:"3,default,string" json:"description"`
	LabelNames  string `thrift:"label_names,4" frugal:"4,default,string" json:"label_names"`
	Category    string `thrift:"category,5" frugal:"5,default,string" json:"category"`
}

func NewRecomendation() *Recomendation {
	return &Recomendation{}
}

func (p *Recomendation) InitDefault() {
}

func (p *Recomendation) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *Recomendation) GetTitle() (v string) {
	return p.Title
}

func (p *Recomendation) GetDescription() (v string) {
	return p.Description
}

func (p *Recomendation) GetLabelNames() (v string) {
	return p.LabelNames
}

func (p *Recomendation) GetCategory() (v string) {
	return p.Category
}
func (p *Recomendation) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *Recomendation) SetTitle(val string) {
	p.Title = val
}
func (p *Recomendation) SetDescription(val string) {
	p.Description = val
}
func (p *Recomendation) SetLabelNames(val string) {
	p.LabelNames = val
}
func (p *Recomendation) SetCategory(val string) {
	p.Category = val
}

func (p *Recomendation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Recomendation(%+v)", *p)
}

var fieldIDToName_Recomendation = map[int16]string{
	1: "video_id",
	2: "title",
	3: "description",
	4: "label_names",
	5: "category",
}
