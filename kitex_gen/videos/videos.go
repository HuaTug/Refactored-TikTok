// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package videos

import (
	"HuaTug.com/kitex_gen/base"
	"context"
	"fmt"
)

type VideoResolution struct {
	Width  int32 `thrift:"width,1" frugal:"1,default,i32" json:"width"`
	Height int32 `thrift:"height,2" frugal:"2,default,i32" json:"height"`
}

func NewVideoResolution() *VideoResolution {
	return &VideoResolution{}
}

func (p *VideoResolution) InitDefault() {
}

func (p *VideoResolution) GetWidth() (v int32) {
	return p.Width
}

func (p *VideoResolution) GetHeight() (v int32) {
	return p.Height
}
func (p *VideoResolution) SetWidth(val int32) {
	p.Width = val
}
func (p *VideoResolution) SetHeight(val int32) {
	p.Height = val
}

func (p *VideoResolution) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoResolution(%+v)", *p)
}

var fieldIDToName_VideoResolution = map[int16]string{
	1: "width",
	2: "height",
}

type UserStorageQuota struct {
	TotalQuotaBytes   int64  `thrift:"total_quota_bytes,1" frugal:"1,default,i64" json:"total_quota_bytes"`
	UsedQuotaBytes    int64  `thrift:"used_quota_bytes,2" frugal:"2,default,i64" json:"used_quota_bytes"`
	VideoCount        int64  `thrift:"video_count,3" frugal:"3,default,i64" json:"video_count"`
	QuotaLevel        string `thrift:"quota_level,4" frugal:"4,default,string" json:"quota_level"`
	MaxVideoSizeBytes int64  `thrift:"max_video_size_bytes,5" frugal:"5,default,i64" json:"max_video_size_bytes"`
	MaxVideoCount     int32  `thrift:"max_video_count,6" frugal:"6,default,i32" json:"max_video_count"`
}

func NewUserStorageQuota() *UserStorageQuota {
	return &UserStorageQuota{}
}

func (p *UserStorageQuota) InitDefault() {
}

func (p *UserStorageQuota) GetTotalQuotaBytes() (v int64) {
	return p.TotalQuotaBytes
}

func (p *UserStorageQuota) GetUsedQuotaBytes() (v int64) {
	return p.UsedQuotaBytes
}

func (p *UserStorageQuota) GetVideoCount() (v int64) {
	return p.VideoCount
}

func (p *UserStorageQuota) GetQuotaLevel() (v string) {
	return p.QuotaLevel
}

func (p *UserStorageQuota) GetMaxVideoSizeBytes() (v int64) {
	return p.MaxVideoSizeBytes
}

func (p *UserStorageQuota) GetMaxVideoCount() (v int32) {
	return p.MaxVideoCount
}
func (p *UserStorageQuota) SetTotalQuotaBytes(val int64) {
	p.TotalQuotaBytes = val
}
func (p *UserStorageQuota) SetUsedQuotaBytes(val int64) {
	p.UsedQuotaBytes = val
}
func (p *UserStorageQuota) SetVideoCount(val int64) {
	p.VideoCount = val
}
func (p *UserStorageQuota) SetQuotaLevel(val string) {
	p.QuotaLevel = val
}
func (p *UserStorageQuota) SetMaxVideoSizeBytes(val int64) {
	p.MaxVideoSizeBytes = val
}
func (p *UserStorageQuota) SetMaxVideoCount(val int32) {
	p.MaxVideoCount = val
}

func (p *UserStorageQuota) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserStorageQuota(%+v)", *p)
}

var fieldIDToName_UserStorageQuota = map[int16]string{
	1: "total_quota_bytes",
	2: "used_quota_bytes",
	3: "video_count",
	4: "quota_level",
	5: "max_video_size_bytes",
	6: "max_video_count",
}

type VideoPublishStartRequestV2 struct {
	UserId              int64            `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Title               string           `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Description         string           `thrift:"description,3" frugal:"3,default,string" json:"description"`
	Tags                []string         `thrift:"tags,4" frugal:"4,default,list<string>" json:"tags"`
	Category            string           `thrift:"category,5" frugal:"5,default,string" json:"category"`
	Privacy             string           `thrift:"privacy,6" frugal:"6,default,string" json:"privacy"`
	TotalFileSize       int64            `thrift:"total_file_size,7" frugal:"7,default,i64" json:"total_file_size"`
	EstimatedDuration   int64            `thrift:"estimated_duration,8" frugal:"8,default,i64" json:"estimated_duration"`
	EstimatedResolution *VideoResolution `thrift:"estimated_resolution,9" frugal:"9,default,VideoResolution" json:"estimated_resolution"`
	ChunkTotalNumber    int32            `thrift:"chunk_total_number,10" frugal:"10,default,i32" json:"chunk_total_number"`
	ChunkSize           int64            `thrift:"chunk_size,11" frugal:"11,default,i64" json:"chunk_size"`
	OriginalFilename    string           `thrift:"original_filename,12" frugal:"12,default,string" json:"original_filename"`
	ContentType         string           `thrift:"content_type,13" frugal:"13,default,string" json:"content_type"`
	UploadSessionExpire string           `thrift:"upload_session_expire,14" frugal:"14,default,string" json:"upload_session_expire"`
}

func NewVideoPublishStartRequestV2() *VideoPublishStartRequestV2 {
	return &VideoPublishStartRequestV2{}
}

func (p *VideoPublishStartRequestV2) InitDefault() {
}

func (p *VideoPublishStartRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishStartRequestV2) GetTitle() (v string) {
	return p.Title
}

func (p *VideoPublishStartRequestV2) GetDescription() (v string) {
	return p.Description
}

func (p *VideoPublishStartRequestV2) GetTags() (v []string) {
	return p.Tags
}

func (p *VideoPublishStartRequestV2) GetCategory() (v string) {
	return p.Category
}

func (p *VideoPublishStartRequestV2) GetPrivacy() (v string) {
	return p.Privacy
}

func (p *VideoPublishStartRequestV2) GetTotalFileSize() (v int64) {
	return p.TotalFileSize
}

func (p *VideoPublishStartRequestV2) GetEstimatedDuration() (v int64) {
	return p.EstimatedDuration
}

var VideoPublishStartRequestV2_EstimatedResolution_DEFAULT *VideoResolution

func (p *VideoPublishStartRequestV2) GetEstimatedResolution() (v *VideoResolution) {
	if !p.IsSetEstimatedResolution() {
		return VideoPublishStartRequestV2_EstimatedResolution_DEFAULT
	}
	return p.EstimatedResolution
}

func (p *VideoPublishStartRequestV2) GetChunkTotalNumber() (v int32) {
	return p.ChunkTotalNumber
}

func (p *VideoPublishStartRequestV2) GetChunkSize() (v int64) {
	return p.ChunkSize
}

func (p *VideoPublishStartRequestV2) GetOriginalFilename() (v string) {
	return p.OriginalFilename
}

func (p *VideoPublishStartRequestV2) GetContentType() (v string) {
	return p.ContentType
}

func (p *VideoPublishStartRequestV2) GetUploadSessionExpire() (v string) {
	return p.UploadSessionExpire
}
func (p *VideoPublishStartRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishStartRequestV2) SetTitle(val string) {
	p.Title = val
}
func (p *VideoPublishStartRequestV2) SetDescription(val string) {
	p.Description = val
}
func (p *VideoPublishStartRequestV2) SetTags(val []string) {
	p.Tags = val
}
func (p *VideoPublishStartRequestV2) SetCategory(val string) {
	p.Category = val
}
func (p *VideoPublishStartRequestV2) SetPrivacy(val string) {
	p.Privacy = val
}
func (p *VideoPublishStartRequestV2) SetTotalFileSize(val int64) {
	p.TotalFileSize = val
}
func (p *VideoPublishStartRequestV2) SetEstimatedDuration(val int64) {
	p.EstimatedDuration = val
}
func (p *VideoPublishStartRequestV2) SetEstimatedResolution(val *VideoResolution) {
	p.EstimatedResolution = val
}
func (p *VideoPublishStartRequestV2) SetChunkTotalNumber(val int32) {
	p.ChunkTotalNumber = val
}
func (p *VideoPublishStartRequestV2) SetChunkSize(val int64) {
	p.ChunkSize = val
}
func (p *VideoPublishStartRequestV2) SetOriginalFilename(val string) {
	p.OriginalFilename = val
}
func (p *VideoPublishStartRequestV2) SetContentType(val string) {
	p.ContentType = val
}
func (p *VideoPublishStartRequestV2) SetUploadSessionExpire(val string) {
	p.UploadSessionExpire = val
}

func (p *VideoPublishStartRequestV2) IsSetEstimatedResolution() bool {
	return p.EstimatedResolution != nil
}

func (p *VideoPublishStartRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishStartRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishStartRequestV2 = map[int16]string{
	1:  "user_id",
	2:  "title",
	3:  "description",
	4:  "tags",
	5:  "category",
	6:  "privacy",
	7:  "total_file_size",
	8:  "estimated_duration",
	9:  "estimated_resolution",
	10: "chunk_total_number",
	11: "chunk_size",
	12: "original_filename",
	13: "content_type",
	14: "upload_session_expire",
}

type VideoPublishStartResponseV2 struct {
	Base              *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	UploadSessionUuid string            `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
	VideoId           int64             `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
	UserQuota         *UserStorageQuota `thrift:"user_quota,4" frugal:"4,default,UserStorageQuota" json:"user_quota"`
	TempUploadPath    string            `thrift:"temp_upload_path,5" frugal:"5,default,string" json:"temp_upload_path"`
	SessionExpiresAt  int64             `thrift:"session_expires_at,6" frugal:"6,default,i64" json:"session_expires_at"`
	PresignedUrls     []string          `thrift:"presigned_urls,7" frugal:"7,default,list<string>" json:"presigned_urls"`
}

func NewVideoPublishStartResponseV2() *VideoPublishStartResponseV2 {
	return &VideoPublishStartResponseV2{}
}

func (p *VideoPublishStartResponseV2) InitDefault() {
}

var VideoPublishStartResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishStartResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishStartResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishStartResponseV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}

func (p *VideoPublishStartResponseV2) GetVideoId() (v int64) {
	return p.VideoId
}

var VideoPublishStartResponseV2_UserQuota_DEFAULT *UserStorageQuota

func (p *VideoPublishStartResponseV2) GetUserQuota() (v *UserStorageQuota) {
	if !p.IsSetUserQuota() {
		return VideoPublishStartResponseV2_UserQuota_DEFAULT
	}
	return p.UserQuota
}

func (p *VideoPublishStartResponseV2) GetTempUploadPath() (v string) {
	return p.TempUploadPath
}

func (p *VideoPublishStartResponseV2) GetSessionExpiresAt() (v int64) {
	return p.SessionExpiresAt
}

func (p *VideoPublishStartResponseV2) GetPresignedUrls() (v []string) {
	return p.PresignedUrls
}
func (p *VideoPublishStartResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishStartResponseV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}
func (p *VideoPublishStartResponseV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoPublishStartResponseV2) SetUserQuota(val *UserStorageQuota) {
	p.UserQuota = val
}
func (p *VideoPublishStartResponseV2) SetTempUploadPath(val string) {
	p.TempUploadPath = val
}
func (p *VideoPublishStartResponseV2) SetSessionExpiresAt(val int64) {
	p.SessionExpiresAt = val
}
func (p *VideoPublishStartResponseV2) SetPresignedUrls(val []string) {
	p.PresignedUrls = val
}

func (p *VideoPublishStartResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishStartResponseV2) IsSetUserQuota() bool {
	return p.UserQuota != nil
}

func (p *VideoPublishStartResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishStartResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishStartResponseV2 = map[int16]string{
	1: "base",
	2: "upload_session_uuid",
	3: "video_id",
	4: "user_quota",
	5: "temp_upload_path",
	6: "session_expires_at",
	7: "presigned_urls",
}

type VideoPublishUploadingRequestV2 struct {
	UserId               int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	UploadSessionUuid    string `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
	ChunkNumber          int32  `thrift:"chunk_number,3" frugal:"3,default,i32" json:"chunk_number"`
	ChunkPresignedUrl    string `thrift:"chunk_presigned_url,4" frugal:"4,default,string" json:"chunk_presigned_url"`
	ChunkData            []byte `thrift:"chunk_data,5" frugal:"5,default,binary" json:"chunk_data"`
	ChunkMd5             string `thrift:"chunk_md5,6" frugal:"6,default,string" json:"chunk_md5"`
	ChunkSize            int64  `thrift:"chunk_size,7" frugal:"7,default,i64" json:"chunk_size"`
	ChunkOffset          int64  `thrift:"chunk_offset,8" frugal:"8,default,i64" json:"chunk_offset"`
	IsCompressed         bool   `thrift:"is_compressed,9" frugal:"9,default,bool" json:"is_compressed"`
	CompressionAlgorithm string `thrift:"compression_algorithm,10" frugal:"10,default,string" json:"compression_algorithm"`
}

func NewVideoPublishUploadingRequestV2() *VideoPublishUploadingRequestV2 {
	return &VideoPublishUploadingRequestV2{}
}

func (p *VideoPublishUploadingRequestV2) InitDefault() {
}

func (p *VideoPublishUploadingRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishUploadingRequestV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}

func (p *VideoPublishUploadingRequestV2) GetChunkNumber() (v int32) {
	return p.ChunkNumber
}

func (p *VideoPublishUploadingRequestV2) GetChunkPresignedUrl() (v string) {
	return p.ChunkPresignedUrl
}

func (p *VideoPublishUploadingRequestV2) GetChunkData() (v []byte) {
	return p.ChunkData
}

func (p *VideoPublishUploadingRequestV2) GetChunkMd5() (v string) {
	return p.ChunkMd5
}

func (p *VideoPublishUploadingRequestV2) GetChunkSize() (v int64) {
	return p.ChunkSize
}

func (p *VideoPublishUploadingRequestV2) GetChunkOffset() (v int64) {
	return p.ChunkOffset
}

func (p *VideoPublishUploadingRequestV2) GetIsCompressed() (v bool) {
	return p.IsCompressed
}

func (p *VideoPublishUploadingRequestV2) GetCompressionAlgorithm() (v string) {
	return p.CompressionAlgorithm
}
func (p *VideoPublishUploadingRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishUploadingRequestV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkNumber(val int32) {
	p.ChunkNumber = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkPresignedUrl(val string) {
	p.ChunkPresignedUrl = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkData(val []byte) {
	p.ChunkData = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkMd5(val string) {
	p.ChunkMd5 = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkSize(val int64) {
	p.ChunkSize = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkOffset(val int64) {
	p.ChunkOffset = val
}
func (p *VideoPublishUploadingRequestV2) SetIsCompressed(val bool) {
	p.IsCompressed = val
}
func (p *VideoPublishUploadingRequestV2) SetCompressionAlgorithm(val string) {
	p.CompressionAlgorithm = val
}

func (p *VideoPublishUploadingRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishUploadingRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishUploadingRequestV2 = map[int16]string{
	1:  "user_id",
	2:  "upload_session_uuid",
	3:  "chunk_number",
	4:  "chunk_presigned_url",
	5:  "chunk_data",
	6:  "chunk_md5",
	7:  "chunk_size",
	8:  "chunk_offset",
	9:  "is_compressed",
	10: "compression_algorithm",
}

type VideoPublishUploadingResponseV2 struct {
	Base                  *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	UploadedChunkNumber   int32        `thrift:"uploaded_chunk_number,2" frugal:"2,default,i32" json:"uploaded_chunk_number"`
	ChunkUploadStatus     string       `thrift:"chunk_upload_status,3" frugal:"3,default,string" json:"chunk_upload_status"`
	UploadProgressPercent float64      `thrift:"upload_progress_percent,4" frugal:"4,default,double" json:"upload_progress_percent"`
	NextChunkOffset       int64        `thrift:"next_chunk_offset,5" frugal:"5,default,i64" json:"next_chunk_offset"`
	UploadSpeedMbps       string       `thrift:"upload_speed_mbps,6" frugal:"6,default,string" json:"upload_speed_mbps"`
}

func NewVideoPublishUploadingResponseV2() *VideoPublishUploadingResponseV2 {
	return &VideoPublishUploadingResponseV2{}
}

func (p *VideoPublishUploadingResponseV2) InitDefault() {
}

var VideoPublishUploadingResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishUploadingResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishUploadingResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishUploadingResponseV2) GetUploadedChunkNumber() (v int32) {
	return p.UploadedChunkNumber
}

func (p *VideoPublishUploadingResponseV2) GetChunkUploadStatus() (v string) {
	return p.ChunkUploadStatus
}

func (p *VideoPublishUploadingResponseV2) GetUploadProgressPercent() (v float64) {
	return p.UploadProgressPercent
}

func (p *VideoPublishUploadingResponseV2) GetNextChunkOffset() (v int64) {
	return p.NextChunkOffset
}

func (p *VideoPublishUploadingResponseV2) GetUploadSpeedMbps() (v string) {
	return p.UploadSpeedMbps
}
func (p *VideoPublishUploadingResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishUploadingResponseV2) SetUploadedChunkNumber(val int32) {
	p.UploadedChunkNumber = val
}
func (p *VideoPublishUploadingResponseV2) SetChunkUploadStatus(val string) {
	p.ChunkUploadStatus = val
}
func (p *VideoPublishUploadingResponseV2) SetUploadProgressPercent(val float64) {
	p.UploadProgressPercent = val
}
func (p *VideoPublishUploadingResponseV2) SetNextChunkOffset(val int64) {
	p.NextChunkOffset = val
}
func (p *VideoPublishUploadingResponseV2) SetUploadSpeedMbps(val string) {
	p.UploadSpeedMbps = val
}

func (p *VideoPublishUploadingResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishUploadingResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishUploadingResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishUploadingResponseV2 = map[int16]string{
	1: "base",
	2: "uploaded_chunk_number",
	3: "chunk_upload_status",
	4: "upload_progress_percent",
	5: "next_chunk_offset",
	6: "upload_speed_mbps",
}

type VideoPublishCompleteRequestV2 struct {
	UserId                int64             `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	UploadSessionUuid     string            `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
	FinalFileMd5          string            `thrift:"final_file_md5,3" frugal:"3,default,string" json:"final_file_md5"`
	FinalFileSize         int64             `thrift:"final_file_size,4" frugal:"4,default,i64" json:"final_file_size"`
	EnableTranscoding     bool              `thrift:"enable_transcoding,5" frugal:"5,default,bool" json:"enable_transcoding"`
	TargetResolutions     []int32           `thrift:"target_resolutions,6" frugal:"6,default,list<i32>" json:"target_resolutions"`
	GenerateThumbnails    bool              `thrift:"generate_thumbnails,7" frugal:"7,default,bool" json:"generate_thumbnails"`
	GenerateAnimatedCover bool              `thrift:"generate_animated_cover,8" frugal:"8,default,bool" json:"generate_animated_cover"`
	CustomMetadata        map[string]string `thrift:"custom_metadata,9" frugal:"9,default,map<string:string>" json:"custom_metadata"`
}

func NewVideoPublishCompleteRequestV2() *VideoPublishCompleteRequestV2 {
	return &VideoPublishCompleteRequestV2{}
}

func (p *VideoPublishCompleteRequestV2) InitDefault() {
}

func (p *VideoPublishCompleteRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishCompleteRequestV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}

func (p *VideoPublishCompleteRequestV2) GetFinalFileMd5() (v string) {
	return p.FinalFileMd5
}

func (p *VideoPublishCompleteRequestV2) GetFinalFileSize() (v int64) {
	return p.FinalFileSize
}

func (p *VideoPublishCompleteRequestV2) GetEnableTranscoding() (v bool) {
	return p.EnableTranscoding
}

func (p *VideoPublishCompleteRequestV2) GetTargetResolutions() (v []int32) {
	return p.TargetResolutions
}

func (p *VideoPublishCompleteRequestV2) GetGenerateThumbnails() (v bool) {
	return p.GenerateThumbnails
}

func (p *VideoPublishCompleteRequestV2) GetGenerateAnimatedCover() (v bool) {
	return p.GenerateAnimatedCover
}

func (p *VideoPublishCompleteRequestV2) GetCustomMetadata() (v map[string]string) {
	return p.CustomMetadata
}
func (p *VideoPublishCompleteRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishCompleteRequestV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}
func (p *VideoPublishCompleteRequestV2) SetFinalFileMd5(val string) {
	p.FinalFileMd5 = val
}
func (p *VideoPublishCompleteRequestV2) SetFinalFileSize(val int64) {
	p.FinalFileSize = val
}
func (p *VideoPublishCompleteRequestV2) SetEnableTranscoding(val bool) {
	p.EnableTranscoding = val
}
func (p *VideoPublishCompleteRequestV2) SetTargetResolutions(val []int32) {
	p.TargetResolutions = val
}
func (p *VideoPublishCompleteRequestV2) SetGenerateThumbnails(val bool) {
	p.GenerateThumbnails = val
}
func (p *VideoPublishCompleteRequestV2) SetGenerateAnimatedCover(val bool) {
	p.GenerateAnimatedCover = val
}
func (p *VideoPublishCompleteRequestV2) SetCustomMetadata(val map[string]string) {
	p.CustomMetadata = val
}

func (p *VideoPublishCompleteRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCompleteRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishCompleteRequestV2 = map[int16]string{
	1: "user_id",
	2: "upload_session_uuid",
	3: "final_file_md5",
	4: "final_file_size",
	5: "enable_transcoding",
	6: "target_resolutions",
	7: "generate_thumbnails",
	8: "generate_animated_cover",
	9: "custom_metadata",
}

type VideoPublishCompleteResponseV2 struct {
	Base               *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoId            int64             `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	VideoSourceUrl     string            `thrift:"video_source_url,3" frugal:"3,default,string" json:"video_source_url"`
	ProcessedVideoUrls map[int32]string  `thrift:"processed_video_urls,4" frugal:"4,default,map<i32:string>" json:"processed_video_urls"`
	ThumbnailUrls      map[string]string `thrift:"thumbnail_urls,5" frugal:"5,default,map<string:string>" json:"thumbnail_urls"`
	AnimatedCoverUrl   string            `thrift:"animated_cover_url,6" frugal:"6,default,string" json:"animated_cover_url"`
	MetadataUrl        string            `thrift:"metadata_url,7" frugal:"7,default,string" json:"metadata_url"`
	ProcessingStatus   string            `thrift:"processing_status,8" frugal:"8,default,string" json:"processing_status"`
	ProcessingJobId    int64             `thrift:"processing_job_id,9" frugal:"9,default,i64" json:"processing_job_id"`
	UpdatedQuota       *UserStorageQuota `thrift:"updated_quota,10" frugal:"10,default,UserStorageQuota" json:"updated_quota"`
}

func NewVideoPublishCompleteResponseV2() *VideoPublishCompleteResponseV2 {
	return &VideoPublishCompleteResponseV2{}
}

func (p *VideoPublishCompleteResponseV2) InitDefault() {
}

var VideoPublishCompleteResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishCompleteResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishCompleteResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishCompleteResponseV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoPublishCompleteResponseV2) GetVideoSourceUrl() (v string) {
	return p.VideoSourceUrl
}

func (p *VideoPublishCompleteResponseV2) GetProcessedVideoUrls() (v map[int32]string) {
	return p.ProcessedVideoUrls
}

func (p *VideoPublishCompleteResponseV2) GetThumbnailUrls() (v map[string]string) {
	return p.ThumbnailUrls
}

func (p *VideoPublishCompleteResponseV2) GetAnimatedCoverUrl() (v string) {
	return p.AnimatedCoverUrl
}

func (p *VideoPublishCompleteResponseV2) GetMetadataUrl() (v string) {
	return p.MetadataUrl
}

func (p *VideoPublishCompleteResponseV2) GetProcessingStatus() (v string) {
	return p.ProcessingStatus
}

func (p *VideoPublishCompleteResponseV2) GetProcessingJobId() (v int64) {
	return p.ProcessingJobId
}

var VideoPublishCompleteResponseV2_UpdatedQuota_DEFAULT *UserStorageQuota

func (p *VideoPublishCompleteResponseV2) GetUpdatedQuota() (v *UserStorageQuota) {
	if !p.IsSetUpdatedQuota() {
		return VideoPublishCompleteResponseV2_UpdatedQuota_DEFAULT
	}
	return p.UpdatedQuota
}
func (p *VideoPublishCompleteResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishCompleteResponseV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoPublishCompleteResponseV2) SetVideoSourceUrl(val string) {
	p.VideoSourceUrl = val
}
func (p *VideoPublishCompleteResponseV2) SetProcessedVideoUrls(val map[int32]string) {
	p.ProcessedVideoUrls = val
}
func (p *VideoPublishCompleteResponseV2) SetThumbnailUrls(val map[string]string) {
	p.ThumbnailUrls = val
}
func (p *VideoPublishCompleteResponseV2) SetAnimatedCoverUrl(val string) {
	p.AnimatedCoverUrl = val
}
func (p *VideoPublishCompleteResponseV2) SetMetadataUrl(val string) {
	p.MetadataUrl = val
}
func (p *VideoPublishCompleteResponseV2) SetProcessingStatus(val string) {
	p.ProcessingStatus = val
}
func (p *VideoPublishCompleteResponseV2) SetProcessingJobId(val int64) {
	p.ProcessingJobId = val
}
func (p *VideoPublishCompleteResponseV2) SetUpdatedQuota(val *UserStorageQuota) {
	p.UpdatedQuota = val
}

func (p *VideoPublishCompleteResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishCompleteResponseV2) IsSetUpdatedQuota() bool {
	return p.UpdatedQuota != nil
}

func (p *VideoPublishCompleteResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCompleteResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishCompleteResponseV2 = map[int16]string{
	1:  "base",
	2:  "video_id",
	3:  "video_source_url",
	4:  "processed_video_urls",
	5:  "thumbnail_urls",
	6:  "animated_cover_url",
	7:  "metadata_url",
	8:  "processing_status",
	9:  "processing_job_id",
	10: "updated_quota",
}

type VideoPublishCancelRequestV2 struct {
	UserId            int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	UploadSessionUuid string `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
	CancelReason      string `thrift:"cancel_reason,3" frugal:"3,default,string" json:"cancel_reason"`
}

func NewVideoPublishCancelRequestV2() *VideoPublishCancelRequestV2 {
	return &VideoPublishCancelRequestV2{}
}

func (p *VideoPublishCancelRequestV2) InitDefault() {
}

func (p *VideoPublishCancelRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishCancelRequestV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}

func (p *VideoPublishCancelRequestV2) GetCancelReason() (v string) {
	return p.CancelReason
}
func (p *VideoPublishCancelRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishCancelRequestV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}
func (p *VideoPublishCancelRequestV2) SetCancelReason(val string) {
	p.CancelReason = val
}

func (p *VideoPublishCancelRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCancelRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishCancelRequestV2 = map[int16]string{
	1: "user_id",
	2: "upload_session_uuid",
	3: "cancel_reason",
}

type VideoPublishCancelResponseV2 struct {
	Base                  *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	CleanupStatus         string            `thrift:"cleanup_status,2" frugal:"2,default,string" json:"cleanup_status"`
	StorageRecoveredBytes int64             `thrift:"storage_recovered_bytes,3" frugal:"3,default,i64" json:"storage_recovered_bytes"`
	UpdatedQuota          *UserStorageQuota `thrift:"updated_quota,4" frugal:"4,default,UserStorageQuota" json:"updated_quota"`
}

func NewVideoPublishCancelResponseV2() *VideoPublishCancelResponseV2 {
	return &VideoPublishCancelResponseV2{}
}

func (p *VideoPublishCancelResponseV2) InitDefault() {
}

var VideoPublishCancelResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishCancelResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishCancelResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishCancelResponseV2) GetCleanupStatus() (v string) {
	return p.CleanupStatus
}

func (p *VideoPublishCancelResponseV2) GetStorageRecoveredBytes() (v int64) {
	return p.StorageRecoveredBytes
}

var VideoPublishCancelResponseV2_UpdatedQuota_DEFAULT *UserStorageQuota

func (p *VideoPublishCancelResponseV2) GetUpdatedQuota() (v *UserStorageQuota) {
	if !p.IsSetUpdatedQuota() {
		return VideoPublishCancelResponseV2_UpdatedQuota_DEFAULT
	}
	return p.UpdatedQuota
}
func (p *VideoPublishCancelResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishCancelResponseV2) SetCleanupStatus(val string) {
	p.CleanupStatus = val
}
func (p *VideoPublishCancelResponseV2) SetStorageRecoveredBytes(val int64) {
	p.StorageRecoveredBytes = val
}
func (p *VideoPublishCancelResponseV2) SetUpdatedQuota(val *UserStorageQuota) {
	p.UpdatedQuota = val
}

func (p *VideoPublishCancelResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishCancelResponseV2) IsSetUpdatedQuota() bool {
	return p.UpdatedQuota != nil
}

func (p *VideoPublishCancelResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCancelResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishCancelResponseV2 = map[int16]string{
	1: "base",
	2: "cleanup_status",
	3: "storage_recovered_bytes",
	4: "updated_quota",
}

type VideoPublishProgressRequestV2 struct {
	UserId            int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	UploadSessionUuid string `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
}

func NewVideoPublishProgressRequestV2() *VideoPublishProgressRequestV2 {
	return &VideoPublishProgressRequestV2{}
}

func (p *VideoPublishProgressRequestV2) InitDefault() {
}

func (p *VideoPublishProgressRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishProgressRequestV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}
func (p *VideoPublishProgressRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishProgressRequestV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}

func (p *VideoPublishProgressRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishProgressRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishProgressRequestV2 = map[int16]string{
	1: "user_id",
	2: "upload_session_uuid",
}

type VideoPublishProgressResponseV2 struct {
	Base                      *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	SessionStatus             string       `thrift:"session_status,2" frugal:"2,default,string" json:"session_status"`
	TotalChunks               int32        `thrift:"total_chunks,3" frugal:"3,default,i32" json:"total_chunks"`
	UploadedChunks            int32        `thrift:"uploaded_chunks,4" frugal:"4,default,i32" json:"uploaded_chunks"`
	UploadProgressPercent     float64      `thrift:"upload_progress_percent,5" frugal:"5,default,double" json:"upload_progress_percent"`
	ProcessingProgressPercent float64      `thrift:"processing_progress_percent,6" frugal:"6,default,double" json:"processing_progress_percent"`
	UploadSpeedBytesPerSec    int64        `thrift:"upload_speed_bytes_per_sec,7" frugal:"7,default,i64" json:"upload_speed_bytes_per_sec"`
	EtaSeconds                int64        `thrift:"eta_seconds,8" frugal:"8,default,i64" json:"eta_seconds"`
	FailedChunks              []int32      `thrift:"failed_chunks,9" frugal:"9,default,list<i32>" json:"failed_chunks"`
	CurrentStage              string       `thrift:"current_stage,10" frugal:"10,default,string" json:"current_stage"`
}

func NewVideoPublishProgressResponseV2() *VideoPublishProgressResponseV2 {
	return &VideoPublishProgressResponseV2{}
}

func (p *VideoPublishProgressResponseV2) InitDefault() {
}

var VideoPublishProgressResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishProgressResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishProgressResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishProgressResponseV2) GetSessionStatus() (v string) {
	return p.SessionStatus
}

func (p *VideoPublishProgressResponseV2) GetTotalChunks() (v int32) {
	return p.TotalChunks
}

func (p *VideoPublishProgressResponseV2) GetUploadedChunks() (v int32) {
	return p.UploadedChunks
}

func (p *VideoPublishProgressResponseV2) GetUploadProgressPercent() (v float64) {
	return p.UploadProgressPercent
}

func (p *VideoPublishProgressResponseV2) GetProcessingProgressPercent() (v float64) {
	return p.ProcessingProgressPercent
}

func (p *VideoPublishProgressResponseV2) GetUploadSpeedBytesPerSec() (v int64) {
	return p.UploadSpeedBytesPerSec
}

func (p *VideoPublishProgressResponseV2) GetEtaSeconds() (v int64) {
	return p.EtaSeconds
}

func (p *VideoPublishProgressResponseV2) GetFailedChunks() (v []int32) {
	return p.FailedChunks
}

func (p *VideoPublishProgressResponseV2) GetCurrentStage() (v string) {
	return p.CurrentStage
}
func (p *VideoPublishProgressResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishProgressResponseV2) SetSessionStatus(val string) {
	p.SessionStatus = val
}
func (p *VideoPublishProgressResponseV2) SetTotalChunks(val int32) {
	p.TotalChunks = val
}
func (p *VideoPublishProgressResponseV2) SetUploadedChunks(val int32) {
	p.UploadedChunks = val
}
func (p *VideoPublishProgressResponseV2) SetUploadProgressPercent(val float64) {
	p.UploadProgressPercent = val
}
func (p *VideoPublishProgressResponseV2) SetProcessingProgressPercent(val float64) {
	p.ProcessingProgressPercent = val
}
func (p *VideoPublishProgressResponseV2) SetUploadSpeedBytesPerSec(val int64) {
	p.UploadSpeedBytesPerSec = val
}
func (p *VideoPublishProgressResponseV2) SetEtaSeconds(val int64) {
	p.EtaSeconds = val
}
func (p *VideoPublishProgressResponseV2) SetFailedChunks(val []int32) {
	p.FailedChunks = val
}
func (p *VideoPublishProgressResponseV2) SetCurrentStage(val string) {
	p.CurrentStage = val
}

func (p *VideoPublishProgressResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishProgressResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishProgressResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishProgressResponseV2 = map[int16]string{
	1:  "base",
	2:  "session_status",
	3:  "total_chunks",
	4:  "uploaded_chunks",
	5:  "upload_progress_percent",
	6:  "processing_progress_percent",
	7:  "upload_speed_bytes_per_sec",
	8:  "eta_seconds",
	9:  "failed_chunks",
	10: "current_stage",
}

type VideoPublishResumeRequestV2 struct {
	UserId            int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	UploadSessionUuid string `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
	LastChunkMd5      string `thrift:"last_chunk_md5,3" frugal:"3,default,string" json:"last_chunk_md5"`
}

func NewVideoPublishResumeRequestV2() *VideoPublishResumeRequestV2 {
	return &VideoPublishResumeRequestV2{}
}

func (p *VideoPublishResumeRequestV2) InitDefault() {
}

func (p *VideoPublishResumeRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishResumeRequestV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}

func (p *VideoPublishResumeRequestV2) GetLastChunkMd5() (v string) {
	return p.LastChunkMd5
}
func (p *VideoPublishResumeRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishResumeRequestV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}
func (p *VideoPublishResumeRequestV2) SetLastChunkMd5(val string) {
	p.LastChunkMd5 = val
}

func (p *VideoPublishResumeRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishResumeRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishResumeRequestV2 = map[int16]string{
	1: "user_id",
	2: "upload_session_uuid",
	3: "last_chunk_md5",
}

type VideoPublishResumeResponseV2 struct {
	Base                 *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	LastUploadedChunk    int32        `thrift:"last_uploaded_chunk,2" frugal:"2,default,i32" json:"last_uploaded_chunk"`
	MissingChunks        []int32      `thrift:"missing_chunks,3" frugal:"3,default,list<i32>" json:"missing_chunks"`
	SessionRemainingTime int64        `thrift:"session_remaining_time,4" frugal:"4,default,i64" json:"session_remaining_time"`
	CanResume            bool         `thrift:"can_resume,5" frugal:"5,default,bool" json:"can_resume"`
	ResumeStrategy       string       `thrift:"resume_strategy,6" frugal:"6,default,string" json:"resume_strategy"`
}

func NewVideoPublishResumeResponseV2() *VideoPublishResumeResponseV2 {
	return &VideoPublishResumeResponseV2{}
}

func (p *VideoPublishResumeResponseV2) InitDefault() {
}

var VideoPublishResumeResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishResumeResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishResumeResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishResumeResponseV2) GetLastUploadedChunk() (v int32) {
	return p.LastUploadedChunk
}

func (p *VideoPublishResumeResponseV2) GetMissingChunks() (v []int32) {
	return p.MissingChunks
}

func (p *VideoPublishResumeResponseV2) GetSessionRemainingTime() (v int64) {
	return p.SessionRemainingTime
}

func (p *VideoPublishResumeResponseV2) GetCanResume() (v bool) {
	return p.CanResume
}

func (p *VideoPublishResumeResponseV2) GetResumeStrategy() (v string) {
	return p.ResumeStrategy
}
func (p *VideoPublishResumeResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishResumeResponseV2) SetLastUploadedChunk(val int32) {
	p.LastUploadedChunk = val
}
func (p *VideoPublishResumeResponseV2) SetMissingChunks(val []int32) {
	p.MissingChunks = val
}
func (p *VideoPublishResumeResponseV2) SetSessionRemainingTime(val int64) {
	p.SessionRemainingTime = val
}
func (p *VideoPublishResumeResponseV2) SetCanResume(val bool) {
	p.CanResume = val
}
func (p *VideoPublishResumeResponseV2) SetResumeStrategy(val string) {
	p.ResumeStrategy = val
}

func (p *VideoPublishResumeResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishResumeResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishResumeResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishResumeResponseV2 = map[int16]string{
	1: "base",
	2: "last_uploaded_chunk",
	3: "missing_chunks",
	4: "session_remaining_time",
	5: "can_resume",
	6: "resume_strategy",
}

type VideoFeedListRequestV2 struct {
	UserId         int64    `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum        int64    `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize       int64    `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
	CategoryFilter string   `thrift:"category_filter,4" frugal:"4,default,string" json:"category_filter"`
	PrivacyFilter  string   `thrift:"privacy_filter,5" frugal:"5,default,string" json:"privacy_filter"`
	TagFilters     []string `thrift:"tag_filters,6" frugal:"6,default,list<string>" json:"tag_filters"`
}

func NewVideoFeedListRequestV2() *VideoFeedListRequestV2 {
	return &VideoFeedListRequestV2{}
}

func (p *VideoFeedListRequestV2) InitDefault() {
}

func (p *VideoFeedListRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoFeedListRequestV2) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoFeedListRequestV2) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *VideoFeedListRequestV2) GetCategoryFilter() (v string) {
	return p.CategoryFilter
}

func (p *VideoFeedListRequestV2) GetPrivacyFilter() (v string) {
	return p.PrivacyFilter
}

func (p *VideoFeedListRequestV2) GetTagFilters() (v []string) {
	return p.TagFilters
}
func (p *VideoFeedListRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoFeedListRequestV2) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoFeedListRequestV2) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *VideoFeedListRequestV2) SetCategoryFilter(val string) {
	p.CategoryFilter = val
}
func (p *VideoFeedListRequestV2) SetPrivacyFilter(val string) {
	p.PrivacyFilter = val
}
func (p *VideoFeedListRequestV2) SetTagFilters(val []string) {
	p.TagFilters = val
}

func (p *VideoFeedListRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoFeedListRequestV2(%+v)", *p)
}

var fieldIDToName_VideoFeedListRequestV2 = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
	4: "category_filter",
	5: "privacy_filter",
	6: "tag_filters",
}

type VideoFeedListResponseV2 struct {
	Base       *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoList  []*base.Video `thrift:"video_list,2" frugal:"2,default,list<base.Video>" json:"video_list"`
	Total      int64         `thrift:"total,3" frugal:"3,default,i64" json:"total"`
	HasMore    bool          `thrift:"has_more,4" frugal:"4,default,bool" json:"has_more"`
	NextCursor string        `thrift:"next_cursor,5" frugal:"5,default,string" json:"next_cursor"`
}

func NewVideoFeedListResponseV2() *VideoFeedListResponseV2 {
	return &VideoFeedListResponseV2{}
}

func (p *VideoFeedListResponseV2) InitDefault() {
}

var VideoFeedListResponseV2_Base_DEFAULT *base.Status

func (p *VideoFeedListResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoFeedListResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoFeedListResponseV2) GetVideoList() (v []*base.Video) {
	return p.VideoList
}

func (p *VideoFeedListResponseV2) GetTotal() (v int64) {
	return p.Total
}

func (p *VideoFeedListResponseV2) GetHasMore() (v bool) {
	return p.HasMore
}

func (p *VideoFeedListResponseV2) GetNextCursor() (v string) {
	return p.NextCursor
}
func (p *VideoFeedListResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoFeedListResponseV2) SetVideoList(val []*base.Video) {
	p.VideoList = val
}
func (p *VideoFeedListResponseV2) SetTotal(val int64) {
	p.Total = val
}
func (p *VideoFeedListResponseV2) SetHasMore(val bool) {
	p.HasMore = val
}
func (p *VideoFeedListResponseV2) SetNextCursor(val string) {
	p.NextCursor = val
}

func (p *VideoFeedListResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoFeedListResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoFeedListResponseV2(%+v)", *p)
}

var fieldIDToName_VideoFeedListResponseV2 = map[int16]string{
	1: "base",
	2: "video_list",
	3: "total",
	4: "has_more",
	5: "next_cursor",
}

type VideoSearchRequestV2 struct {
	Keyword    string   `thrift:"keyword,1" frugal:"1,default,string" json:"keyword"`
	PageNum    int64    `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize   int64    `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
	FromDate   string   `thrift:"from_date,4" frugal:"4,default,string" json:"from_date"`
	ToDate     string   `thrift:"to_date,5" frugal:"5,default,string" json:"to_date"`
	Categories []string `thrift:"categories,6" frugal:"6,default,list<string>" json:"categories"`
	Tags       []string `thrift:"tags,7" frugal:"7,default,list<string>" json:"tags"`
	SortBy     string   `thrift:"sort_by,8" frugal:"8,default,string" json:"sort_by"`
}

func NewVideoSearchRequestV2() *VideoSearchRequestV2 {
	return &VideoSearchRequestV2{}
}

func (p *VideoSearchRequestV2) InitDefault() {
}

func (p *VideoSearchRequestV2) GetKeyword() (v string) {
	return p.Keyword
}

func (p *VideoSearchRequestV2) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoSearchRequestV2) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *VideoSearchRequestV2) GetFromDate() (v string) {
	return p.FromDate
}

func (p *VideoSearchRequestV2) GetToDate() (v string) {
	return p.ToDate
}

func (p *VideoSearchRequestV2) GetCategories() (v []string) {
	return p.Categories
}

func (p *VideoSearchRequestV2) GetTags() (v []string) {
	return p.Tags
}

func (p *VideoSearchRequestV2) GetSortBy() (v string) {
	return p.SortBy
}
func (p *VideoSearchRequestV2) SetKeyword(val string) {
	p.Keyword = val
}
func (p *VideoSearchRequestV2) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoSearchRequestV2) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *VideoSearchRequestV2) SetFromDate(val string) {
	p.FromDate = val
}
func (p *VideoSearchRequestV2) SetToDate(val string) {
	p.ToDate = val
}
func (p *VideoSearchRequestV2) SetCategories(val []string) {
	p.Categories = val
}
func (p *VideoSearchRequestV2) SetTags(val []string) {
	p.Tags = val
}
func (p *VideoSearchRequestV2) SetSortBy(val string) {
	p.SortBy = val
}

func (p *VideoSearchRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchRequestV2(%+v)", *p)
}

var fieldIDToName_VideoSearchRequestV2 = map[int16]string{
	1: "keyword",
	2: "page_num",
	3: "page_size",
	4: "from_date",
	5: "to_date",
	6: "categories",
	7: "tags",
	8: "sort_by",
}

type VideoSearchResponseV2 struct {
	Base        *base.Status     `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoSearch []*base.Video    `thrift:"video_search,2" frugal:"2,default,list<base.Video>" json:"video_search"`
	Count       int64            `thrift:"count,3" frugal:"3,default,i64" json:"count"`
	Facets      map[string]int64 `thrift:"facets,4" frugal:"4,default,map<string:i64>" json:"facets"`
	Suggestions []string         `thrift:"suggestions,5" frugal:"5,default,list<string>" json:"suggestions"`
}

func NewVideoSearchResponseV2() *VideoSearchResponseV2 {
	return &VideoSearchResponseV2{}
}

func (p *VideoSearchResponseV2) InitDefault() {
}

var VideoSearchResponseV2_Base_DEFAULT *base.Status

func (p *VideoSearchResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoSearchResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoSearchResponseV2) GetVideoSearch() (v []*base.Video) {
	return p.VideoSearch
}

func (p *VideoSearchResponseV2) GetCount() (v int64) {
	return p.Count
}

func (p *VideoSearchResponseV2) GetFacets() (v map[string]int64) {
	return p.Facets
}

func (p *VideoSearchResponseV2) GetSuggestions() (v []string) {
	return p.Suggestions
}
func (p *VideoSearchResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoSearchResponseV2) SetVideoSearch(val []*base.Video) {
	p.VideoSearch = val
}
func (p *VideoSearchResponseV2) SetCount(val int64) {
	p.Count = val
}
func (p *VideoSearchResponseV2) SetFacets(val map[string]int64) {
	p.Facets = val
}
func (p *VideoSearchResponseV2) SetSuggestions(val []string) {
	p.Suggestions = val
}

func (p *VideoSearchResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoSearchResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchResponseV2(%+v)", *p)
}

var fieldIDToName_VideoSearchResponseV2 = map[int16]string{
	1: "base",
	2: "video_search",
	3: "count",
	4: "facets",
	5: "suggestions",
}

type VideoPopularRequestV2 struct {
	PageNum   int64  `thrift:"page_num,1" frugal:"1,default,i64" json:"page_num"`
	PageSize  int64  `thrift:"page_size,2" frugal:"2,default,i64" json:"page_size"`
	TimeRange string `thrift:"time_range,3" frugal:"3,default,string" json:"time_range"`
	Category  string `thrift:"category,4" frugal:"4,default,string" json:"category"`
}

func NewVideoPopularRequestV2() *VideoPopularRequestV2 {
	return &VideoPopularRequestV2{}
}

func (p *VideoPopularRequestV2) InitDefault() {
}

func (p *VideoPopularRequestV2) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoPopularRequestV2) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *VideoPopularRequestV2) GetTimeRange() (v string) {
	return p.TimeRange
}

func (p *VideoPopularRequestV2) GetCategory() (v string) {
	return p.Category
}
func (p *VideoPopularRequestV2) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoPopularRequestV2) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *VideoPopularRequestV2) SetTimeRange(val string) {
	p.TimeRange = val
}
func (p *VideoPopularRequestV2) SetCategory(val string) {
	p.Category = val
}

func (p *VideoPopularRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPopularRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPopularRequestV2 = map[int16]string{
	1: "page_num",
	2: "page_size",
	3: "time_range",
	4: "category",
}

type VideoPopularResponseV2 struct {
	Base             *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Popular          []*base.Video `thrift:"Popular,2" frugal:"2,default,list<base.Video>" json:"Popular"`
	RankingAlgorithm string        `thrift:"ranking_algorithm,3" frugal:"3,default,string" json:"ranking_algorithm"`
	UpdatedAt        string        `thrift:"updated_at,4" frugal:"4,default,string" json:"updated_at"`
}

func NewVideoPopularResponseV2() *VideoPopularResponseV2 {
	return &VideoPopularResponseV2{}
}

func (p *VideoPopularResponseV2) InitDefault() {
}

var VideoPopularResponseV2_Base_DEFAULT *base.Status

func (p *VideoPopularResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPopularResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPopularResponseV2) GetPopular() (v []*base.Video) {
	return p.Popular
}

func (p *VideoPopularResponseV2) GetRankingAlgorithm() (v string) {
	return p.RankingAlgorithm
}

func (p *VideoPopularResponseV2) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}
func (p *VideoPopularResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPopularResponseV2) SetPopular(val []*base.Video) {
	p.Popular = val
}
func (p *VideoPopularResponseV2) SetRankingAlgorithm(val string) {
	p.RankingAlgorithm = val
}
func (p *VideoPopularResponseV2) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}

func (p *VideoPopularResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPopularResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPopularResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPopularResponseV2 = map[int16]string{
	1: "base",
	2: "Popular",
	3: "ranking_algorithm",
	4: "updated_at",
}

type VideoInfoRequestV2 struct {
	VideoId          int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	RequestingUserId int64 `thrift:"requesting_user_id,2" frugal:"2,default,i64" json:"requesting_user_id"`
	IncludeAnalytics bool  `thrift:"include_analytics,3" frugal:"3,default,bool" json:"include_analytics"`
}

func NewVideoInfoRequestV2() *VideoInfoRequestV2 {
	return &VideoInfoRequestV2{}
}

func (p *VideoInfoRequestV2) InitDefault() {
}

func (p *VideoInfoRequestV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoInfoRequestV2) GetRequestingUserId() (v int64) {
	return p.RequestingUserId
}

func (p *VideoInfoRequestV2) GetIncludeAnalytics() (v bool) {
	return p.IncludeAnalytics
}
func (p *VideoInfoRequestV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoInfoRequestV2) SetRequestingUserId(val int64) {
	p.RequestingUserId = val
}
func (p *VideoInfoRequestV2) SetIncludeAnalytics(val bool) {
	p.IncludeAnalytics = val
}

func (p *VideoInfoRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoInfoRequestV2(%+v)", *p)
}

var fieldIDToName_VideoInfoRequestV2 = map[int16]string{
	1: "video_id",
	2: "requesting_user_id",
	3: "include_analytics",
}

type VideoInfoResponseV2 struct {
	Base          *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Items         *base.Video       `thrift:"items,2" frugal:"2,default,base.Video" json:"items"`
	AnalyticsData map[string]string `thrift:"analytics_data,3" frugal:"3,default,map<string:string>" json:"analytics_data"`
	CanEdit       bool              `thrift:"can_edit,4" frugal:"4,default,bool" json:"can_edit"`
	CanDelete     bool              `thrift:"can_delete,5" frugal:"5,default,bool" json:"can_delete"`
}

func NewVideoInfoResponseV2() *VideoInfoResponseV2 {
	return &VideoInfoResponseV2{}
}

func (p *VideoInfoResponseV2) InitDefault() {
}

var VideoInfoResponseV2_Base_DEFAULT *base.Status

func (p *VideoInfoResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoInfoResponseV2_Base_DEFAULT
	}
	return p.Base
}

var VideoInfoResponseV2_Items_DEFAULT *base.Video

func (p *VideoInfoResponseV2) GetItems() (v *base.Video) {
	if !p.IsSetItems() {
		return VideoInfoResponseV2_Items_DEFAULT
	}
	return p.Items
}

func (p *VideoInfoResponseV2) GetAnalyticsData() (v map[string]string) {
	return p.AnalyticsData
}

func (p *VideoInfoResponseV2) GetCanEdit() (v bool) {
	return p.CanEdit
}

func (p *VideoInfoResponseV2) GetCanDelete() (v bool) {
	return p.CanDelete
}
func (p *VideoInfoResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoInfoResponseV2) SetItems(val *base.Video) {
	p.Items = val
}
func (p *VideoInfoResponseV2) SetAnalyticsData(val map[string]string) {
	p.AnalyticsData = val
}
func (p *VideoInfoResponseV2) SetCanEdit(val bool) {
	p.CanEdit = val
}
func (p *VideoInfoResponseV2) SetCanDelete(val bool) {
	p.CanDelete = val
}

func (p *VideoInfoResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoInfoResponseV2) IsSetItems() bool {
	return p.Items != nil
}

func (p *VideoInfoResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoInfoResponseV2(%+v)", *p)
}

var fieldIDToName_VideoInfoResponseV2 = map[int16]string{
	1: "base",
	2: "items",
	3: "analytics_data",
	4: "can_edit",
	5: "can_delete",
}

type VideoDeleteRequestV2 struct {
	UserId          int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId         int64  `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	DeleteReason    string `thrift:"delete_reason,3" frugal:"3,default,string" json:"delete_reason"`
	PermanentDelete bool   `thrift:"permanent_delete,4" frugal:"4,default,bool" json:"permanent_delete"`
}

func NewVideoDeleteRequestV2() *VideoDeleteRequestV2 {
	return &VideoDeleteRequestV2{}
}

func (p *VideoDeleteRequestV2) InitDefault() {
}

func (p *VideoDeleteRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoDeleteRequestV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoDeleteRequestV2) GetDeleteReason() (v string) {
	return p.DeleteReason
}

func (p *VideoDeleteRequestV2) GetPermanentDelete() (v bool) {
	return p.PermanentDelete
}
func (p *VideoDeleteRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoDeleteRequestV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoDeleteRequestV2) SetDeleteReason(val string) {
	p.DeleteReason = val
}
func (p *VideoDeleteRequestV2) SetPermanentDelete(val bool) {
	p.PermanentDelete = val
}

func (p *VideoDeleteRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoDeleteRequestV2(%+v)", *p)
}

var fieldIDToName_VideoDeleteRequestV2 = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "delete_reason",
	4: "permanent_delete",
}

type VideoDeleteResponseV2 struct {
	Base                  *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	StorageRecoveredBytes int64             `thrift:"storage_recovered_bytes,2" frugal:"2,default,i64" json:"storage_recovered_bytes"`
	UpdatedQuota          *UserStorageQuota `thrift:"updated_quota,3" frugal:"3,default,UserStorageQuota" json:"updated_quota"`
}

func NewVideoDeleteResponseV2() *VideoDeleteResponseV2 {
	return &VideoDeleteResponseV2{}
}

func (p *VideoDeleteResponseV2) InitDefault() {
}

var VideoDeleteResponseV2_Base_DEFAULT *base.Status

func (p *VideoDeleteResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoDeleteResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoDeleteResponseV2) GetStorageRecoveredBytes() (v int64) {
	return p.StorageRecoveredBytes
}

var VideoDeleteResponseV2_UpdatedQuota_DEFAULT *UserStorageQuota

func (p *VideoDeleteResponseV2) GetUpdatedQuota() (v *UserStorageQuota) {
	if !p.IsSetUpdatedQuota() {
		return VideoDeleteResponseV2_UpdatedQuota_DEFAULT
	}
	return p.UpdatedQuota
}
func (p *VideoDeleteResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoDeleteResponseV2) SetStorageRecoveredBytes(val int64) {
	p.StorageRecoveredBytes = val
}
func (p *VideoDeleteResponseV2) SetUpdatedQuota(val *UserStorageQuota) {
	p.UpdatedQuota = val
}

func (p *VideoDeleteResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoDeleteResponseV2) IsSetUpdatedQuota() bool {
	return p.UpdatedQuota != nil
}

func (p *VideoDeleteResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoDeleteResponseV2(%+v)", *p)
}

var fieldIDToName_VideoDeleteResponseV2 = map[int16]string{
	1: "base",
	2: "storage_recovered_bytes",
	3: "updated_quota",
}

type VideoVisitRequestV2 struct {
	FromId      int64             `thrift:"from_id,1" frugal:"1,default,i64" json:"from_id"`
	VideoId     int64             `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	VisitSource string            `thrift:"visit_source,3" frugal:"3,default,string" json:"visit_source"`
	Context     map[string]string `thrift:"context,4" frugal:"4,default,map<string:string>" json:"context"`
}

func NewVideoVisitRequestV2() *VideoVisitRequestV2 {
	return &VideoVisitRequestV2{}
}

func (p *VideoVisitRequestV2) InitDefault() {
}

func (p *VideoVisitRequestV2) GetFromId() (v int64) {
	return p.FromId
}

func (p *VideoVisitRequestV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoVisitRequestV2) GetVisitSource() (v string) {
	return p.VisitSource
}

func (p *VideoVisitRequestV2) GetContext() (v map[string]string) {
	return p.Context
}
func (p *VideoVisitRequestV2) SetFromId(val int64) {
	p.FromId = val
}
func (p *VideoVisitRequestV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoVisitRequestV2) SetVisitSource(val string) {
	p.VisitSource = val
}
func (p *VideoVisitRequestV2) SetContext(val map[string]string) {
	p.Context = val
}

func (p *VideoVisitRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoVisitRequestV2(%+v)", *p)
}

var fieldIDToName_VideoVisitRequestV2 = map[int16]string{
	1: "from_id",
	2: "video_id",
	3: "visit_source",
	4: "context",
}

type VideoVisitResponseV2 struct {
	Base          *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Item          *base.Video   `thrift:"item,2" frugal:"2,default,base.Video" json:"item"`
	ViewCounted   bool          `thrift:"view_counted,3" frugal:"3,default,bool" json:"view_counted"`
	RelatedVideos []*base.Video `thrift:"related_videos,4" frugal:"4,default,list<base.Video>" json:"related_videos"`
}

func NewVideoVisitResponseV2() *VideoVisitResponseV2 {
	return &VideoVisitResponseV2{}
}

func (p *VideoVisitResponseV2) InitDefault() {
}

var VideoVisitResponseV2_Base_DEFAULT *base.Status

func (p *VideoVisitResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoVisitResponseV2_Base_DEFAULT
	}
	return p.Base
}

var VideoVisitResponseV2_Item_DEFAULT *base.Video

func (p *VideoVisitResponseV2) GetItem() (v *base.Video) {
	if !p.IsSetItem() {
		return VideoVisitResponseV2_Item_DEFAULT
	}
	return p.Item
}

func (p *VideoVisitResponseV2) GetViewCounted() (v bool) {
	return p.ViewCounted
}

func (p *VideoVisitResponseV2) GetRelatedVideos() (v []*base.Video) {
	return p.RelatedVideos
}
func (p *VideoVisitResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoVisitResponseV2) SetItem(val *base.Video) {
	p.Item = val
}
func (p *VideoVisitResponseV2) SetViewCounted(val bool) {
	p.ViewCounted = val
}
func (p *VideoVisitResponseV2) SetRelatedVideos(val []*base.Video) {
	p.RelatedVideos = val
}

func (p *VideoVisitResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoVisitResponseV2) IsSetItem() bool {
	return p.Item != nil
}

func (p *VideoVisitResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoVisitResponseV2(%+v)", *p)
}

var fieldIDToName_VideoVisitResponseV2 = map[int16]string{
	1: "base",
	2: "item",
	3: "view_counted",
	4: "related_videos",
}

type UpdateVisitCountRequestV2 struct {
	VideoId       int64  `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	VisitCount    int64  `thrift:"visit_count,2" frugal:"2,default,i64" json:"visit_count"`
	VisitorIp     string `thrift:"visitor_ip,3" frugal:"3,default,string" json:"visitor_ip"`
	VisitorUserId int64  `thrift:"visitor_user_id,4" frugal:"4,default,i64" json:"visitor_user_id"`
}

func NewUpdateVisitCountRequestV2() *UpdateVisitCountRequestV2 {
	return &UpdateVisitCountRequestV2{}
}

func (p *UpdateVisitCountRequestV2) InitDefault() {
}

func (p *UpdateVisitCountRequestV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *UpdateVisitCountRequestV2) GetVisitCount() (v int64) {
	return p.VisitCount
}

func (p *UpdateVisitCountRequestV2) GetVisitorIp() (v string) {
	return p.VisitorIp
}

func (p *UpdateVisitCountRequestV2) GetVisitorUserId() (v int64) {
	return p.VisitorUserId
}
func (p *UpdateVisitCountRequestV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *UpdateVisitCountRequestV2) SetVisitCount(val int64) {
	p.VisitCount = val
}
func (p *UpdateVisitCountRequestV2) SetVisitorIp(val string) {
	p.VisitorIp = val
}
func (p *UpdateVisitCountRequestV2) SetVisitorUserId(val int64) {
	p.VisitorUserId = val
}

func (p *UpdateVisitCountRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVisitCountRequestV2(%+v)", *p)
}

var fieldIDToName_UpdateVisitCountRequestV2 = map[int16]string{
	1: "video_id",
	2: "visit_count",
	3: "visitor_ip",
	4: "visitor_user_id",
}

type UpdateVisitCountResponseV2 struct {
	Base           *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	NewTotalCount_ int64        `thrift:"new_total_count,2" frugal:"2,default,i64" json:"new_total_count"`
}

func NewUpdateVisitCountResponseV2() *UpdateVisitCountResponseV2 {
	return &UpdateVisitCountResponseV2{}
}

func (p *UpdateVisitCountResponseV2) InitDefault() {
}

var UpdateVisitCountResponseV2_Base_DEFAULT *base.Status

func (p *UpdateVisitCountResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UpdateVisitCountResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *UpdateVisitCountResponseV2) GetNewTotalCount_() (v int64) {
	return p.NewTotalCount_
}
func (p *UpdateVisitCountResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *UpdateVisitCountResponseV2) SetNewTotalCount_(val int64) {
	p.NewTotalCount_ = val
}

func (p *UpdateVisitCountResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateVisitCountResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVisitCountResponseV2(%+v)", *p)
}

var fieldIDToName_UpdateVisitCountResponseV2 = map[int16]string{
	1: "base",
	2: "new_total_count",
}

type UpdateVideoCommentCountRequestV2 struct {
	VideoId       int64  `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	CommentCount  int64  `thrift:"comment_count,2" frugal:"2,default,i64" json:"comment_count"`
	OperationType string `thrift:"operation_type,3" frugal:"3,default,string" json:"operation_type"`
}

func NewUpdateVideoCommentCountRequestV2() *UpdateVideoCommentCountRequestV2 {
	return &UpdateVideoCommentCountRequestV2{}
}

func (p *UpdateVideoCommentCountRequestV2) InitDefault() {
}

func (p *UpdateVideoCommentCountRequestV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *UpdateVideoCommentCountRequestV2) GetCommentCount() (v int64) {
	return p.CommentCount
}

func (p *UpdateVideoCommentCountRequestV2) GetOperationType() (v string) {
	return p.OperationType
}
func (p *UpdateVideoCommentCountRequestV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *UpdateVideoCommentCountRequestV2) SetCommentCount(val int64) {
	p.CommentCount = val
}
func (p *UpdateVideoCommentCountRequestV2) SetOperationType(val string) {
	p.OperationType = val
}

func (p *UpdateVideoCommentCountRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoCommentCountRequestV2(%+v)", *p)
}

var fieldIDToName_UpdateVideoCommentCountRequestV2 = map[int16]string{
	1: "video_id",
	2: "comment_count",
	3: "operation_type",
}

type UpdateVideoCommentCountResponseV2 struct {
	Base           *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	NewTotalCount_ int64        `thrift:"new_total_count,2" frugal:"2,default,i64" json:"new_total_count"`
}

func NewUpdateVideoCommentCountResponseV2() *UpdateVideoCommentCountResponseV2 {
	return &UpdateVideoCommentCountResponseV2{}
}

func (p *UpdateVideoCommentCountResponseV2) InitDefault() {
}

var UpdateVideoCommentCountResponseV2_Base_DEFAULT *base.Status

func (p *UpdateVideoCommentCountResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UpdateVideoCommentCountResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *UpdateVideoCommentCountResponseV2) GetNewTotalCount_() (v int64) {
	return p.NewTotalCount_
}
func (p *UpdateVideoCommentCountResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *UpdateVideoCommentCountResponseV2) SetNewTotalCount_(val int64) {
	p.NewTotalCount_ = val
}

func (p *UpdateVideoCommentCountResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateVideoCommentCountResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoCommentCountResponseV2(%+v)", *p)
}

var fieldIDToName_UpdateVideoCommentCountResponseV2 = map[int16]string{
	1: "base",
	2: "new_total_count",
}

type UpdateLikeCountRequestV2 struct {
	VideoId       int64  `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	LikeCount     int64  `thrift:"like_count,2" frugal:"2,default,i64" json:"like_count"`
	UserId        int64  `thrift:"user_id,3" frugal:"3,default,i64" json:"user_id"`
	OperationType string `thrift:"operation_type,4" frugal:"4,default,string" json:"operation_type"`
}

func NewUpdateLikeCountRequestV2() *UpdateLikeCountRequestV2 {
	return &UpdateLikeCountRequestV2{}
}

func (p *UpdateLikeCountRequestV2) InitDefault() {
}

func (p *UpdateLikeCountRequestV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *UpdateLikeCountRequestV2) GetLikeCount() (v int64) {
	return p.LikeCount
}

func (p *UpdateLikeCountRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *UpdateLikeCountRequestV2) GetOperationType() (v string) {
	return p.OperationType
}
func (p *UpdateLikeCountRequestV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *UpdateLikeCountRequestV2) SetLikeCount(val int64) {
	p.LikeCount = val
}
func (p *UpdateLikeCountRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *UpdateLikeCountRequestV2) SetOperationType(val string) {
	p.OperationType = val
}

func (p *UpdateLikeCountRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateLikeCountRequestV2(%+v)", *p)
}

var fieldIDToName_UpdateLikeCountRequestV2 = map[int16]string{
	1: "video_id",
	2: "like_count",
	3: "user_id",
	4: "operation_type",
}

type UpdateLikeCountResponseV2 struct {
	Base           *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	NewTotalCount_ int64        `thrift:"new_total_count,2" frugal:"2,default,i64" json:"new_total_count"`
}

func NewUpdateLikeCountResponseV2() *UpdateLikeCountResponseV2 {
	return &UpdateLikeCountResponseV2{}
}

func (p *UpdateLikeCountResponseV2) InitDefault() {
}

var UpdateLikeCountResponseV2_Base_DEFAULT *base.Status

func (p *UpdateLikeCountResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UpdateLikeCountResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *UpdateLikeCountResponseV2) GetNewTotalCount_() (v int64) {
	return p.NewTotalCount_
}
func (p *UpdateLikeCountResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *UpdateLikeCountResponseV2) SetNewTotalCount_(val int64) {
	p.NewTotalCount_ = val
}

func (p *UpdateLikeCountResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateLikeCountResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateLikeCountResponseV2(%+v)", *p)
}

var fieldIDToName_UpdateLikeCountResponseV2 = map[int16]string{
	1: "base",
	2: "new_total_count",
}

type GetVideoVisitCountRequestV2 struct {
	VideoId   int64  `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	CountType string `thrift:"count_type,2" frugal:"2,default,string" json:"count_type"`
}

func NewGetVideoVisitCountRequestV2() *GetVideoVisitCountRequestV2 {
	return &GetVideoVisitCountRequestV2{}
}

func (p *GetVideoVisitCountRequestV2) InitDefault() {
}

func (p *GetVideoVisitCountRequestV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *GetVideoVisitCountRequestV2) GetCountType() (v string) {
	return p.CountType
}
func (p *GetVideoVisitCountRequestV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *GetVideoVisitCountRequestV2) SetCountType(val string) {
	p.CountType = val
}

func (p *GetVideoVisitCountRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoVisitCountRequestV2(%+v)", *p)
}

var fieldIDToName_GetVideoVisitCountRequestV2 = map[int16]string{
	1: "video_id",
	2: "count_type",
}

type GetVideoVisitCountResponseV2 struct {
	Base           *base.Status     `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VisitCount     int64            `thrift:"visit_count,2" frugal:"2,default,i64" json:"visit_count"`
	DetailedCounts map[string]int64 `thrift:"detailed_counts,3" frugal:"3,default,map<string:i64>" json:"detailed_counts"`
}

func NewGetVideoVisitCountResponseV2() *GetVideoVisitCountResponseV2 {
	return &GetVideoVisitCountResponseV2{}
}

func (p *GetVideoVisitCountResponseV2) InitDefault() {
}

var GetVideoVisitCountResponseV2_Base_DEFAULT *base.Status

func (p *GetVideoVisitCountResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetVideoVisitCountResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *GetVideoVisitCountResponseV2) GetVisitCount() (v int64) {
	return p.VisitCount
}

func (p *GetVideoVisitCountResponseV2) GetDetailedCounts() (v map[string]int64) {
	return p.DetailedCounts
}
func (p *GetVideoVisitCountResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetVideoVisitCountResponseV2) SetVisitCount(val int64) {
	p.VisitCount = val
}
func (p *GetVideoVisitCountResponseV2) SetDetailedCounts(val map[string]int64) {
	p.DetailedCounts = val
}

func (p *GetVideoVisitCountResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetVideoVisitCountResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoVisitCountResponseV2(%+v)", *p)
}

var fieldIDToName_GetVideoVisitCountResponseV2 = map[int16]string{
	1: "base",
	2: "visit_count",
	3: "detailed_counts",
}

type StreamVideoRequestV2 struct {
	VideoId   string `thrift:"video_id,1" frugal:"1,default,string" json:"video_id"`
	Quality   string `thrift:"quality,2" frugal:"2,default,string" json:"quality"`
	Format    string `thrift:"format,3" frugal:"3,default,string" json:"format"`
	StartTime int64  `thrift:"start_time,4" frugal:"4,default,i64" json:"start_time"`
	EndTime   int64  `thrift:"end_time,5" frugal:"5,default,i64" json:"end_time"`
}

func NewStreamVideoRequestV2() *StreamVideoRequestV2 {
	return &StreamVideoRequestV2{}
}

func (p *StreamVideoRequestV2) InitDefault() {
}

func (p *StreamVideoRequestV2) GetVideoId() (v string) {
	return p.VideoId
}

func (p *StreamVideoRequestV2) GetQuality() (v string) {
	return p.Quality
}

func (p *StreamVideoRequestV2) GetFormat() (v string) {
	return p.Format
}

func (p *StreamVideoRequestV2) GetStartTime() (v int64) {
	return p.StartTime
}

func (p *StreamVideoRequestV2) GetEndTime() (v int64) {
	return p.EndTime
}
func (p *StreamVideoRequestV2) SetVideoId(val string) {
	p.VideoId = val
}
func (p *StreamVideoRequestV2) SetQuality(val string) {
	p.Quality = val
}
func (p *StreamVideoRequestV2) SetFormat(val string) {
	p.Format = val
}
func (p *StreamVideoRequestV2) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *StreamVideoRequestV2) SetEndTime(val int64) {
	p.EndTime = val
}

func (p *StreamVideoRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamVideoRequestV2(%+v)", *p)
}

var fieldIDToName_StreamVideoRequestV2 = map[int16]string{
	1: "video_id",
	2: "quality",
	3: "format",
	4: "start_time",
	5: "end_time",
}

type StreamVideoResponseV2 struct {
	Base           *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	StreamUrl      string            `thrift:"stream_url,2" frugal:"2,default,string" json:"stream_url"`
	StreamMetadata map[string]string `thrift:"stream_metadata,3" frugal:"3,default,map<string:string>" json:"stream_metadata"`
	ExpiresAt      int64             `thrift:"expires_at,4" frugal:"4,default,i64" json:"expires_at"`
}

func NewStreamVideoResponseV2() *StreamVideoResponseV2 {
	return &StreamVideoResponseV2{}
}

func (p *StreamVideoResponseV2) InitDefault() {
}

var StreamVideoResponseV2_Base_DEFAULT *base.Status

func (p *StreamVideoResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return StreamVideoResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *StreamVideoResponseV2) GetStreamUrl() (v string) {
	return p.StreamUrl
}

func (p *StreamVideoResponseV2) GetStreamMetadata() (v map[string]string) {
	return p.StreamMetadata
}

func (p *StreamVideoResponseV2) GetExpiresAt() (v int64) {
	return p.ExpiresAt
}
func (p *StreamVideoResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *StreamVideoResponseV2) SetStreamUrl(val string) {
	p.StreamUrl = val
}
func (p *StreamVideoResponseV2) SetStreamMetadata(val map[string]string) {
	p.StreamMetadata = val
}
func (p *StreamVideoResponseV2) SetExpiresAt(val int64) {
	p.ExpiresAt = val
}

func (p *StreamVideoResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *StreamVideoResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamVideoResponseV2(%+v)", *p)
}

var fieldIDToName_StreamVideoResponseV2 = map[int16]string{
	1: "base",
	2: "stream_url",
	3: "stream_metadata",
	4: "expires_at",
}

type CreateFavoriteRequestV2 struct {
	UserId      int64    `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Name        string   `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Description string   `thrift:"description,3" frugal:"3,default,string" json:"description"`
	CoverUrl    string   `thrift:"cover_url,4" frugal:"4,default,string" json:"cover_url"`
	Privacy     string   `thrift:"privacy,5" frugal:"5,default,string" json:"privacy"`
	Tags        []string `thrift:"tags,6" frugal:"6,default,list<string>" json:"tags"`
}

func NewCreateFavoriteRequestV2() *CreateFavoriteRequestV2 {
	return &CreateFavoriteRequestV2{}
}

func (p *CreateFavoriteRequestV2) InitDefault() {
}

func (p *CreateFavoriteRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *CreateFavoriteRequestV2) GetName() (v string) {
	return p.Name
}

func (p *CreateFavoriteRequestV2) GetDescription() (v string) {
	return p.Description
}

func (p *CreateFavoriteRequestV2) GetCoverUrl() (v string) {
	return p.CoverUrl
}

func (p *CreateFavoriteRequestV2) GetPrivacy() (v string) {
	return p.Privacy
}

func (p *CreateFavoriteRequestV2) GetTags() (v []string) {
	return p.Tags
}
func (p *CreateFavoriteRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *CreateFavoriteRequestV2) SetName(val string) {
	p.Name = val
}
func (p *CreateFavoriteRequestV2) SetDescription(val string) {
	p.Description = val
}
func (p *CreateFavoriteRequestV2) SetCoverUrl(val string) {
	p.CoverUrl = val
}
func (p *CreateFavoriteRequestV2) SetPrivacy(val string) {
	p.Privacy = val
}
func (p *CreateFavoriteRequestV2) SetTags(val []string) {
	p.Tags = val
}

func (p *CreateFavoriteRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFavoriteRequestV2(%+v)", *p)
}

var fieldIDToName_CreateFavoriteRequestV2 = map[int16]string{
	1: "user_id",
	2: "name",
	3: "description",
	4: "cover_url",
	5: "privacy",
	6: "tags",
}

type CreateFavoriteResponseV2 struct {
	Base       *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	FavoriteId int64        `thrift:"favorite_id,2" frugal:"2,default,i64" json:"favorite_id"`
}

func NewCreateFavoriteResponseV2() *CreateFavoriteResponseV2 {
	return &CreateFavoriteResponseV2{}
}

func (p *CreateFavoriteResponseV2) InitDefault() {
}

var CreateFavoriteResponseV2_Base_DEFAULT *base.Status

func (p *CreateFavoriteResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return CreateFavoriteResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateFavoriteResponseV2) GetFavoriteId() (v int64) {
	return p.FavoriteId
}
func (p *CreateFavoriteResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *CreateFavoriteResponseV2) SetFavoriteId(val int64) {
	p.FavoriteId = val
}

func (p *CreateFavoriteResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateFavoriteResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFavoriteResponseV2(%+v)", *p)
}

var fieldIDToName_CreateFavoriteResponseV2 = map[int16]string{
	1: "base",
	2: "favorite_id",
}

type GetFavoriteListRequestV2 struct {
	UserId        int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum       int64  `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize      int64  `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
	PrivacyFilter string `thrift:"privacy_filter,4" frugal:"4,default,string" json:"privacy_filter"`
}

func NewGetFavoriteListRequestV2() *GetFavoriteListRequestV2 {
	return &GetFavoriteListRequestV2{}
}

func (p *GetFavoriteListRequestV2) InitDefault() {
}

func (p *GetFavoriteListRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetFavoriteListRequestV2) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *GetFavoriteListRequestV2) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *GetFavoriteListRequestV2) GetPrivacyFilter() (v string) {
	return p.PrivacyFilter
}
func (p *GetFavoriteListRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetFavoriteListRequestV2) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *GetFavoriteListRequestV2) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *GetFavoriteListRequestV2) SetPrivacyFilter(val string) {
	p.PrivacyFilter = val
}

func (p *GetFavoriteListRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFavoriteListRequestV2(%+v)", *p)
}

var fieldIDToName_GetFavoriteListRequestV2 = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
	4: "privacy_filter",
}

type GetFavoriteListResponseV2 struct {
	Base         *base.Status     `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	FavoriteList []*base.Favorite `thrift:"favorite_list,2" frugal:"2,default,list<base.Favorite>" json:"favorite_list"`
	TotalCount   int64            `thrift:"total_count,3" frugal:"3,default,i64" json:"total_count"`
}

func NewGetFavoriteListResponseV2() *GetFavoriteListResponseV2 {
	return &GetFavoriteListResponseV2{}
}

func (p *GetFavoriteListResponseV2) InitDefault() {
}

var GetFavoriteListResponseV2_Base_DEFAULT *base.Status

func (p *GetFavoriteListResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetFavoriteListResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *GetFavoriteListResponseV2) GetFavoriteList() (v []*base.Favorite) {
	return p.FavoriteList
}

func (p *GetFavoriteListResponseV2) GetTotalCount() (v int64) {
	return p.TotalCount
}
func (p *GetFavoriteListResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetFavoriteListResponseV2) SetFavoriteList(val []*base.Favorite) {
	p.FavoriteList = val
}
func (p *GetFavoriteListResponseV2) SetTotalCount(val int64) {
	p.TotalCount = val
}

func (p *GetFavoriteListResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetFavoriteListResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFavoriteListResponseV2(%+v)", *p)
}

var fieldIDToName_GetFavoriteListResponseV2 = map[int16]string{
	1: "base",
	2: "favorite_list",
	3: "total_count",
}

type AddFavoriteVideoRequestV2 struct {
	FavoriteId int64  `thrift:"favorite_id,1" frugal:"1,default,i64" json:"favorite_id"`
	UserId     int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	VideoId    int64  `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
	Note       string `thrift:"note,4" frugal:"4,default,string" json:"note"`
}

func NewAddFavoriteVideoRequestV2() *AddFavoriteVideoRequestV2 {
	return &AddFavoriteVideoRequestV2{}
}

func (p *AddFavoriteVideoRequestV2) InitDefault() {
}

func (p *AddFavoriteVideoRequestV2) GetFavoriteId() (v int64) {
	return p.FavoriteId
}

func (p *AddFavoriteVideoRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *AddFavoriteVideoRequestV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *AddFavoriteVideoRequestV2) GetNote() (v string) {
	return p.Note
}
func (p *AddFavoriteVideoRequestV2) SetFavoriteId(val int64) {
	p.FavoriteId = val
}
func (p *AddFavoriteVideoRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *AddFavoriteVideoRequestV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *AddFavoriteVideoRequestV2) SetNote(val string) {
	p.Note = val
}

func (p *AddFavoriteVideoRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFavoriteVideoRequestV2(%+v)", *p)
}

var fieldIDToName_AddFavoriteVideoRequestV2 = map[int16]string{
	1: "favorite_id",
	2: "user_id",
	3: "video_id",
	4: "note",
}

type AddFavoriteVideoResponseV2 struct {
	Base          *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	AlreadyExists bool         `thrift:"already_exists,2" frugal:"2,default,bool" json:"already_exists"`
}

func NewAddFavoriteVideoResponseV2() *AddFavoriteVideoResponseV2 {
	return &AddFavoriteVideoResponseV2{}
}

func (p *AddFavoriteVideoResponseV2) InitDefault() {
}

var AddFavoriteVideoResponseV2_Base_DEFAULT *base.Status

func (p *AddFavoriteVideoResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return AddFavoriteVideoResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *AddFavoriteVideoResponseV2) GetAlreadyExists() (v bool) {
	return p.AlreadyExists
}
func (p *AddFavoriteVideoResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *AddFavoriteVideoResponseV2) SetAlreadyExists(val bool) {
	p.AlreadyExists = val
}

func (p *AddFavoriteVideoResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddFavoriteVideoResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFavoriteVideoResponseV2(%+v)", *p)
}

var fieldIDToName_AddFavoriteVideoResponseV2 = map[int16]string{
	1: "base",
	2: "already_exists",
}

type GetFavoriteVideoListRequestV2 struct {
	UserId     int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	FavoriteId int64  `thrift:"favorite_id,2" frugal:"2,default,i64" json:"favorite_id"`
	PageNum    int64  `thrift:"page_num,3" frugal:"3,default,i64" json:"page_num"`
	PageSize   int64  `thrift:"page_size,4" frugal:"4,default,i64" json:"page_size"`
	SortBy     string `thrift:"sort_by,5" frugal:"5,default,string" json:"sort_by"`
}

func NewGetFavoriteVideoListRequestV2() *GetFavoriteVideoListRequestV2 {
	return &GetFavoriteVideoListRequestV2{}
}

func (p *GetFavoriteVideoListRequestV2) InitDefault() {
}

func (p *GetFavoriteVideoListRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetFavoriteVideoListRequestV2) GetFavoriteId() (v int64) {
	return p.FavoriteId
}

func (p *GetFavoriteVideoListRequestV2) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *GetFavoriteVideoListRequestV2) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *GetFavoriteVideoListRequestV2) GetSortBy() (v string) {
	return p.SortBy
}
func (p *GetFavoriteVideoListRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetFavoriteVideoListRequestV2) SetFavoriteId(val int64) {
	p.FavoriteId = val
}
func (p *GetFavoriteVideoListRequestV2) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *GetFavoriteVideoListRequestV2) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *GetFavoriteVideoListRequestV2) SetSortBy(val string) {
	p.SortBy = val
}

func (p *GetFavoriteVideoListRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFavoriteVideoListRequestV2(%+v)", *p)
}

var fieldIDToName_GetFavoriteVideoListRequestV2 = map[int16]string{
	1: "user_id",
	2: "favorite_id",
	3: "page_num",
	4: "page_size",
	5: "sort_by",
}

type GetFavoriteVideoListResponseV2 struct {
	Base       *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoList  []*base.Video `thrift:"video_list,2" frugal:"2,default,list<base.Video>" json:"video_list"`
	TotalCount int64         `thrift:"total_count,3" frugal:"3,default,i64" json:"total_count"`
}

func NewGetFavoriteVideoListResponseV2() *GetFavoriteVideoListResponseV2 {
	return &GetFavoriteVideoListResponseV2{}
}

func (p *GetFavoriteVideoListResponseV2) InitDefault() {
}

var GetFavoriteVideoListResponseV2_Base_DEFAULT *base.Status

func (p *GetFavoriteVideoListResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetFavoriteVideoListResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *GetFavoriteVideoListResponseV2) GetVideoList() (v []*base.Video) {
	return p.VideoList
}

func (p *GetFavoriteVideoListResponseV2) GetTotalCount() (v int64) {
	return p.TotalCount
}
func (p *GetFavoriteVideoListResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetFavoriteVideoListResponseV2) SetVideoList(val []*base.Video) {
	p.VideoList = val
}
func (p *GetFavoriteVideoListResponseV2) SetTotalCount(val int64) {
	p.TotalCount = val
}

func (p *GetFavoriteVideoListResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetFavoriteVideoListResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFavoriteVideoListResponseV2(%+v)", *p)
}

var fieldIDToName_GetFavoriteVideoListResponseV2 = map[int16]string{
	1: "base",
	2: "video_list",
	3: "total_count",
}

type DeleteFavoriteRequestV2 struct {
	UserId       int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	FavoriteId   int64  `thrift:"favorite_id,2" frugal:"2,default,i64" json:"favorite_id"`
	DeleteReason string `thrift:"delete_reason,3" frugal:"3,default,string" json:"delete_reason"`
}

func NewDeleteFavoriteRequestV2() *DeleteFavoriteRequestV2 {
	return &DeleteFavoriteRequestV2{}
}

func (p *DeleteFavoriteRequestV2) InitDefault() {
}

func (p *DeleteFavoriteRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *DeleteFavoriteRequestV2) GetFavoriteId() (v int64) {
	return p.FavoriteId
}

func (p *DeleteFavoriteRequestV2) GetDeleteReason() (v string) {
	return p.DeleteReason
}
func (p *DeleteFavoriteRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *DeleteFavoriteRequestV2) SetFavoriteId(val int64) {
	p.FavoriteId = val
}
func (p *DeleteFavoriteRequestV2) SetDeleteReason(val string) {
	p.DeleteReason = val
}

func (p *DeleteFavoriteRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteFavoriteRequestV2(%+v)", *p)
}

var fieldIDToName_DeleteFavoriteRequestV2 = map[int16]string{
	1: "user_id",
	2: "favorite_id",
	3: "delete_reason",
}

type DeleteFavoriteResponseV2 struct {
	Base             *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideosMovedCount int64        `thrift:"videos_moved_count,2" frugal:"2,default,i64" json:"videos_moved_count"`
}

func NewDeleteFavoriteResponseV2() *DeleteFavoriteResponseV2 {
	return &DeleteFavoriteResponseV2{}
}

func (p *DeleteFavoriteResponseV2) InitDefault() {
}

var DeleteFavoriteResponseV2_Base_DEFAULT *base.Status

func (p *DeleteFavoriteResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return DeleteFavoriteResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *DeleteFavoriteResponseV2) GetVideosMovedCount() (v int64) {
	return p.VideosMovedCount
}
func (p *DeleteFavoriteResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *DeleteFavoriteResponseV2) SetVideosMovedCount(val int64) {
	p.VideosMovedCount = val
}

func (p *DeleteFavoriteResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteFavoriteResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteFavoriteResponseV2(%+v)", *p)
}

var fieldIDToName_DeleteFavoriteResponseV2 = map[int16]string{
	1: "base",
	2: "videos_moved_count",
}

type DeleteVideoFromFavoriteRequestV2 struct {
	FavoriteId   int64  `thrift:"favorite_id,1" frugal:"1,default,i64" json:"favorite_id"`
	UserId       int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	VideoId      int64  `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
	RemoveReason string `thrift:"remove_reason,4" frugal:"4,default,string" json:"remove_reason"`
}

func NewDeleteVideoFromFavoriteRequestV2() *DeleteVideoFromFavoriteRequestV2 {
	return &DeleteVideoFromFavoriteRequestV2{}
}

func (p *DeleteVideoFromFavoriteRequestV2) InitDefault() {
}

func (p *DeleteVideoFromFavoriteRequestV2) GetFavoriteId() (v int64) {
	return p.FavoriteId
}

func (p *DeleteVideoFromFavoriteRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *DeleteVideoFromFavoriteRequestV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *DeleteVideoFromFavoriteRequestV2) GetRemoveReason() (v string) {
	return p.RemoveReason
}
func (p *DeleteVideoFromFavoriteRequestV2) SetFavoriteId(val int64) {
	p.FavoriteId = val
}
func (p *DeleteVideoFromFavoriteRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *DeleteVideoFromFavoriteRequestV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *DeleteVideoFromFavoriteRequestV2) SetRemoveReason(val string) {
	p.RemoveReason = val
}

func (p *DeleteVideoFromFavoriteRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteVideoFromFavoriteRequestV2(%+v)", *p)
}

var fieldIDToName_DeleteVideoFromFavoriteRequestV2 = map[int16]string{
	1: "favorite_id",
	2: "user_id",
	3: "video_id",
	4: "remove_reason",
}

type DeleteVideoFromFavoriteResponseV2 struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewDeleteVideoFromFavoriteResponseV2() *DeleteVideoFromFavoriteResponseV2 {
	return &DeleteVideoFromFavoriteResponseV2{}
}

func (p *DeleteVideoFromFavoriteResponseV2) InitDefault() {
}

var DeleteVideoFromFavoriteResponseV2_Base_DEFAULT *base.Status

func (p *DeleteVideoFromFavoriteResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return DeleteVideoFromFavoriteResponseV2_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteVideoFromFavoriteResponseV2) SetBase(val *base.Status) {
	p.Base = val
}

func (p *DeleteVideoFromFavoriteResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteVideoFromFavoriteResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteVideoFromFavoriteResponseV2(%+v)", *p)
}

var fieldIDToName_DeleteVideoFromFavoriteResponseV2 = map[int16]string{
	1: "base",
}

type SharedVideoRequestV2 struct {
	UserId        int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	ToUserId      int64  `thrift:"to_user_id,2" frugal:"2,default,i64" json:"to_user_id"`
	VideoId       int64  `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
	ShareMessage  string `thrift:"share_message,4" frugal:"4,default,string" json:"share_message"`
	SharePlatform string `thrift:"share_platform,5" frugal:"5,default,string" json:"share_platform"`
}

func NewSharedVideoRequestV2() *SharedVideoRequestV2 {
	return &SharedVideoRequestV2{}
}

func (p *SharedVideoRequestV2) InitDefault() {
}

func (p *SharedVideoRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *SharedVideoRequestV2) GetToUserId() (v int64) {
	return p.ToUserId
}

func (p *SharedVideoRequestV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *SharedVideoRequestV2) GetShareMessage() (v string) {
	return p.ShareMessage
}

func (p *SharedVideoRequestV2) GetSharePlatform() (v string) {
	return p.SharePlatform
}
func (p *SharedVideoRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *SharedVideoRequestV2) SetToUserId(val int64) {
	p.ToUserId = val
}
func (p *SharedVideoRequestV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *SharedVideoRequestV2) SetShareMessage(val string) {
	p.ShareMessage = val
}
func (p *SharedVideoRequestV2) SetSharePlatform(val string) {
	p.SharePlatform = val
}

func (p *SharedVideoRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SharedVideoRequestV2(%+v)", *p)
}

var fieldIDToName_SharedVideoRequestV2 = map[int16]string{
	1: "user_id",
	2: "to_user_id",
	3: "video_id",
	4: "share_message",
	5: "share_platform",
}

type SharedVideoResponseV2 struct {
	Base      *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	ShareUrl  string       `thrift:"share_url,2" frugal:"2,default,string" json:"share_url"`
	ShareCode string       `thrift:"share_code,3" frugal:"3,default,string" json:"share_code"`
}

func NewSharedVideoResponseV2() *SharedVideoResponseV2 {
	return &SharedVideoResponseV2{}
}

func (p *SharedVideoResponseV2) InitDefault() {
}

var SharedVideoResponseV2_Base_DEFAULT *base.Status

func (p *SharedVideoResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return SharedVideoResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *SharedVideoResponseV2) GetShareUrl() (v string) {
	return p.ShareUrl
}

func (p *SharedVideoResponseV2) GetShareCode() (v string) {
	return p.ShareCode
}
func (p *SharedVideoResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *SharedVideoResponseV2) SetShareUrl(val string) {
	p.ShareUrl = val
}
func (p *SharedVideoResponseV2) SetShareCode(val string) {
	p.ShareCode = val
}

func (p *SharedVideoResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *SharedVideoResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SharedVideoResponseV2(%+v)", *p)
}

var fieldIDToName_SharedVideoResponseV2 = map[int16]string{
	1: "base",
	2: "share_url",
	3: "share_code",
}

type RecommendVideoRequestV2 struct {
	UserId        int64    `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Count         int32    `thrift:"count,2" frugal:"2,default,i32" json:"count"`
	Categories    []string `thrift:"categories,3" frugal:"3,default,list<string>" json:"categories"`
	AlgorithmType string   `thrift:"algorithm_type,4" frugal:"4,default,string" json:"algorithm_type"`
}

func NewRecommendVideoRequestV2() *RecommendVideoRequestV2 {
	return &RecommendVideoRequestV2{}
}

func (p *RecommendVideoRequestV2) InitDefault() {
}

func (p *RecommendVideoRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *RecommendVideoRequestV2) GetCount() (v int32) {
	return p.Count
}

func (p *RecommendVideoRequestV2) GetCategories() (v []string) {
	return p.Categories
}

func (p *RecommendVideoRequestV2) GetAlgorithmType() (v string) {
	return p.AlgorithmType
}
func (p *RecommendVideoRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *RecommendVideoRequestV2) SetCount(val int32) {
	p.Count = val
}
func (p *RecommendVideoRequestV2) SetCategories(val []string) {
	p.Categories = val
}
func (p *RecommendVideoRequestV2) SetAlgorithmType(val string) {
	p.AlgorithmType = val
}

func (p *RecommendVideoRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendVideoRequestV2(%+v)", *p)
}

var fieldIDToName_RecommendVideoRequestV2 = map[int16]string{
	1: "user_id",
	2: "count",
	3: "categories",
	4: "algorithm_type",
}

type RecommendVideoResponseV2 struct {
	Base             *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoList        []*base.Video `thrift:"video_list,2" frugal:"2,default,list<base.Video>" json:"video_list"`
	RecommendationId string        `thrift:"recommendation_id,3" frugal:"3,default,string" json:"recommendation_id"`
	AlgorithmUsed    string        `thrift:"algorithm_used,4" frugal:"4,default,string" json:"algorithm_used"`
}

func NewRecommendVideoResponseV2() *RecommendVideoResponseV2 {
	return &RecommendVideoResponseV2{}
}

func (p *RecommendVideoResponseV2) InitDefault() {
}

var RecommendVideoResponseV2_Base_DEFAULT *base.Status

func (p *RecommendVideoResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return RecommendVideoResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *RecommendVideoResponseV2) GetVideoList() (v []*base.Video) {
	return p.VideoList
}

func (p *RecommendVideoResponseV2) GetRecommendationId() (v string) {
	return p.RecommendationId
}

func (p *RecommendVideoResponseV2) GetAlgorithmUsed() (v string) {
	return p.AlgorithmUsed
}
func (p *RecommendVideoResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *RecommendVideoResponseV2) SetVideoList(val []*base.Video) {
	p.VideoList = val
}
func (p *RecommendVideoResponseV2) SetRecommendationId(val string) {
	p.RecommendationId = val
}
func (p *RecommendVideoResponseV2) SetAlgorithmUsed(val string) {
	p.AlgorithmUsed = val
}

func (p *RecommendVideoResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *RecommendVideoResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendVideoResponseV2(%+v)", *p)
}

var fieldIDToName_RecommendVideoResponseV2 = map[int16]string{
	1: "base",
	2: "video_list",
	3: "recommendation_id",
	4: "algorithm_used",
}

type VideoStorageInfo struct {
	UserId            int64             `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId           int64             `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	SourcePath        string            `thrift:"source_path,3" frugal:"3,default,string" json:"source_path"`
	ProcessedPaths    map[int32]string  `thrift:"processed_paths,4" frugal:"4,default,map<i32:string>" json:"processed_paths"`
	ThumbnailPaths    map[string]string `thrift:"thumbnail_paths,5" frugal:"5,default,map<string:string>" json:"thumbnail_paths"`
	AnimatedCoverPath string            `thrift:"animated_cover_path,6" frugal:"6,default,string" json:"animated_cover_path"`
	MetadataPath      string            `thrift:"metadata_path,7" frugal:"7,default,string" json:"metadata_path"`
	StorageTier       string            `thrift:"storage_tier,8" frugal:"8,default,string" json:"storage_tier"`
	BucketName        string            `thrift:"bucket_name,9" frugal:"9,default,string" json:"bucket_name"`
	FileSize          int64             `thrift:"file_size,10" frugal:"10,default,i64" json:"file_size"`
	DurationSeconds   int32             `thrift:"duration_seconds,11" frugal:"11,default,i32" json:"duration_seconds"`
	Resolution        *VideoResolution  `thrift:"resolution,12" frugal:"12,default,VideoResolution" json:"resolution"`
	Format            string            `thrift:"format,13" frugal:"13,default,string" json:"format"`
}

func NewVideoStorageInfo() *VideoStorageInfo {
	return &VideoStorageInfo{}
}

func (p *VideoStorageInfo) InitDefault() {
}

func (p *VideoStorageInfo) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoStorageInfo) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoStorageInfo) GetSourcePath() (v string) {
	return p.SourcePath
}

func (p *VideoStorageInfo) GetProcessedPaths() (v map[int32]string) {
	return p.ProcessedPaths
}

func (p *VideoStorageInfo) GetThumbnailPaths() (v map[string]string) {
	return p.ThumbnailPaths
}

func (p *VideoStorageInfo) GetAnimatedCoverPath() (v string) {
	return p.AnimatedCoverPath
}

func (p *VideoStorageInfo) GetMetadataPath() (v string) {
	return p.MetadataPath
}

func (p *VideoStorageInfo) GetStorageTier() (v string) {
	return p.StorageTier
}

func (p *VideoStorageInfo) GetBucketName() (v string) {
	return p.BucketName
}

func (p *VideoStorageInfo) GetFileSize() (v int64) {
	return p.FileSize
}

func (p *VideoStorageInfo) GetDurationSeconds() (v int32) {
	return p.DurationSeconds
}

var VideoStorageInfo_Resolution_DEFAULT *VideoResolution

func (p *VideoStorageInfo) GetResolution() (v *VideoResolution) {
	if !p.IsSetResolution() {
		return VideoStorageInfo_Resolution_DEFAULT
	}
	return p.Resolution
}

func (p *VideoStorageInfo) GetFormat() (v string) {
	return p.Format
}
func (p *VideoStorageInfo) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoStorageInfo) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoStorageInfo) SetSourcePath(val string) {
	p.SourcePath = val
}
func (p *VideoStorageInfo) SetProcessedPaths(val map[int32]string) {
	p.ProcessedPaths = val
}
func (p *VideoStorageInfo) SetThumbnailPaths(val map[string]string) {
	p.ThumbnailPaths = val
}
func (p *VideoStorageInfo) SetAnimatedCoverPath(val string) {
	p.AnimatedCoverPath = val
}
func (p *VideoStorageInfo) SetMetadataPath(val string) {
	p.MetadataPath = val
}
func (p *VideoStorageInfo) SetStorageTier(val string) {
	p.StorageTier = val
}
func (p *VideoStorageInfo) SetBucketName(val string) {
	p.BucketName = val
}
func (p *VideoStorageInfo) SetFileSize(val int64) {
	p.FileSize = val
}
func (p *VideoStorageInfo) SetDurationSeconds(val int32) {
	p.DurationSeconds = val
}
func (p *VideoStorageInfo) SetResolution(val *VideoResolution) {
	p.Resolution = val
}
func (p *VideoStorageInfo) SetFormat(val string) {
	p.Format = val
}

func (p *VideoStorageInfo) IsSetResolution() bool {
	return p.Resolution != nil
}

func (p *VideoStorageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoStorageInfo(%+v)", *p)
}

var fieldIDToName_VideoStorageInfo = map[int16]string{
	1:  "user_id",
	2:  "video_id",
	3:  "source_path",
	4:  "processed_paths",
	5:  "thumbnail_paths",
	6:  "animated_cover_path",
	7:  "metadata_path",
	8:  "storage_tier",
	9:  "bucket_name",
	10: "file_size",
	11: "duration_seconds",
	12: "resolution",
	13: "format",
}

type VideoHeatManagementRequest struct {
	VideoId   int64  `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	Operation string `thrift:"operation,2" frugal:"2,default,string" json:"operation"`
	Reason    string `thrift:"reason,3" frugal:"3,default,string" json:"reason"`
}

func NewVideoHeatManagementRequest() *VideoHeatManagementRequest {
	return &VideoHeatManagementRequest{}
}

func (p *VideoHeatManagementRequest) InitDefault() {
}

func (p *VideoHeatManagementRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoHeatManagementRequest) GetOperation() (v string) {
	return p.Operation
}

func (p *VideoHeatManagementRequest) GetReason() (v string) {
	return p.Reason
}
func (p *VideoHeatManagementRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoHeatManagementRequest) SetOperation(val string) {
	p.Operation = val
}
func (p *VideoHeatManagementRequest) SetReason(val string) {
	p.Reason = val
}

func (p *VideoHeatManagementRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHeatManagementRequest(%+v)", *p)
}

var fieldIDToName_VideoHeatManagementRequest = map[int16]string{
	1: "video_id",
	2: "operation",
	3: "reason",
}

type VideoHeatManagementResponse struct {
	Base               *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	OldTier            string       `thrift:"old_tier,2" frugal:"2,default,string" json:"old_tier"`
	NewTier_           string       `thrift:"new_tier,3" frugal:"3,default,string" json:"new_tier"`
	OperationCostBytes int64        `thrift:"operation_cost_bytes,4" frugal:"4,default,i64" json:"operation_cost_bytes"`
}

func NewVideoHeatManagementResponse() *VideoHeatManagementResponse {
	return &VideoHeatManagementResponse{}
}

func (p *VideoHeatManagementResponse) InitDefault() {
}

var VideoHeatManagementResponse_Base_DEFAULT *base.Status

func (p *VideoHeatManagementResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoHeatManagementResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoHeatManagementResponse) GetOldTier() (v string) {
	return p.OldTier
}

func (p *VideoHeatManagementResponse) GetNewTier_() (v string) {
	return p.NewTier_
}

func (p *VideoHeatManagementResponse) GetOperationCostBytes() (v int64) {
	return p.OperationCostBytes
}
func (p *VideoHeatManagementResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoHeatManagementResponse) SetOldTier(val string) {
	p.OldTier = val
}
func (p *VideoHeatManagementResponse) SetNewTier_(val string) {
	p.NewTier_ = val
}
func (p *VideoHeatManagementResponse) SetOperationCostBytes(val int64) {
	p.OperationCostBytes = val
}

func (p *VideoHeatManagementResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoHeatManagementResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHeatManagementResponse(%+v)", *p)
}

var fieldIDToName_VideoHeatManagementResponse = map[int16]string{
	1: "base",
	2: "old_tier",
	3: "new_tier",
	4: "operation_cost_bytes",
}

type UserQuotaManagementRequest struct {
	UserId    int64             `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Operation string            `thrift:"operation,2" frugal:"2,default,string" json:"operation"`
	NewQuota_ *UserStorageQuota `thrift:"new_quota,3" frugal:"3,default,UserStorageQuota" json:"new_quota"`
}

func NewUserQuotaManagementRequest() *UserQuotaManagementRequest {
	return &UserQuotaManagementRequest{}
}

func (p *UserQuotaManagementRequest) InitDefault() {
}

func (p *UserQuotaManagementRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *UserQuotaManagementRequest) GetOperation() (v string) {
	return p.Operation
}

var UserQuotaManagementRequest_NewQuota__DEFAULT *UserStorageQuota

func (p *UserQuotaManagementRequest) GetNewQuota_() (v *UserStorageQuota) {
	if !p.IsSetNewQuota_() {
		return UserQuotaManagementRequest_NewQuota__DEFAULT
	}
	return p.NewQuota_
}
func (p *UserQuotaManagementRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *UserQuotaManagementRequest) SetOperation(val string) {
	p.Operation = val
}
func (p *UserQuotaManagementRequest) SetNewQuota_(val *UserStorageQuota) {
	p.NewQuota_ = val
}

func (p *UserQuotaManagementRequest) IsSetNewQuota_() bool {
	return p.NewQuota_ != nil
}

func (p *UserQuotaManagementRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserQuotaManagementRequest(%+v)", *p)
}

var fieldIDToName_UserQuotaManagementRequest = map[int16]string{
	1: "user_id",
	2: "operation",
	3: "new_quota",
}

type UserQuotaManagementResponse struct {
	Base          *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	CurrentQuota  *UserStorageQuota `thrift:"current_quota,2" frugal:"2,default,UserStorageQuota" json:"current_quota"`
	QuotaWarnings []string          `thrift:"quota_warnings,3" frugal:"3,default,list<string>" json:"quota_warnings"`
	QuotaExceeded bool              `thrift:"quota_exceeded,4" frugal:"4,default,bool" json:"quota_exceeded"`
}

func NewUserQuotaManagementResponse() *UserQuotaManagementResponse {
	return &UserQuotaManagementResponse{}
}

func (p *UserQuotaManagementResponse) InitDefault() {
}

var UserQuotaManagementResponse_Base_DEFAULT *base.Status

func (p *UserQuotaManagementResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UserQuotaManagementResponse_Base_DEFAULT
	}
	return p.Base
}

var UserQuotaManagementResponse_CurrentQuota_DEFAULT *UserStorageQuota

func (p *UserQuotaManagementResponse) GetCurrentQuota() (v *UserStorageQuota) {
	if !p.IsSetCurrentQuota() {
		return UserQuotaManagementResponse_CurrentQuota_DEFAULT
	}
	return p.CurrentQuota
}

func (p *UserQuotaManagementResponse) GetQuotaWarnings() (v []string) {
	return p.QuotaWarnings
}

func (p *UserQuotaManagementResponse) GetQuotaExceeded() (v bool) {
	return p.QuotaExceeded
}
func (p *UserQuotaManagementResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *UserQuotaManagementResponse) SetCurrentQuota(val *UserStorageQuota) {
	p.CurrentQuota = val
}
func (p *UserQuotaManagementResponse) SetQuotaWarnings(val []string) {
	p.QuotaWarnings = val
}
func (p *UserQuotaManagementResponse) SetQuotaExceeded(val bool) {
	p.QuotaExceeded = val
}

func (p *UserQuotaManagementResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UserQuotaManagementResponse) IsSetCurrentQuota() bool {
	return p.CurrentQuota != nil
}

func (p *UserQuotaManagementResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserQuotaManagementResponse(%+v)", *p)
}

var fieldIDToName_UserQuotaManagementResponse = map[int16]string{
	1: "base",
	2: "current_quota",
	3: "quota_warnings",
	4: "quota_exceeded",
}

type BatchVideoOperationRequest struct {
	UserId          int64             `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoIds        []int64           `thrift:"video_ids,2" frugal:"2,default,list<i64>" json:"video_ids"`
	Operation       string            `thrift:"operation,3" frugal:"3,default,string" json:"operation"`
	OperationParams map[string]string `thrift:"operation_params,4" frugal:"4,default,map<string:string>" json:"operation_params"`
}

func NewBatchVideoOperationRequest() *BatchVideoOperationRequest {
	return &BatchVideoOperationRequest{}
}

func (p *BatchVideoOperationRequest) InitDefault() {
}

func (p *BatchVideoOperationRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *BatchVideoOperationRequest) GetVideoIds() (v []int64) {
	return p.VideoIds
}

func (p *BatchVideoOperationRequest) GetOperation() (v string) {
	return p.Operation
}

func (p *BatchVideoOperationRequest) GetOperationParams() (v map[string]string) {
	return p.OperationParams
}
func (p *BatchVideoOperationRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *BatchVideoOperationRequest) SetVideoIds(val []int64) {
	p.VideoIds = val
}
func (p *BatchVideoOperationRequest) SetOperation(val string) {
	p.Operation = val
}
func (p *BatchVideoOperationRequest) SetOperationParams(val map[string]string) {
	p.OperationParams = val
}

func (p *BatchVideoOperationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchVideoOperationRequest(%+v)", *p)
}

var fieldIDToName_BatchVideoOperationRequest = map[int16]string{
	1: "user_id",
	2: "video_ids",
	3: "operation",
	4: "operation_params",
}

type BatchVideoOperationResponse struct {
	Base              *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	SuccessVideoIds   []int64           `thrift:"success_video_ids,2" frugal:"2,default,list<i64>" json:"success_video_ids"`
	FailedVideoErrors map[int64]string  `thrift:"failed_video_errors,3" frugal:"3,default,map<i64:string>" json:"failed_video_errors"`
	UpdatedQuota      *UserStorageQuota `thrift:"updated_quota,4" frugal:"4,default,UserStorageQuota" json:"updated_quota"`
}

func NewBatchVideoOperationResponse() *BatchVideoOperationResponse {
	return &BatchVideoOperationResponse{}
}

func (p *BatchVideoOperationResponse) InitDefault() {
}

var BatchVideoOperationResponse_Base_DEFAULT *base.Status

func (p *BatchVideoOperationResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return BatchVideoOperationResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *BatchVideoOperationResponse) GetSuccessVideoIds() (v []int64) {
	return p.SuccessVideoIds
}

func (p *BatchVideoOperationResponse) GetFailedVideoErrors() (v map[int64]string) {
	return p.FailedVideoErrors
}

var BatchVideoOperationResponse_UpdatedQuota_DEFAULT *UserStorageQuota

func (p *BatchVideoOperationResponse) GetUpdatedQuota() (v *UserStorageQuota) {
	if !p.IsSetUpdatedQuota() {
		return BatchVideoOperationResponse_UpdatedQuota_DEFAULT
	}
	return p.UpdatedQuota
}
func (p *BatchVideoOperationResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *BatchVideoOperationResponse) SetSuccessVideoIds(val []int64) {
	p.SuccessVideoIds = val
}
func (p *BatchVideoOperationResponse) SetFailedVideoErrors(val map[int64]string) {
	p.FailedVideoErrors = val
}
func (p *BatchVideoOperationResponse) SetUpdatedQuota(val *UserStorageQuota) {
	p.UpdatedQuota = val
}

func (p *BatchVideoOperationResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchVideoOperationResponse) IsSetUpdatedQuota() bool {
	return p.UpdatedQuota != nil
}

func (p *BatchVideoOperationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchVideoOperationResponse(%+v)", *p)
}

var fieldIDToName_BatchVideoOperationResponse = map[int16]string{
	1: "base",
	2: "success_video_ids",
	3: "failed_video_errors",
	4: "updated_quota",
}

type VideoTranscodingRequest struct {
	UserId             int64    `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId            int64    `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	TargetQualities    []int32  `thrift:"target_qualities,3" frugal:"3,default,list<i32>" json:"target_qualities"`
	TargetFormats      []string `thrift:"target_formats,4" frugal:"4,default,list<string>" json:"target_formats"`
	GenerateThumbnails bool     `thrift:"generate_thumbnails,5" frugal:"5,default,bool" json:"generate_thumbnails"`
	ThumbnailCount     int32    `thrift:"thumbnail_count,6" frugal:"6,default,i32" json:"thumbnail_count"`
}

func NewVideoTranscodingRequest() *VideoTranscodingRequest {
	return &VideoTranscodingRequest{}
}

func (p *VideoTranscodingRequest) InitDefault() {
}

func (p *VideoTranscodingRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoTranscodingRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoTranscodingRequest) GetTargetQualities() (v []int32) {
	return p.TargetQualities
}

func (p *VideoTranscodingRequest) GetTargetFormats() (v []string) {
	return p.TargetFormats
}

func (p *VideoTranscodingRequest) GetGenerateThumbnails() (v bool) {
	return p.GenerateThumbnails
}

func (p *VideoTranscodingRequest) GetThumbnailCount() (v int32) {
	return p.ThumbnailCount
}
func (p *VideoTranscodingRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoTranscodingRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoTranscodingRequest) SetTargetQualities(val []int32) {
	p.TargetQualities = val
}
func (p *VideoTranscodingRequest) SetTargetFormats(val []string) {
	p.TargetFormats = val
}
func (p *VideoTranscodingRequest) SetGenerateThumbnails(val bool) {
	p.GenerateThumbnails = val
}
func (p *VideoTranscodingRequest) SetThumbnailCount(val int32) {
	p.ThumbnailCount = val
}

func (p *VideoTranscodingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoTranscodingRequest(%+v)", *p)
}

var fieldIDToName_VideoTranscodingRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "target_qualities",
	4: "target_formats",
	5: "generate_thumbnails",
	6: "thumbnail_count",
}

type VideoTranscodingResponse struct {
	Base                    *base.Status     `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	TranscodingJobId        int64            `thrift:"transcoding_job_id,2" frugal:"2,default,i64" json:"transcoding_job_id"`
	JobStatus               string           `thrift:"job_status,3" frugal:"3,default,string" json:"job_status"`
	TranscodedUrls          map[int32]string `thrift:"transcoded_urls,4" frugal:"4,default,map<i32:string>" json:"transcoded_urls"`
	ThumbnailUrls           []string         `thrift:"thumbnail_urls,5" frugal:"5,default,list<string>" json:"thumbnail_urls"`
	EstimatedCompletionTime int64            `thrift:"estimated_completion_time,6" frugal:"6,default,i64" json:"estimated_completion_time"`
}

func NewVideoTranscodingResponse() *VideoTranscodingResponse {
	return &VideoTranscodingResponse{}
}

func (p *VideoTranscodingResponse) InitDefault() {
}

var VideoTranscodingResponse_Base_DEFAULT *base.Status

func (p *VideoTranscodingResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoTranscodingResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoTranscodingResponse) GetTranscodingJobId() (v int64) {
	return p.TranscodingJobId
}

func (p *VideoTranscodingResponse) GetJobStatus() (v string) {
	return p.JobStatus
}

func (p *VideoTranscodingResponse) GetTranscodedUrls() (v map[int32]string) {
	return p.TranscodedUrls
}

func (p *VideoTranscodingResponse) GetThumbnailUrls() (v []string) {
	return p.ThumbnailUrls
}

func (p *VideoTranscodingResponse) GetEstimatedCompletionTime() (v int64) {
	return p.EstimatedCompletionTime
}
func (p *VideoTranscodingResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoTranscodingResponse) SetTranscodingJobId(val int64) {
	p.TranscodingJobId = val
}
func (p *VideoTranscodingResponse) SetJobStatus(val string) {
	p.JobStatus = val
}
func (p *VideoTranscodingResponse) SetTranscodedUrls(val map[int32]string) {
	p.TranscodedUrls = val
}
func (p *VideoTranscodingResponse) SetThumbnailUrls(val []string) {
	p.ThumbnailUrls = val
}
func (p *VideoTranscodingResponse) SetEstimatedCompletionTime(val int64) {
	p.EstimatedCompletionTime = val
}

func (p *VideoTranscodingResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoTranscodingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoTranscodingResponse(%+v)", *p)
}

var fieldIDToName_VideoTranscodingResponse = map[int16]string{
	1: "base",
	2: "transcoding_job_id",
	3: "job_status",
	4: "transcoded_urls",
	5: "thumbnail_urls",
	6: "estimated_completion_time",
}

type VideoAnalyticsRequest struct {
	UserId         int64    `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoIds       []int64  `thrift:"video_ids,2" frugal:"2,default,list<i64>" json:"video_ids"`
	DateRangeStart string   `thrift:"date_range_start,3" frugal:"3,default,string" json:"date_range_start"`
	DateRangeEnd   string   `thrift:"date_range_end,4" frugal:"4,default,string" json:"date_range_end"`
	Metrics        []string `thrift:"metrics,5" frugal:"5,default,list<string>" json:"metrics"`
}

func NewVideoAnalyticsRequest() *VideoAnalyticsRequest {
	return &VideoAnalyticsRequest{}
}

func (p *VideoAnalyticsRequest) InitDefault() {
}

func (p *VideoAnalyticsRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoAnalyticsRequest) GetVideoIds() (v []int64) {
	return p.VideoIds
}

func (p *VideoAnalyticsRequest) GetDateRangeStart() (v string) {
	return p.DateRangeStart
}

func (p *VideoAnalyticsRequest) GetDateRangeEnd() (v string) {
	return p.DateRangeEnd
}

func (p *VideoAnalyticsRequest) GetMetrics() (v []string) {
	return p.Metrics
}
func (p *VideoAnalyticsRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoAnalyticsRequest) SetVideoIds(val []int64) {
	p.VideoIds = val
}
func (p *VideoAnalyticsRequest) SetDateRangeStart(val string) {
	p.DateRangeStart = val
}
func (p *VideoAnalyticsRequest) SetDateRangeEnd(val string) {
	p.DateRangeEnd = val
}
func (p *VideoAnalyticsRequest) SetMetrics(val []string) {
	p.Metrics = val
}

func (p *VideoAnalyticsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoAnalyticsRequest(%+v)", *p)
}

var fieldIDToName_VideoAnalyticsRequest = map[int16]string{
	1: "user_id",
	2: "video_ids",
	3: "date_range_start",
	4: "date_range_end",
	5: "metrics",
}

type VideoAnalyticsResponse struct {
	Base                *base.Status               `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoMetrics        map[int64]map[string]int64 `thrift:"video_metrics,2" frugal:"2,default,map<i64:map<string:i64>>" json:"video_metrics"`
	TotalMetrics        map[string]int64           `thrift:"total_metrics,3" frugal:"3,default,map<string:i64>" json:"total_metrics"`
	TopPerformingVideos []string                   `thrift:"top_performing_videos,4" frugal:"4,default,list<string>" json:"top_performing_videos"`
	ReportGeneratedAt   string                     `thrift:"report_generated_at,5" frugal:"5,default,string" json:"report_generated_at"`
}

func NewVideoAnalyticsResponse() *VideoAnalyticsResponse {
	return &VideoAnalyticsResponse{}
}

func (p *VideoAnalyticsResponse) InitDefault() {
}

var VideoAnalyticsResponse_Base_DEFAULT *base.Status

func (p *VideoAnalyticsResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoAnalyticsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoAnalyticsResponse) GetVideoMetrics() (v map[int64]map[string]int64) {
	return p.VideoMetrics
}

func (p *VideoAnalyticsResponse) GetTotalMetrics() (v map[string]int64) {
	return p.TotalMetrics
}

func (p *VideoAnalyticsResponse) GetTopPerformingVideos() (v []string) {
	return p.TopPerformingVideos
}

func (p *VideoAnalyticsResponse) GetReportGeneratedAt() (v string) {
	return p.ReportGeneratedAt
}
func (p *VideoAnalyticsResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoAnalyticsResponse) SetVideoMetrics(val map[int64]map[string]int64) {
	p.VideoMetrics = val
}
func (p *VideoAnalyticsResponse) SetTotalMetrics(val map[string]int64) {
	p.TotalMetrics = val
}
func (p *VideoAnalyticsResponse) SetTopPerformingVideos(val []string) {
	p.TopPerformingVideos = val
}
func (p *VideoAnalyticsResponse) SetReportGeneratedAt(val string) {
	p.ReportGeneratedAt = val
}

func (p *VideoAnalyticsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoAnalyticsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoAnalyticsResponse(%+v)", *p)
}

var fieldIDToName_VideoAnalyticsResponse = map[int16]string{
	1: "base",
	2: "video_metrics",
	3: "total_metrics",
	4: "top_performing_videos",
	5: "report_generated_at",
}

type VideoService interface {
	VideoPublishStartV2(ctx context.Context, req *VideoPublishStartRequestV2) (r *VideoPublishStartResponseV2, err error)

	VideoPublishUploadingV2(ctx context.Context, req *VideoPublishUploadingRequestV2) (r *VideoPublishUploadingResponseV2, err error)

	VideoPublishCompleteV2(ctx context.Context, req *VideoPublishCompleteRequestV2) (r *VideoPublishCompleteResponseV2, err error)

	VideoPublishCancelV2(ctx context.Context, req *VideoPublishCancelRequestV2) (r *VideoPublishCancelResponseV2, err error)

	GetUploadProgressV2(ctx context.Context, req *VideoPublishProgressRequestV2) (r *VideoPublishProgressResponseV2, err error)

	ResumeUploadV2(ctx context.Context, req *VideoPublishResumeRequestV2) (r *VideoPublishResumeResponseV2, err error)

	VideoFeedListV2(ctx context.Context, req *VideoFeedListRequestV2) (r *VideoFeedListResponseV2, err error)

	VideoSearchV2(ctx context.Context, req *VideoSearchRequestV2) (r *VideoSearchResponseV2, err error)

	VideoPopularV2(ctx context.Context, req *VideoPopularRequestV2) (r *VideoPopularResponseV2, err error)

	VideoInfoV2(ctx context.Context, req *VideoInfoRequestV2) (r *VideoInfoResponseV2, err error)

	VideoDeleteV2(ctx context.Context, req *VideoDeleteRequestV2) (r *VideoDeleteResponseV2, err error)

	VideoVisitV2(ctx context.Context, req *VideoVisitRequestV2) (r *VideoVisitResponseV2, err error)

	UpdateVisitCountV2(ctx context.Context, req *UpdateVisitCountRequestV2) (r *UpdateVisitCountResponseV2, err error)

	UpdateVideoCommentCountV2(ctx context.Context, req *UpdateVideoCommentCountRequestV2) (r *UpdateVideoCommentCountResponseV2, err error)

	UpdateVideoLikeCountV2(ctx context.Context, req *UpdateLikeCountRequestV2) (r *UpdateLikeCountResponseV2, err error)

	GetVideoVisitCountV2(ctx context.Context, req *GetVideoVisitCountRequestV2) (r *GetVideoVisitCountResponseV2, err error)

	StreamVideoV2(ctx context.Context, req *StreamVideoRequestV2) (r *StreamVideoResponseV2, err error)

	CreateFavoriteV2(ctx context.Context, req *CreateFavoriteRequestV2) (r *CreateFavoriteResponseV2, err error)

	GetFavoriteVideoListV2(ctx context.Context, req *GetFavoriteVideoListRequestV2) (r *GetFavoriteVideoListResponseV2, err error)

	GetFavoriteListV2(ctx context.Context, req *GetFavoriteListRequestV2) (r *GetFavoriteListResponseV2, err error)

	AddFavoriteVideoV2(ctx context.Context, req *AddFavoriteVideoRequestV2) (r *AddFavoriteVideoResponseV2, err error)

	DeleteFavoriteV2(ctx context.Context, req *DeleteFavoriteRequestV2) (r *DeleteFavoriteResponseV2, err error)

	DeleteVideoFromFavoriteV2(ctx context.Context, req *DeleteVideoFromFavoriteRequestV2) (r *DeleteVideoFromFavoriteResponseV2, err error)

	SharedVideoV2(ctx context.Context, req *SharedVideoRequestV2) (r *SharedVideoResponseV2, err error)

	RecommendVideoV2(ctx context.Context, req *RecommendVideoRequestV2) (r *RecommendVideoResponseV2, err error)

	ManageVideoHeatV2(ctx context.Context, req *VideoHeatManagementRequest) (r *VideoHeatManagementResponse, err error)

	ManageUserQuotaV2(ctx context.Context, req *UserQuotaManagementRequest) (r *UserQuotaManagementResponse, err error)

	BatchOperateVideosV2(ctx context.Context, req *BatchVideoOperationRequest) (r *BatchVideoOperationResponse, err error)

	TranscodeVideoV2(ctx context.Context, req *VideoTranscodingRequest) (r *VideoTranscodingResponse, err error)

	GetVideoAnalyticsV2(ctx context.Context, req *VideoAnalyticsRequest) (r *VideoAnalyticsResponse, err error)
}

type VideoServiceVideoPublishStartV2Args struct {
	Req *VideoPublishStartRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishStartRequestV2" json:"req"`
}

func NewVideoServiceVideoPublishStartV2Args() *VideoServiceVideoPublishStartV2Args {
	return &VideoServiceVideoPublishStartV2Args{}
}

func (p *VideoServiceVideoPublishStartV2Args) InitDefault() {
}

var VideoServiceVideoPublishStartV2Args_Req_DEFAULT *VideoPublishStartRequestV2

func (p *VideoServiceVideoPublishStartV2Args) GetReq() (v *VideoPublishStartRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishStartV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishStartV2Args) SetReq(val *VideoPublishStartRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoPublishStartV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishStartV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishStartV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishStartV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishStartV2Result struct {
	Success *VideoPublishStartResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishStartResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishStartV2Result() *VideoServiceVideoPublishStartV2Result {
	return &VideoServiceVideoPublishStartV2Result{}
}

func (p *VideoServiceVideoPublishStartV2Result) InitDefault() {
}

var VideoServiceVideoPublishStartV2Result_Success_DEFAULT *VideoPublishStartResponseV2

func (p *VideoServiceVideoPublishStartV2Result) GetSuccess() (v *VideoPublishStartResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishStartV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishStartV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishStartResponseV2)
}

func (p *VideoServiceVideoPublishStartV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishStartV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishStartV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishStartV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoPublishUploadingV2Args struct {
	Req *VideoPublishUploadingRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishUploadingRequestV2" json:"req"`
}

func NewVideoServiceVideoPublishUploadingV2Args() *VideoServiceVideoPublishUploadingV2Args {
	return &VideoServiceVideoPublishUploadingV2Args{}
}

func (p *VideoServiceVideoPublishUploadingV2Args) InitDefault() {
}

var VideoServiceVideoPublishUploadingV2Args_Req_DEFAULT *VideoPublishUploadingRequestV2

func (p *VideoServiceVideoPublishUploadingV2Args) GetReq() (v *VideoPublishUploadingRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishUploadingV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishUploadingV2Args) SetReq(val *VideoPublishUploadingRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoPublishUploadingV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishUploadingV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishUploadingV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishUploadingV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishUploadingV2Result struct {
	Success *VideoPublishUploadingResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishUploadingResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishUploadingV2Result() *VideoServiceVideoPublishUploadingV2Result {
	return &VideoServiceVideoPublishUploadingV2Result{}
}

func (p *VideoServiceVideoPublishUploadingV2Result) InitDefault() {
}

var VideoServiceVideoPublishUploadingV2Result_Success_DEFAULT *VideoPublishUploadingResponseV2

func (p *VideoServiceVideoPublishUploadingV2Result) GetSuccess() (v *VideoPublishUploadingResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishUploadingV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishUploadingV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishUploadingResponseV2)
}

func (p *VideoServiceVideoPublishUploadingV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishUploadingV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishUploadingV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishUploadingV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoPublishCompleteV2Args struct {
	Req *VideoPublishCompleteRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishCompleteRequestV2" json:"req"`
}

func NewVideoServiceVideoPublishCompleteV2Args() *VideoServiceVideoPublishCompleteV2Args {
	return &VideoServiceVideoPublishCompleteV2Args{}
}

func (p *VideoServiceVideoPublishCompleteV2Args) InitDefault() {
}

var VideoServiceVideoPublishCompleteV2Args_Req_DEFAULT *VideoPublishCompleteRequestV2

func (p *VideoServiceVideoPublishCompleteV2Args) GetReq() (v *VideoPublishCompleteRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishCompleteV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishCompleteV2Args) SetReq(val *VideoPublishCompleteRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoPublishCompleteV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishCompleteV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCompleteV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCompleteV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishCompleteV2Result struct {
	Success *VideoPublishCompleteResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishCompleteResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishCompleteV2Result() *VideoServiceVideoPublishCompleteV2Result {
	return &VideoServiceVideoPublishCompleteV2Result{}
}

func (p *VideoServiceVideoPublishCompleteV2Result) InitDefault() {
}

var VideoServiceVideoPublishCompleteV2Result_Success_DEFAULT *VideoPublishCompleteResponseV2

func (p *VideoServiceVideoPublishCompleteV2Result) GetSuccess() (v *VideoPublishCompleteResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishCompleteV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishCompleteV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishCompleteResponseV2)
}

func (p *VideoServiceVideoPublishCompleteV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishCompleteV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCompleteV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCompleteV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoPublishCancelV2Args struct {
	Req *VideoPublishCancelRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishCancelRequestV2" json:"req"`
}

func NewVideoServiceVideoPublishCancelV2Args() *VideoServiceVideoPublishCancelV2Args {
	return &VideoServiceVideoPublishCancelV2Args{}
}

func (p *VideoServiceVideoPublishCancelV2Args) InitDefault() {
}

var VideoServiceVideoPublishCancelV2Args_Req_DEFAULT *VideoPublishCancelRequestV2

func (p *VideoServiceVideoPublishCancelV2Args) GetReq() (v *VideoPublishCancelRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishCancelV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishCancelV2Args) SetReq(val *VideoPublishCancelRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoPublishCancelV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishCancelV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCancelV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCancelV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishCancelV2Result struct {
	Success *VideoPublishCancelResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishCancelResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishCancelV2Result() *VideoServiceVideoPublishCancelV2Result {
	return &VideoServiceVideoPublishCancelV2Result{}
}

func (p *VideoServiceVideoPublishCancelV2Result) InitDefault() {
}

var VideoServiceVideoPublishCancelV2Result_Success_DEFAULT *VideoPublishCancelResponseV2

func (p *VideoServiceVideoPublishCancelV2Result) GetSuccess() (v *VideoPublishCancelResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishCancelV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishCancelV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishCancelResponseV2)
}

func (p *VideoServiceVideoPublishCancelV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishCancelV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCancelV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCancelV2Result = map[int16]string{
	0: "success",
}

type VideoServiceGetUploadProgressV2Args struct {
	Req *VideoPublishProgressRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishProgressRequestV2" json:"req"`
}

func NewVideoServiceGetUploadProgressV2Args() *VideoServiceGetUploadProgressV2Args {
	return &VideoServiceGetUploadProgressV2Args{}
}

func (p *VideoServiceGetUploadProgressV2Args) InitDefault() {
}

var VideoServiceGetUploadProgressV2Args_Req_DEFAULT *VideoPublishProgressRequestV2

func (p *VideoServiceGetUploadProgressV2Args) GetReq() (v *VideoPublishProgressRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceGetUploadProgressV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetUploadProgressV2Args) SetReq(val *VideoPublishProgressRequestV2) {
	p.Req = val
}

func (p *VideoServiceGetUploadProgressV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetUploadProgressV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetUploadProgressV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceGetUploadProgressV2Args = map[int16]string{
	1: "req",
}

type VideoServiceGetUploadProgressV2Result struct {
	Success *VideoPublishProgressResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishProgressResponseV2" json:"success,omitempty"`
}

func NewVideoServiceGetUploadProgressV2Result() *VideoServiceGetUploadProgressV2Result {
	return &VideoServiceGetUploadProgressV2Result{}
}

func (p *VideoServiceGetUploadProgressV2Result) InitDefault() {
}

var VideoServiceGetUploadProgressV2Result_Success_DEFAULT *VideoPublishProgressResponseV2

func (p *VideoServiceGetUploadProgressV2Result) GetSuccess() (v *VideoPublishProgressResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceGetUploadProgressV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetUploadProgressV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishProgressResponseV2)
}

func (p *VideoServiceGetUploadProgressV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetUploadProgressV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetUploadProgressV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceGetUploadProgressV2Result = map[int16]string{
	0: "success",
}

type VideoServiceResumeUploadV2Args struct {
	Req *VideoPublishResumeRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishResumeRequestV2" json:"req"`
}

func NewVideoServiceResumeUploadV2Args() *VideoServiceResumeUploadV2Args {
	return &VideoServiceResumeUploadV2Args{}
}

func (p *VideoServiceResumeUploadV2Args) InitDefault() {
}

var VideoServiceResumeUploadV2Args_Req_DEFAULT *VideoPublishResumeRequestV2

func (p *VideoServiceResumeUploadV2Args) GetReq() (v *VideoPublishResumeRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceResumeUploadV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceResumeUploadV2Args) SetReq(val *VideoPublishResumeRequestV2) {
	p.Req = val
}

func (p *VideoServiceResumeUploadV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceResumeUploadV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceResumeUploadV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceResumeUploadV2Args = map[int16]string{
	1: "req",
}

type VideoServiceResumeUploadV2Result struct {
	Success *VideoPublishResumeResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishResumeResponseV2" json:"success,omitempty"`
}

func NewVideoServiceResumeUploadV2Result() *VideoServiceResumeUploadV2Result {
	return &VideoServiceResumeUploadV2Result{}
}

func (p *VideoServiceResumeUploadV2Result) InitDefault() {
}

var VideoServiceResumeUploadV2Result_Success_DEFAULT *VideoPublishResumeResponseV2

func (p *VideoServiceResumeUploadV2Result) GetSuccess() (v *VideoPublishResumeResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceResumeUploadV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceResumeUploadV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishResumeResponseV2)
}

func (p *VideoServiceResumeUploadV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceResumeUploadV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceResumeUploadV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceResumeUploadV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoFeedListV2Args struct {
	Req *VideoFeedListRequestV2 `thrift:"req,1" frugal:"1,default,VideoFeedListRequestV2" json:"req"`
}

func NewVideoServiceVideoFeedListV2Args() *VideoServiceVideoFeedListV2Args {
	return &VideoServiceVideoFeedListV2Args{}
}

func (p *VideoServiceVideoFeedListV2Args) InitDefault() {
}

var VideoServiceVideoFeedListV2Args_Req_DEFAULT *VideoFeedListRequestV2

func (p *VideoServiceVideoFeedListV2Args) GetReq() (v *VideoFeedListRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoFeedListV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoFeedListV2Args) SetReq(val *VideoFeedListRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoFeedListV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoFeedListV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoFeedListV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoFeedListV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoFeedListV2Result struct {
	Success *VideoFeedListResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoFeedListResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoFeedListV2Result() *VideoServiceVideoFeedListV2Result {
	return &VideoServiceVideoFeedListV2Result{}
}

func (p *VideoServiceVideoFeedListV2Result) InitDefault() {
}

var VideoServiceVideoFeedListV2Result_Success_DEFAULT *VideoFeedListResponseV2

func (p *VideoServiceVideoFeedListV2Result) GetSuccess() (v *VideoFeedListResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoFeedListV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoFeedListV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoFeedListResponseV2)
}

func (p *VideoServiceVideoFeedListV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoFeedListV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoFeedListV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoFeedListV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoSearchV2Args struct {
	Req *VideoSearchRequestV2 `thrift:"req,1" frugal:"1,default,VideoSearchRequestV2" json:"req"`
}

func NewVideoServiceVideoSearchV2Args() *VideoServiceVideoSearchV2Args {
	return &VideoServiceVideoSearchV2Args{}
}

func (p *VideoServiceVideoSearchV2Args) InitDefault() {
}

var VideoServiceVideoSearchV2Args_Req_DEFAULT *VideoSearchRequestV2

func (p *VideoServiceVideoSearchV2Args) GetReq() (v *VideoSearchRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoSearchV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoSearchV2Args) SetReq(val *VideoSearchRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoSearchV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoSearchV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSearchV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoSearchV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoSearchV2Result struct {
	Success *VideoSearchResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoSearchResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoSearchV2Result() *VideoServiceVideoSearchV2Result {
	return &VideoServiceVideoSearchV2Result{}
}

func (p *VideoServiceVideoSearchV2Result) InitDefault() {
}

var VideoServiceVideoSearchV2Result_Success_DEFAULT *VideoSearchResponseV2

func (p *VideoServiceVideoSearchV2Result) GetSuccess() (v *VideoSearchResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoSearchV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoSearchV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoSearchResponseV2)
}

func (p *VideoServiceVideoSearchV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoSearchV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSearchV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoSearchV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoPopularV2Args struct {
	Req *VideoPopularRequestV2 `thrift:"req,1" frugal:"1,default,VideoPopularRequestV2" json:"req"`
}

func NewVideoServiceVideoPopularV2Args() *VideoServiceVideoPopularV2Args {
	return &VideoServiceVideoPopularV2Args{}
}

func (p *VideoServiceVideoPopularV2Args) InitDefault() {
}

var VideoServiceVideoPopularV2Args_Req_DEFAULT *VideoPopularRequestV2

func (p *VideoServiceVideoPopularV2Args) GetReq() (v *VideoPopularRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoPopularV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPopularV2Args) SetReq(val *VideoPopularRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoPopularV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPopularV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPopularV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPopularV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoPopularV2Result struct {
	Success *VideoPopularResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPopularResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoPopularV2Result() *VideoServiceVideoPopularV2Result {
	return &VideoServiceVideoPopularV2Result{}
}

func (p *VideoServiceVideoPopularV2Result) InitDefault() {
}

var VideoServiceVideoPopularV2Result_Success_DEFAULT *VideoPopularResponseV2

func (p *VideoServiceVideoPopularV2Result) GetSuccess() (v *VideoPopularResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPopularV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPopularV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPopularResponseV2)
}

func (p *VideoServiceVideoPopularV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPopularV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPopularV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPopularV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoInfoV2Args struct {
	Req *VideoInfoRequestV2 `thrift:"req,1" frugal:"1,default,VideoInfoRequestV2" json:"req"`
}

func NewVideoServiceVideoInfoV2Args() *VideoServiceVideoInfoV2Args {
	return &VideoServiceVideoInfoV2Args{}
}

func (p *VideoServiceVideoInfoV2Args) InitDefault() {
}

var VideoServiceVideoInfoV2Args_Req_DEFAULT *VideoInfoRequestV2

func (p *VideoServiceVideoInfoV2Args) GetReq() (v *VideoInfoRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoInfoV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoInfoV2Args) SetReq(val *VideoInfoRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoInfoV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoInfoV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoInfoV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoInfoV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoInfoV2Result struct {
	Success *VideoInfoResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoInfoResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoInfoV2Result() *VideoServiceVideoInfoV2Result {
	return &VideoServiceVideoInfoV2Result{}
}

func (p *VideoServiceVideoInfoV2Result) InitDefault() {
}

var VideoServiceVideoInfoV2Result_Success_DEFAULT *VideoInfoResponseV2

func (p *VideoServiceVideoInfoV2Result) GetSuccess() (v *VideoInfoResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoInfoV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoInfoV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoInfoResponseV2)
}

func (p *VideoServiceVideoInfoV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoInfoV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoInfoV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoInfoV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoDeleteV2Args struct {
	Req *VideoDeleteRequestV2 `thrift:"req,1" frugal:"1,default,VideoDeleteRequestV2" json:"req"`
}

func NewVideoServiceVideoDeleteV2Args() *VideoServiceVideoDeleteV2Args {
	return &VideoServiceVideoDeleteV2Args{}
}

func (p *VideoServiceVideoDeleteV2Args) InitDefault() {
}

var VideoServiceVideoDeleteV2Args_Req_DEFAULT *VideoDeleteRequestV2

func (p *VideoServiceVideoDeleteV2Args) GetReq() (v *VideoDeleteRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoDeleteV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoDeleteV2Args) SetReq(val *VideoDeleteRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoDeleteV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoDeleteV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoDeleteV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoDeleteV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoDeleteV2Result struct {
	Success *VideoDeleteResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoDeleteResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoDeleteV2Result() *VideoServiceVideoDeleteV2Result {
	return &VideoServiceVideoDeleteV2Result{}
}

func (p *VideoServiceVideoDeleteV2Result) InitDefault() {
}

var VideoServiceVideoDeleteV2Result_Success_DEFAULT *VideoDeleteResponseV2

func (p *VideoServiceVideoDeleteV2Result) GetSuccess() (v *VideoDeleteResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoDeleteV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoDeleteV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoDeleteResponseV2)
}

func (p *VideoServiceVideoDeleteV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoDeleteV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoDeleteV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoDeleteV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoVisitV2Args struct {
	Req *VideoVisitRequestV2 `thrift:"req,1" frugal:"1,default,VideoVisitRequestV2" json:"req"`
}

func NewVideoServiceVideoVisitV2Args() *VideoServiceVideoVisitV2Args {
	return &VideoServiceVideoVisitV2Args{}
}

func (p *VideoServiceVideoVisitV2Args) InitDefault() {
}

var VideoServiceVideoVisitV2Args_Req_DEFAULT *VideoVisitRequestV2

func (p *VideoServiceVideoVisitV2Args) GetReq() (v *VideoVisitRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoVisitV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoVisitV2Args) SetReq(val *VideoVisitRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoVisitV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoVisitV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoVisitV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoVisitV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoVisitV2Result struct {
	Success *VideoVisitResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoVisitResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoVisitV2Result() *VideoServiceVideoVisitV2Result {
	return &VideoServiceVideoVisitV2Result{}
}

func (p *VideoServiceVideoVisitV2Result) InitDefault() {
}

var VideoServiceVideoVisitV2Result_Success_DEFAULT *VideoVisitResponseV2

func (p *VideoServiceVideoVisitV2Result) GetSuccess() (v *VideoVisitResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoVisitV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoVisitV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoVisitResponseV2)
}

func (p *VideoServiceVideoVisitV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoVisitV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoVisitV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoVisitV2Result = map[int16]string{
	0: "success",
}

type VideoServiceUpdateVisitCountV2Args struct {
	Req *UpdateVisitCountRequestV2 `thrift:"req,1" frugal:"1,default,UpdateVisitCountRequestV2" json:"req"`
}

func NewVideoServiceUpdateVisitCountV2Args() *VideoServiceUpdateVisitCountV2Args {
	return &VideoServiceUpdateVisitCountV2Args{}
}

func (p *VideoServiceUpdateVisitCountV2Args) InitDefault() {
}

var VideoServiceUpdateVisitCountV2Args_Req_DEFAULT *UpdateVisitCountRequestV2

func (p *VideoServiceUpdateVisitCountV2Args) GetReq() (v *UpdateVisitCountRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceUpdateVisitCountV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceUpdateVisitCountV2Args) SetReq(val *UpdateVisitCountRequestV2) {
	p.Req = val
}

func (p *VideoServiceUpdateVisitCountV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceUpdateVisitCountV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVisitCountV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVisitCountV2Args = map[int16]string{
	1: "req",
}

type VideoServiceUpdateVisitCountV2Result struct {
	Success *UpdateVisitCountResponseV2 `thrift:"success,0,optional" frugal:"0,optional,UpdateVisitCountResponseV2" json:"success,omitempty"`
}

func NewVideoServiceUpdateVisitCountV2Result() *VideoServiceUpdateVisitCountV2Result {
	return &VideoServiceUpdateVisitCountV2Result{}
}

func (p *VideoServiceUpdateVisitCountV2Result) InitDefault() {
}

var VideoServiceUpdateVisitCountV2Result_Success_DEFAULT *UpdateVisitCountResponseV2

func (p *VideoServiceUpdateVisitCountV2Result) GetSuccess() (v *UpdateVisitCountResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceUpdateVisitCountV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceUpdateVisitCountV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateVisitCountResponseV2)
}

func (p *VideoServiceUpdateVisitCountV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceUpdateVisitCountV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVisitCountV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVisitCountV2Result = map[int16]string{
	0: "success",
}

type VideoServiceUpdateVideoCommentCountV2Args struct {
	Req *UpdateVideoCommentCountRequestV2 `thrift:"req,1" frugal:"1,default,UpdateVideoCommentCountRequestV2" json:"req"`
}

func NewVideoServiceUpdateVideoCommentCountV2Args() *VideoServiceUpdateVideoCommentCountV2Args {
	return &VideoServiceUpdateVideoCommentCountV2Args{}
}

func (p *VideoServiceUpdateVideoCommentCountV2Args) InitDefault() {
}

var VideoServiceUpdateVideoCommentCountV2Args_Req_DEFAULT *UpdateVideoCommentCountRequestV2

func (p *VideoServiceUpdateVideoCommentCountV2Args) GetReq() (v *UpdateVideoCommentCountRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceUpdateVideoCommentCountV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceUpdateVideoCommentCountV2Args) SetReq(val *UpdateVideoCommentCountRequestV2) {
	p.Req = val
}

func (p *VideoServiceUpdateVideoCommentCountV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceUpdateVideoCommentCountV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVideoCommentCountV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVideoCommentCountV2Args = map[int16]string{
	1: "req",
}

type VideoServiceUpdateVideoCommentCountV2Result struct {
	Success *UpdateVideoCommentCountResponseV2 `thrift:"success,0,optional" frugal:"0,optional,UpdateVideoCommentCountResponseV2" json:"success,omitempty"`
}

func NewVideoServiceUpdateVideoCommentCountV2Result() *VideoServiceUpdateVideoCommentCountV2Result {
	return &VideoServiceUpdateVideoCommentCountV2Result{}
}

func (p *VideoServiceUpdateVideoCommentCountV2Result) InitDefault() {
}

var VideoServiceUpdateVideoCommentCountV2Result_Success_DEFAULT *UpdateVideoCommentCountResponseV2

func (p *VideoServiceUpdateVideoCommentCountV2Result) GetSuccess() (v *UpdateVideoCommentCountResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceUpdateVideoCommentCountV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceUpdateVideoCommentCountV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateVideoCommentCountResponseV2)
}

func (p *VideoServiceUpdateVideoCommentCountV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceUpdateVideoCommentCountV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVideoCommentCountV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVideoCommentCountV2Result = map[int16]string{
	0: "success",
}

type VideoServiceUpdateVideoLikeCountV2Args struct {
	Req *UpdateLikeCountRequestV2 `thrift:"req,1" frugal:"1,default,UpdateLikeCountRequestV2" json:"req"`
}

func NewVideoServiceUpdateVideoLikeCountV2Args() *VideoServiceUpdateVideoLikeCountV2Args {
	return &VideoServiceUpdateVideoLikeCountV2Args{}
}

func (p *VideoServiceUpdateVideoLikeCountV2Args) InitDefault() {
}

var VideoServiceUpdateVideoLikeCountV2Args_Req_DEFAULT *UpdateLikeCountRequestV2

func (p *VideoServiceUpdateVideoLikeCountV2Args) GetReq() (v *UpdateLikeCountRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceUpdateVideoLikeCountV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceUpdateVideoLikeCountV2Args) SetReq(val *UpdateLikeCountRequestV2) {
	p.Req = val
}

func (p *VideoServiceUpdateVideoLikeCountV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceUpdateVideoLikeCountV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVideoLikeCountV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVideoLikeCountV2Args = map[int16]string{
	1: "req",
}

type VideoServiceUpdateVideoLikeCountV2Result struct {
	Success *UpdateLikeCountResponseV2 `thrift:"success,0,optional" frugal:"0,optional,UpdateLikeCountResponseV2" json:"success,omitempty"`
}

func NewVideoServiceUpdateVideoLikeCountV2Result() *VideoServiceUpdateVideoLikeCountV2Result {
	return &VideoServiceUpdateVideoLikeCountV2Result{}
}

func (p *VideoServiceUpdateVideoLikeCountV2Result) InitDefault() {
}

var VideoServiceUpdateVideoLikeCountV2Result_Success_DEFAULT *UpdateLikeCountResponseV2

func (p *VideoServiceUpdateVideoLikeCountV2Result) GetSuccess() (v *UpdateLikeCountResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceUpdateVideoLikeCountV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceUpdateVideoLikeCountV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateLikeCountResponseV2)
}

func (p *VideoServiceUpdateVideoLikeCountV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceUpdateVideoLikeCountV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVideoLikeCountV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVideoLikeCountV2Result = map[int16]string{
	0: "success",
}

type VideoServiceGetVideoVisitCountV2Args struct {
	Req *GetVideoVisitCountRequestV2 `thrift:"req,1" frugal:"1,default,GetVideoVisitCountRequestV2" json:"req"`
}

func NewVideoServiceGetVideoVisitCountV2Args() *VideoServiceGetVideoVisitCountV2Args {
	return &VideoServiceGetVideoVisitCountV2Args{}
}

func (p *VideoServiceGetVideoVisitCountV2Args) InitDefault() {
}

var VideoServiceGetVideoVisitCountV2Args_Req_DEFAULT *GetVideoVisitCountRequestV2

func (p *VideoServiceGetVideoVisitCountV2Args) GetReq() (v *GetVideoVisitCountRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceGetVideoVisitCountV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetVideoVisitCountV2Args) SetReq(val *GetVideoVisitCountRequestV2) {
	p.Req = val
}

func (p *VideoServiceGetVideoVisitCountV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetVideoVisitCountV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoVisitCountV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoVisitCountV2Args = map[int16]string{
	1: "req",
}

type VideoServiceGetVideoVisitCountV2Result struct {
	Success *GetVideoVisitCountResponseV2 `thrift:"success,0,optional" frugal:"0,optional,GetVideoVisitCountResponseV2" json:"success,omitempty"`
}

func NewVideoServiceGetVideoVisitCountV2Result() *VideoServiceGetVideoVisitCountV2Result {
	return &VideoServiceGetVideoVisitCountV2Result{}
}

func (p *VideoServiceGetVideoVisitCountV2Result) InitDefault() {
}

var VideoServiceGetVideoVisitCountV2Result_Success_DEFAULT *GetVideoVisitCountResponseV2

func (p *VideoServiceGetVideoVisitCountV2Result) GetSuccess() (v *GetVideoVisitCountResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceGetVideoVisitCountV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetVideoVisitCountV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*GetVideoVisitCountResponseV2)
}

func (p *VideoServiceGetVideoVisitCountV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetVideoVisitCountV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoVisitCountV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoVisitCountV2Result = map[int16]string{
	0: "success",
}

type VideoServiceStreamVideoV2Args struct {
	Req *StreamVideoRequestV2 `thrift:"req,1" frugal:"1,default,StreamVideoRequestV2" json:"req"`
}

func NewVideoServiceStreamVideoV2Args() *VideoServiceStreamVideoV2Args {
	return &VideoServiceStreamVideoV2Args{}
}

func (p *VideoServiceStreamVideoV2Args) InitDefault() {
}

var VideoServiceStreamVideoV2Args_Req_DEFAULT *StreamVideoRequestV2

func (p *VideoServiceStreamVideoV2Args) GetReq() (v *StreamVideoRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceStreamVideoV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceStreamVideoV2Args) SetReq(val *StreamVideoRequestV2) {
	p.Req = val
}

func (p *VideoServiceStreamVideoV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceStreamVideoV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceStreamVideoV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceStreamVideoV2Args = map[int16]string{
	1: "req",
}

type VideoServiceStreamVideoV2Result struct {
	Success *StreamVideoResponseV2 `thrift:"success,0,optional" frugal:"0,optional,StreamVideoResponseV2" json:"success,omitempty"`
}

func NewVideoServiceStreamVideoV2Result() *VideoServiceStreamVideoV2Result {
	return &VideoServiceStreamVideoV2Result{}
}

func (p *VideoServiceStreamVideoV2Result) InitDefault() {
}

var VideoServiceStreamVideoV2Result_Success_DEFAULT *StreamVideoResponseV2

func (p *VideoServiceStreamVideoV2Result) GetSuccess() (v *StreamVideoResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceStreamVideoV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceStreamVideoV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*StreamVideoResponseV2)
}

func (p *VideoServiceStreamVideoV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceStreamVideoV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceStreamVideoV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceStreamVideoV2Result = map[int16]string{
	0: "success",
}

type VideoServiceCreateFavoriteV2Args struct {
	Req *CreateFavoriteRequestV2 `thrift:"req,1" frugal:"1,default,CreateFavoriteRequestV2" json:"req"`
}

func NewVideoServiceCreateFavoriteV2Args() *VideoServiceCreateFavoriteV2Args {
	return &VideoServiceCreateFavoriteV2Args{}
}

func (p *VideoServiceCreateFavoriteV2Args) InitDefault() {
}

var VideoServiceCreateFavoriteV2Args_Req_DEFAULT *CreateFavoriteRequestV2

func (p *VideoServiceCreateFavoriteV2Args) GetReq() (v *CreateFavoriteRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceCreateFavoriteV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceCreateFavoriteV2Args) SetReq(val *CreateFavoriteRequestV2) {
	p.Req = val
}

func (p *VideoServiceCreateFavoriteV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceCreateFavoriteV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceCreateFavoriteV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceCreateFavoriteV2Args = map[int16]string{
	1: "req",
}

type VideoServiceCreateFavoriteV2Result struct {
	Success *CreateFavoriteResponseV2 `thrift:"success,0,optional" frugal:"0,optional,CreateFavoriteResponseV2" json:"success,omitempty"`
}

func NewVideoServiceCreateFavoriteV2Result() *VideoServiceCreateFavoriteV2Result {
	return &VideoServiceCreateFavoriteV2Result{}
}

func (p *VideoServiceCreateFavoriteV2Result) InitDefault() {
}

var VideoServiceCreateFavoriteV2Result_Success_DEFAULT *CreateFavoriteResponseV2

func (p *VideoServiceCreateFavoriteV2Result) GetSuccess() (v *CreateFavoriteResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceCreateFavoriteV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceCreateFavoriteV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*CreateFavoriteResponseV2)
}

func (p *VideoServiceCreateFavoriteV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceCreateFavoriteV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceCreateFavoriteV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceCreateFavoriteV2Result = map[int16]string{
	0: "success",
}

type VideoServiceGetFavoriteVideoListV2Args struct {
	Req *GetFavoriteVideoListRequestV2 `thrift:"req,1" frugal:"1,default,GetFavoriteVideoListRequestV2" json:"req"`
}

func NewVideoServiceGetFavoriteVideoListV2Args() *VideoServiceGetFavoriteVideoListV2Args {
	return &VideoServiceGetFavoriteVideoListV2Args{}
}

func (p *VideoServiceGetFavoriteVideoListV2Args) InitDefault() {
}

var VideoServiceGetFavoriteVideoListV2Args_Req_DEFAULT *GetFavoriteVideoListRequestV2

func (p *VideoServiceGetFavoriteVideoListV2Args) GetReq() (v *GetFavoriteVideoListRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceGetFavoriteVideoListV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetFavoriteVideoListV2Args) SetReq(val *GetFavoriteVideoListRequestV2) {
	p.Req = val
}

func (p *VideoServiceGetFavoriteVideoListV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetFavoriteVideoListV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetFavoriteVideoListV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceGetFavoriteVideoListV2Args = map[int16]string{
	1: "req",
}

type VideoServiceGetFavoriteVideoListV2Result struct {
	Success *GetFavoriteVideoListResponseV2 `thrift:"success,0,optional" frugal:"0,optional,GetFavoriteVideoListResponseV2" json:"success,omitempty"`
}

func NewVideoServiceGetFavoriteVideoListV2Result() *VideoServiceGetFavoriteVideoListV2Result {
	return &VideoServiceGetFavoriteVideoListV2Result{}
}

func (p *VideoServiceGetFavoriteVideoListV2Result) InitDefault() {
}

var VideoServiceGetFavoriteVideoListV2Result_Success_DEFAULT *GetFavoriteVideoListResponseV2

func (p *VideoServiceGetFavoriteVideoListV2Result) GetSuccess() (v *GetFavoriteVideoListResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceGetFavoriteVideoListV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetFavoriteVideoListV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*GetFavoriteVideoListResponseV2)
}

func (p *VideoServiceGetFavoriteVideoListV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetFavoriteVideoListV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetFavoriteVideoListV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceGetFavoriteVideoListV2Result = map[int16]string{
	0: "success",
}

type VideoServiceGetFavoriteListV2Args struct {
	Req *GetFavoriteListRequestV2 `thrift:"req,1" frugal:"1,default,GetFavoriteListRequestV2" json:"req"`
}

func NewVideoServiceGetFavoriteListV2Args() *VideoServiceGetFavoriteListV2Args {
	return &VideoServiceGetFavoriteListV2Args{}
}

func (p *VideoServiceGetFavoriteListV2Args) InitDefault() {
}

var VideoServiceGetFavoriteListV2Args_Req_DEFAULT *GetFavoriteListRequestV2

func (p *VideoServiceGetFavoriteListV2Args) GetReq() (v *GetFavoriteListRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceGetFavoriteListV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetFavoriteListV2Args) SetReq(val *GetFavoriteListRequestV2) {
	p.Req = val
}

func (p *VideoServiceGetFavoriteListV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetFavoriteListV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetFavoriteListV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceGetFavoriteListV2Args = map[int16]string{
	1: "req",
}

type VideoServiceGetFavoriteListV2Result struct {
	Success *GetFavoriteListResponseV2 `thrift:"success,0,optional" frugal:"0,optional,GetFavoriteListResponseV2" json:"success,omitempty"`
}

func NewVideoServiceGetFavoriteListV2Result() *VideoServiceGetFavoriteListV2Result {
	return &VideoServiceGetFavoriteListV2Result{}
}

func (p *VideoServiceGetFavoriteListV2Result) InitDefault() {
}

var VideoServiceGetFavoriteListV2Result_Success_DEFAULT *GetFavoriteListResponseV2

func (p *VideoServiceGetFavoriteListV2Result) GetSuccess() (v *GetFavoriteListResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceGetFavoriteListV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetFavoriteListV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*GetFavoriteListResponseV2)
}

func (p *VideoServiceGetFavoriteListV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetFavoriteListV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetFavoriteListV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceGetFavoriteListV2Result = map[int16]string{
	0: "success",
}

type VideoServiceAddFavoriteVideoV2Args struct {
	Req *AddFavoriteVideoRequestV2 `thrift:"req,1" frugal:"1,default,AddFavoriteVideoRequestV2" json:"req"`
}

func NewVideoServiceAddFavoriteVideoV2Args() *VideoServiceAddFavoriteVideoV2Args {
	return &VideoServiceAddFavoriteVideoV2Args{}
}

func (p *VideoServiceAddFavoriteVideoV2Args) InitDefault() {
}

var VideoServiceAddFavoriteVideoV2Args_Req_DEFAULT *AddFavoriteVideoRequestV2

func (p *VideoServiceAddFavoriteVideoV2Args) GetReq() (v *AddFavoriteVideoRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceAddFavoriteVideoV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceAddFavoriteVideoV2Args) SetReq(val *AddFavoriteVideoRequestV2) {
	p.Req = val
}

func (p *VideoServiceAddFavoriteVideoV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceAddFavoriteVideoV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceAddFavoriteVideoV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceAddFavoriteVideoV2Args = map[int16]string{
	1: "req",
}

type VideoServiceAddFavoriteVideoV2Result struct {
	Success *AddFavoriteVideoResponseV2 `thrift:"success,0,optional" frugal:"0,optional,AddFavoriteVideoResponseV2" json:"success,omitempty"`
}

func NewVideoServiceAddFavoriteVideoV2Result() *VideoServiceAddFavoriteVideoV2Result {
	return &VideoServiceAddFavoriteVideoV2Result{}
}

func (p *VideoServiceAddFavoriteVideoV2Result) InitDefault() {
}

var VideoServiceAddFavoriteVideoV2Result_Success_DEFAULT *AddFavoriteVideoResponseV2

func (p *VideoServiceAddFavoriteVideoV2Result) GetSuccess() (v *AddFavoriteVideoResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceAddFavoriteVideoV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceAddFavoriteVideoV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*AddFavoriteVideoResponseV2)
}

func (p *VideoServiceAddFavoriteVideoV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceAddFavoriteVideoV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceAddFavoriteVideoV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceAddFavoriteVideoV2Result = map[int16]string{
	0: "success",
}

type VideoServiceDeleteFavoriteV2Args struct {
	Req *DeleteFavoriteRequestV2 `thrift:"req,1" frugal:"1,default,DeleteFavoriteRequestV2" json:"req"`
}

func NewVideoServiceDeleteFavoriteV2Args() *VideoServiceDeleteFavoriteV2Args {
	return &VideoServiceDeleteFavoriteV2Args{}
}

func (p *VideoServiceDeleteFavoriteV2Args) InitDefault() {
}

var VideoServiceDeleteFavoriteV2Args_Req_DEFAULT *DeleteFavoriteRequestV2

func (p *VideoServiceDeleteFavoriteV2Args) GetReq() (v *DeleteFavoriteRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceDeleteFavoriteV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceDeleteFavoriteV2Args) SetReq(val *DeleteFavoriteRequestV2) {
	p.Req = val
}

func (p *VideoServiceDeleteFavoriteV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceDeleteFavoriteV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteFavoriteV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteFavoriteV2Args = map[int16]string{
	1: "req",
}

type VideoServiceDeleteFavoriteV2Result struct {
	Success *DeleteFavoriteResponseV2 `thrift:"success,0,optional" frugal:"0,optional,DeleteFavoriteResponseV2" json:"success,omitempty"`
}

func NewVideoServiceDeleteFavoriteV2Result() *VideoServiceDeleteFavoriteV2Result {
	return &VideoServiceDeleteFavoriteV2Result{}
}

func (p *VideoServiceDeleteFavoriteV2Result) InitDefault() {
}

var VideoServiceDeleteFavoriteV2Result_Success_DEFAULT *DeleteFavoriteResponseV2

func (p *VideoServiceDeleteFavoriteV2Result) GetSuccess() (v *DeleteFavoriteResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceDeleteFavoriteV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceDeleteFavoriteV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteFavoriteResponseV2)
}

func (p *VideoServiceDeleteFavoriteV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceDeleteFavoriteV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteFavoriteV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteFavoriteV2Result = map[int16]string{
	0: "success",
}

type VideoServiceDeleteVideoFromFavoriteV2Args struct {
	Req *DeleteVideoFromFavoriteRequestV2 `thrift:"req,1" frugal:"1,default,DeleteVideoFromFavoriteRequestV2" json:"req"`
}

func NewVideoServiceDeleteVideoFromFavoriteV2Args() *VideoServiceDeleteVideoFromFavoriteV2Args {
	return &VideoServiceDeleteVideoFromFavoriteV2Args{}
}

func (p *VideoServiceDeleteVideoFromFavoriteV2Args) InitDefault() {
}

var VideoServiceDeleteVideoFromFavoriteV2Args_Req_DEFAULT *DeleteVideoFromFavoriteRequestV2

func (p *VideoServiceDeleteVideoFromFavoriteV2Args) GetReq() (v *DeleteVideoFromFavoriteRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceDeleteVideoFromFavoriteV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceDeleteVideoFromFavoriteV2Args) SetReq(val *DeleteVideoFromFavoriteRequestV2) {
	p.Req = val
}

func (p *VideoServiceDeleteVideoFromFavoriteV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceDeleteVideoFromFavoriteV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteVideoFromFavoriteV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteVideoFromFavoriteV2Args = map[int16]string{
	1: "req",
}

type VideoServiceDeleteVideoFromFavoriteV2Result struct {
	Success *DeleteVideoFromFavoriteResponseV2 `thrift:"success,0,optional" frugal:"0,optional,DeleteVideoFromFavoriteResponseV2" json:"success,omitempty"`
}

func NewVideoServiceDeleteVideoFromFavoriteV2Result() *VideoServiceDeleteVideoFromFavoriteV2Result {
	return &VideoServiceDeleteVideoFromFavoriteV2Result{}
}

func (p *VideoServiceDeleteVideoFromFavoriteV2Result) InitDefault() {
}

var VideoServiceDeleteVideoFromFavoriteV2Result_Success_DEFAULT *DeleteVideoFromFavoriteResponseV2

func (p *VideoServiceDeleteVideoFromFavoriteV2Result) GetSuccess() (v *DeleteVideoFromFavoriteResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceDeleteVideoFromFavoriteV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceDeleteVideoFromFavoriteV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteVideoFromFavoriteResponseV2)
}

func (p *VideoServiceDeleteVideoFromFavoriteV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceDeleteVideoFromFavoriteV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteVideoFromFavoriteV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteVideoFromFavoriteV2Result = map[int16]string{
	0: "success",
}

type VideoServiceSharedVideoV2Args struct {
	Req *SharedVideoRequestV2 `thrift:"req,1" frugal:"1,default,SharedVideoRequestV2" json:"req"`
}

func NewVideoServiceSharedVideoV2Args() *VideoServiceSharedVideoV2Args {
	return &VideoServiceSharedVideoV2Args{}
}

func (p *VideoServiceSharedVideoV2Args) InitDefault() {
}

var VideoServiceSharedVideoV2Args_Req_DEFAULT *SharedVideoRequestV2

func (p *VideoServiceSharedVideoV2Args) GetReq() (v *SharedVideoRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceSharedVideoV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceSharedVideoV2Args) SetReq(val *SharedVideoRequestV2) {
	p.Req = val
}

func (p *VideoServiceSharedVideoV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceSharedVideoV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSharedVideoV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceSharedVideoV2Args = map[int16]string{
	1: "req",
}

type VideoServiceSharedVideoV2Result struct {
	Success *SharedVideoResponseV2 `thrift:"success,0,optional" frugal:"0,optional,SharedVideoResponseV2" json:"success,omitempty"`
}

func NewVideoServiceSharedVideoV2Result() *VideoServiceSharedVideoV2Result {
	return &VideoServiceSharedVideoV2Result{}
}

func (p *VideoServiceSharedVideoV2Result) InitDefault() {
}

var VideoServiceSharedVideoV2Result_Success_DEFAULT *SharedVideoResponseV2

func (p *VideoServiceSharedVideoV2Result) GetSuccess() (v *SharedVideoResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceSharedVideoV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceSharedVideoV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*SharedVideoResponseV2)
}

func (p *VideoServiceSharedVideoV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceSharedVideoV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSharedVideoV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceSharedVideoV2Result = map[int16]string{
	0: "success",
}

type VideoServiceRecommendVideoV2Args struct {
	Req *RecommendVideoRequestV2 `thrift:"req,1" frugal:"1,default,RecommendVideoRequestV2" json:"req"`
}

func NewVideoServiceRecommendVideoV2Args() *VideoServiceRecommendVideoV2Args {
	return &VideoServiceRecommendVideoV2Args{}
}

func (p *VideoServiceRecommendVideoV2Args) InitDefault() {
}

var VideoServiceRecommendVideoV2Args_Req_DEFAULT *RecommendVideoRequestV2

func (p *VideoServiceRecommendVideoV2Args) GetReq() (v *RecommendVideoRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceRecommendVideoV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceRecommendVideoV2Args) SetReq(val *RecommendVideoRequestV2) {
	p.Req = val
}

func (p *VideoServiceRecommendVideoV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceRecommendVideoV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceRecommendVideoV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceRecommendVideoV2Args = map[int16]string{
	1: "req",
}

type VideoServiceRecommendVideoV2Result struct {
	Success *RecommendVideoResponseV2 `thrift:"success,0,optional" frugal:"0,optional,RecommendVideoResponseV2" json:"success,omitempty"`
}

func NewVideoServiceRecommendVideoV2Result() *VideoServiceRecommendVideoV2Result {
	return &VideoServiceRecommendVideoV2Result{}
}

func (p *VideoServiceRecommendVideoV2Result) InitDefault() {
}

var VideoServiceRecommendVideoV2Result_Success_DEFAULT *RecommendVideoResponseV2

func (p *VideoServiceRecommendVideoV2Result) GetSuccess() (v *RecommendVideoResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceRecommendVideoV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceRecommendVideoV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*RecommendVideoResponseV2)
}

func (p *VideoServiceRecommendVideoV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceRecommendVideoV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceRecommendVideoV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceRecommendVideoV2Result = map[int16]string{
	0: "success",
}

type VideoServiceManageVideoHeatV2Args struct {
	Req *VideoHeatManagementRequest `thrift:"req,1" frugal:"1,default,VideoHeatManagementRequest" json:"req"`
}

func NewVideoServiceManageVideoHeatV2Args() *VideoServiceManageVideoHeatV2Args {
	return &VideoServiceManageVideoHeatV2Args{}
}

func (p *VideoServiceManageVideoHeatV2Args) InitDefault() {
}

var VideoServiceManageVideoHeatV2Args_Req_DEFAULT *VideoHeatManagementRequest

func (p *VideoServiceManageVideoHeatV2Args) GetReq() (v *VideoHeatManagementRequest) {
	if !p.IsSetReq() {
		return VideoServiceManageVideoHeatV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceManageVideoHeatV2Args) SetReq(val *VideoHeatManagementRequest) {
	p.Req = val
}

func (p *VideoServiceManageVideoHeatV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceManageVideoHeatV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceManageVideoHeatV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceManageVideoHeatV2Args = map[int16]string{
	1: "req",
}

type VideoServiceManageVideoHeatV2Result struct {
	Success *VideoHeatManagementResponse `thrift:"success,0,optional" frugal:"0,optional,VideoHeatManagementResponse" json:"success,omitempty"`
}

func NewVideoServiceManageVideoHeatV2Result() *VideoServiceManageVideoHeatV2Result {
	return &VideoServiceManageVideoHeatV2Result{}
}

func (p *VideoServiceManageVideoHeatV2Result) InitDefault() {
}

var VideoServiceManageVideoHeatV2Result_Success_DEFAULT *VideoHeatManagementResponse

func (p *VideoServiceManageVideoHeatV2Result) GetSuccess() (v *VideoHeatManagementResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceManageVideoHeatV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceManageVideoHeatV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoHeatManagementResponse)
}

func (p *VideoServiceManageVideoHeatV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceManageVideoHeatV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceManageVideoHeatV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceManageVideoHeatV2Result = map[int16]string{
	0: "success",
}

type VideoServiceManageUserQuotaV2Args struct {
	Req *UserQuotaManagementRequest `thrift:"req,1" frugal:"1,default,UserQuotaManagementRequest" json:"req"`
}

func NewVideoServiceManageUserQuotaV2Args() *VideoServiceManageUserQuotaV2Args {
	return &VideoServiceManageUserQuotaV2Args{}
}

func (p *VideoServiceManageUserQuotaV2Args) InitDefault() {
}

var VideoServiceManageUserQuotaV2Args_Req_DEFAULT *UserQuotaManagementRequest

func (p *VideoServiceManageUserQuotaV2Args) GetReq() (v *UserQuotaManagementRequest) {
	if !p.IsSetReq() {
		return VideoServiceManageUserQuotaV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceManageUserQuotaV2Args) SetReq(val *UserQuotaManagementRequest) {
	p.Req = val
}

func (p *VideoServiceManageUserQuotaV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceManageUserQuotaV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceManageUserQuotaV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceManageUserQuotaV2Args = map[int16]string{
	1: "req",
}

type VideoServiceManageUserQuotaV2Result struct {
	Success *UserQuotaManagementResponse `thrift:"success,0,optional" frugal:"0,optional,UserQuotaManagementResponse" json:"success,omitempty"`
}

func NewVideoServiceManageUserQuotaV2Result() *VideoServiceManageUserQuotaV2Result {
	return &VideoServiceManageUserQuotaV2Result{}
}

func (p *VideoServiceManageUserQuotaV2Result) InitDefault() {
}

var VideoServiceManageUserQuotaV2Result_Success_DEFAULT *UserQuotaManagementResponse

func (p *VideoServiceManageUserQuotaV2Result) GetSuccess() (v *UserQuotaManagementResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceManageUserQuotaV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceManageUserQuotaV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*UserQuotaManagementResponse)
}

func (p *VideoServiceManageUserQuotaV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceManageUserQuotaV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceManageUserQuotaV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceManageUserQuotaV2Result = map[int16]string{
	0: "success",
}

type VideoServiceBatchOperateVideosV2Args struct {
	Req *BatchVideoOperationRequest `thrift:"req,1" frugal:"1,default,BatchVideoOperationRequest" json:"req"`
}

func NewVideoServiceBatchOperateVideosV2Args() *VideoServiceBatchOperateVideosV2Args {
	return &VideoServiceBatchOperateVideosV2Args{}
}

func (p *VideoServiceBatchOperateVideosV2Args) InitDefault() {
}

var VideoServiceBatchOperateVideosV2Args_Req_DEFAULT *BatchVideoOperationRequest

func (p *VideoServiceBatchOperateVideosV2Args) GetReq() (v *BatchVideoOperationRequest) {
	if !p.IsSetReq() {
		return VideoServiceBatchOperateVideosV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceBatchOperateVideosV2Args) SetReq(val *BatchVideoOperationRequest) {
	p.Req = val
}

func (p *VideoServiceBatchOperateVideosV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceBatchOperateVideosV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceBatchOperateVideosV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceBatchOperateVideosV2Args = map[int16]string{
	1: "req",
}

type VideoServiceBatchOperateVideosV2Result struct {
	Success *BatchVideoOperationResponse `thrift:"success,0,optional" frugal:"0,optional,BatchVideoOperationResponse" json:"success,omitempty"`
}

func NewVideoServiceBatchOperateVideosV2Result() *VideoServiceBatchOperateVideosV2Result {
	return &VideoServiceBatchOperateVideosV2Result{}
}

func (p *VideoServiceBatchOperateVideosV2Result) InitDefault() {
}

var VideoServiceBatchOperateVideosV2Result_Success_DEFAULT *BatchVideoOperationResponse

func (p *VideoServiceBatchOperateVideosV2Result) GetSuccess() (v *BatchVideoOperationResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceBatchOperateVideosV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceBatchOperateVideosV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*BatchVideoOperationResponse)
}

func (p *VideoServiceBatchOperateVideosV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceBatchOperateVideosV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceBatchOperateVideosV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceBatchOperateVideosV2Result = map[int16]string{
	0: "success",
}

type VideoServiceTranscodeVideoV2Args struct {
	Req *VideoTranscodingRequest `thrift:"req,1" frugal:"1,default,VideoTranscodingRequest" json:"req"`
}

func NewVideoServiceTranscodeVideoV2Args() *VideoServiceTranscodeVideoV2Args {
	return &VideoServiceTranscodeVideoV2Args{}
}

func (p *VideoServiceTranscodeVideoV2Args) InitDefault() {
}

var VideoServiceTranscodeVideoV2Args_Req_DEFAULT *VideoTranscodingRequest

func (p *VideoServiceTranscodeVideoV2Args) GetReq() (v *VideoTranscodingRequest) {
	if !p.IsSetReq() {
		return VideoServiceTranscodeVideoV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceTranscodeVideoV2Args) SetReq(val *VideoTranscodingRequest) {
	p.Req = val
}

func (p *VideoServiceTranscodeVideoV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceTranscodeVideoV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceTranscodeVideoV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceTranscodeVideoV2Args = map[int16]string{
	1: "req",
}

type VideoServiceTranscodeVideoV2Result struct {
	Success *VideoTranscodingResponse `thrift:"success,0,optional" frugal:"0,optional,VideoTranscodingResponse" json:"success,omitempty"`
}

func NewVideoServiceTranscodeVideoV2Result() *VideoServiceTranscodeVideoV2Result {
	return &VideoServiceTranscodeVideoV2Result{}
}

func (p *VideoServiceTranscodeVideoV2Result) InitDefault() {
}

var VideoServiceTranscodeVideoV2Result_Success_DEFAULT *VideoTranscodingResponse

func (p *VideoServiceTranscodeVideoV2Result) GetSuccess() (v *VideoTranscodingResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceTranscodeVideoV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceTranscodeVideoV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoTranscodingResponse)
}

func (p *VideoServiceTranscodeVideoV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceTranscodeVideoV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceTranscodeVideoV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceTranscodeVideoV2Result = map[int16]string{
	0: "success",
}

type VideoServiceGetVideoAnalyticsV2Args struct {
	Req *VideoAnalyticsRequest `thrift:"req,1" frugal:"1,default,VideoAnalyticsRequest" json:"req"`
}

func NewVideoServiceGetVideoAnalyticsV2Args() *VideoServiceGetVideoAnalyticsV2Args {
	return &VideoServiceGetVideoAnalyticsV2Args{}
}

func (p *VideoServiceGetVideoAnalyticsV2Args) InitDefault() {
}

var VideoServiceGetVideoAnalyticsV2Args_Req_DEFAULT *VideoAnalyticsRequest

func (p *VideoServiceGetVideoAnalyticsV2Args) GetReq() (v *VideoAnalyticsRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetVideoAnalyticsV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetVideoAnalyticsV2Args) SetReq(val *VideoAnalyticsRequest) {
	p.Req = val
}

func (p *VideoServiceGetVideoAnalyticsV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetVideoAnalyticsV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoAnalyticsV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoAnalyticsV2Args = map[int16]string{
	1: "req",
}

type VideoServiceGetVideoAnalyticsV2Result struct {
	Success *VideoAnalyticsResponse `thrift:"success,0,optional" frugal:"0,optional,VideoAnalyticsResponse" json:"success,omitempty"`
}

func NewVideoServiceGetVideoAnalyticsV2Result() *VideoServiceGetVideoAnalyticsV2Result {
	return &VideoServiceGetVideoAnalyticsV2Result{}
}

func (p *VideoServiceGetVideoAnalyticsV2Result) InitDefault() {
}

var VideoServiceGetVideoAnalyticsV2Result_Success_DEFAULT *VideoAnalyticsResponse

func (p *VideoServiceGetVideoAnalyticsV2Result) GetSuccess() (v *VideoAnalyticsResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetVideoAnalyticsV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetVideoAnalyticsV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoAnalyticsResponse)
}

func (p *VideoServiceGetVideoAnalyticsV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetVideoAnalyticsV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoAnalyticsV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoAnalyticsV2Result = map[int16]string{
	0: "success",
}
