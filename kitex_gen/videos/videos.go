// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package videos

import (
	"HuaTug.com/kitex_gen/base"
	"context"
	"fmt"
)

type VideoResolution struct {
	Width  int32 `thrift:"width,1" frugal:"1,default,i32" json:"width"`
	Height int32 `thrift:"height,2" frugal:"2,default,i32" json:"height"`
}

func NewVideoResolution() *VideoResolution {
	return &VideoResolution{}
}

func (p *VideoResolution) InitDefault() {
}

func (p *VideoResolution) GetWidth() (v int32) {
	return p.Width
}

func (p *VideoResolution) GetHeight() (v int32) {
	return p.Height
}
func (p *VideoResolution) SetWidth(val int32) {
	p.Width = val
}
func (p *VideoResolution) SetHeight(val int32) {
	p.Height = val
}

func (p *VideoResolution) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoResolution(%+v)", *p)
}

var fieldIDToName_VideoResolution = map[int16]string{
	1: "width",
	2: "height",
}

type UserStorageQuota struct {
	TotalQuotaBytes   int64  `thrift:"total_quota_bytes,1" frugal:"1,default,i64" json:"total_quota_bytes"`
	UsedQuotaBytes    int64  `thrift:"used_quota_bytes,2" frugal:"2,default,i64" json:"used_quota_bytes"`
	VideoCount        int64  `thrift:"video_count,3" frugal:"3,default,i64" json:"video_count"`
	QuotaLevel        string `thrift:"quota_level,4" frugal:"4,default,string" json:"quota_level"`
	MaxVideoSizeBytes int64  `thrift:"max_video_size_bytes,5" frugal:"5,default,i64" json:"max_video_size_bytes"`
	MaxVideoCount     int32  `thrift:"max_video_count,6" frugal:"6,default,i32" json:"max_video_count"`
}

func NewUserStorageQuota() *UserStorageQuota {
	return &UserStorageQuota{}
}

func (p *UserStorageQuota) InitDefault() {
}

func (p *UserStorageQuota) GetTotalQuotaBytes() (v int64) {
	return p.TotalQuotaBytes
}

func (p *UserStorageQuota) GetUsedQuotaBytes() (v int64) {
	return p.UsedQuotaBytes
}

func (p *UserStorageQuota) GetVideoCount() (v int64) {
	return p.VideoCount
}

func (p *UserStorageQuota) GetQuotaLevel() (v string) {
	return p.QuotaLevel
}

func (p *UserStorageQuota) GetMaxVideoSizeBytes() (v int64) {
	return p.MaxVideoSizeBytes
}

func (p *UserStorageQuota) GetMaxVideoCount() (v int32) {
	return p.MaxVideoCount
}
func (p *UserStorageQuota) SetTotalQuotaBytes(val int64) {
	p.TotalQuotaBytes = val
}
func (p *UserStorageQuota) SetUsedQuotaBytes(val int64) {
	p.UsedQuotaBytes = val
}
func (p *UserStorageQuota) SetVideoCount(val int64) {
	p.VideoCount = val
}
func (p *UserStorageQuota) SetQuotaLevel(val string) {
	p.QuotaLevel = val
}
func (p *UserStorageQuota) SetMaxVideoSizeBytes(val int64) {
	p.MaxVideoSizeBytes = val
}
func (p *UserStorageQuota) SetMaxVideoCount(val int32) {
	p.MaxVideoCount = val
}

func (p *UserStorageQuota) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserStorageQuota(%+v)", *p)
}

var fieldIDToName_UserStorageQuota = map[int16]string{
	1: "total_quota_bytes",
	2: "used_quota_bytes",
	3: "video_count",
	4: "quota_level",
	5: "max_video_size_bytes",
	6: "max_video_count",
}

type FeedServiceRequest struct {
	LastTime string `thrift:"last_time,1" frugal:"1,default,string" json:"last_time"`
}

func NewFeedServiceRequest() *FeedServiceRequest {
	return &FeedServiceRequest{}
}

func (p *FeedServiceRequest) InitDefault() {
}

func (p *FeedServiceRequest) GetLastTime() (v string) {
	return p.LastTime
}
func (p *FeedServiceRequest) SetLastTime(val string) {
	p.LastTime = val
}

func (p *FeedServiceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedServiceRequest(%+v)", *p)
}

var fieldIDToName_FeedServiceRequest = map[int16]string{
	1: "last_time",
}

type FeedServiceResponse struct {
	Base      *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoList []*base.Video `thrift:"video_list,2" frugal:"2,default,list<base.Video>" json:"video_list"`
}

func NewFeedServiceResponse() *FeedServiceResponse {
	return &FeedServiceResponse{}
}

func (p *FeedServiceResponse) InitDefault() {
}

var FeedServiceResponse_Base_DEFAULT *base.Status

func (p *FeedServiceResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return FeedServiceResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *FeedServiceResponse) GetVideoList() (v []*base.Video) {
	return p.VideoList
}
func (p *FeedServiceResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *FeedServiceResponse) SetVideoList(val []*base.Video) {
	p.VideoList = val
}

func (p *FeedServiceResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *FeedServiceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedServiceResponse(%+v)", *p)
}

var fieldIDToName_FeedServiceResponse = map[int16]string{
	1: "base",
	2: "video_list",
}

type VideoPublishStartRequest struct {
	UserId           int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Title            string `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Description      string `thrift:"description,3" frugal:"3,default,string" json:"description"`
	LabName          string `thrift:"lab_name,4" frugal:"4,default,string" json:"lab_name"`
	Category         string `thrift:"category,5" frugal:"5,default,string" json:"category"`
	Open             int64  `thrift:"open,6" frugal:"6,default,i64" json:"open"`
	ChunkTotalNumber int64  `thrift:"chunk_total_number,7" frugal:"7,default,i64" json:"chunk_total_number"`
}

func NewVideoPublishStartRequest() *VideoPublishStartRequest {
	return &VideoPublishStartRequest{}
}

func (p *VideoPublishStartRequest) InitDefault() {
}

func (p *VideoPublishStartRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishStartRequest) GetTitle() (v string) {
	return p.Title
}

func (p *VideoPublishStartRequest) GetDescription() (v string) {
	return p.Description
}

func (p *VideoPublishStartRequest) GetLabName() (v string) {
	return p.LabName
}

func (p *VideoPublishStartRequest) GetCategory() (v string) {
	return p.Category
}

func (p *VideoPublishStartRequest) GetOpen() (v int64) {
	return p.Open
}

func (p *VideoPublishStartRequest) GetChunkTotalNumber() (v int64) {
	return p.ChunkTotalNumber
}
func (p *VideoPublishStartRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishStartRequest) SetTitle(val string) {
	p.Title = val
}
func (p *VideoPublishStartRequest) SetDescription(val string) {
	p.Description = val
}
func (p *VideoPublishStartRequest) SetLabName(val string) {
	p.LabName = val
}
func (p *VideoPublishStartRequest) SetCategory(val string) {
	p.Category = val
}
func (p *VideoPublishStartRequest) SetOpen(val int64) {
	p.Open = val
}
func (p *VideoPublishStartRequest) SetChunkTotalNumber(val int64) {
	p.ChunkTotalNumber = val
}

func (p *VideoPublishStartRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishStartRequest(%+v)", *p)
}

var fieldIDToName_VideoPublishStartRequest = map[int16]string{
	1: "user_id",
	2: "title",
	3: "description",
	4: "lab_name",
	5: "category",
	6: "open",
	7: "chunk_total_number",
}

type VideoPublishStartResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Uuid string       `thrift:"uuid,2" frugal:"2,default,string" json:"uuid"`
}

func NewVideoPublishStartResponse() *VideoPublishStartResponse {
	return &VideoPublishStartResponse{}
}

func (p *VideoPublishStartResponse) InitDefault() {
}

var VideoPublishStartResponse_Base_DEFAULT *base.Status

func (p *VideoPublishStartResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishStartResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishStartResponse) GetUuid() (v string) {
	return p.Uuid
}
func (p *VideoPublishStartResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishStartResponse) SetUuid(val string) {
	p.Uuid = val
}

func (p *VideoPublishStartResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishStartResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishStartResponse(%+v)", *p)
}

var fieldIDToName_VideoPublishStartResponse = map[int16]string{
	1: "base",
	2: "uuid",
}

type VideoPublishUploadingRequest struct {
	UserId      int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Uuid        string `thrift:"uuid,2" frugal:"2,default,string" json:"uuid"`
	Data        []byte `thrift:"data,3" frugal:"3,default,binary" json:"data"`
	Md5         string `thrift:"md5,4" frugal:"4,default,string" json:"md5"`
	IsM3u8      bool   `thrift:"is_m3u8,5" frugal:"5,default,bool" json:"is_m3u8"`
	Filename    string `thrift:"filename,6" frugal:"6,default,string" json:"filename"`
	ChunkNumber int64  `thrift:"chunk_number,7" frugal:"7,default,i64" json:"chunk_number"`
}

func NewVideoPublishUploadingRequest() *VideoPublishUploadingRequest {
	return &VideoPublishUploadingRequest{}
}

func (p *VideoPublishUploadingRequest) InitDefault() {
}

func (p *VideoPublishUploadingRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishUploadingRequest) GetUuid() (v string) {
	return p.Uuid
}

func (p *VideoPublishUploadingRequest) GetData() (v []byte) {
	return p.Data
}

func (p *VideoPublishUploadingRequest) GetMd5() (v string) {
	return p.Md5
}

func (p *VideoPublishUploadingRequest) GetIsM3u8() (v bool) {
	return p.IsM3u8
}

func (p *VideoPublishUploadingRequest) GetFilename() (v string) {
	return p.Filename
}

func (p *VideoPublishUploadingRequest) GetChunkNumber() (v int64) {
	return p.ChunkNumber
}
func (p *VideoPublishUploadingRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishUploadingRequest) SetUuid(val string) {
	p.Uuid = val
}
func (p *VideoPublishUploadingRequest) SetData(val []byte) {
	p.Data = val
}
func (p *VideoPublishUploadingRequest) SetMd5(val string) {
	p.Md5 = val
}
func (p *VideoPublishUploadingRequest) SetIsM3u8(val bool) {
	p.IsM3u8 = val
}
func (p *VideoPublishUploadingRequest) SetFilename(val string) {
	p.Filename = val
}
func (p *VideoPublishUploadingRequest) SetChunkNumber(val int64) {
	p.ChunkNumber = val
}

func (p *VideoPublishUploadingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishUploadingRequest(%+v)", *p)
}

var fieldIDToName_VideoPublishUploadingRequest = map[int16]string{
	1: "user_id",
	2: "uuid",
	3: "data",
	4: "md5",
	5: "is_m3u8",
	6: "filename",
	7: "chunk_number",
}

type VideoPublishUploadingResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewVideoPublishUploadingResponse() *VideoPublishUploadingResponse {
	return &VideoPublishUploadingResponse{}
}

func (p *VideoPublishUploadingResponse) InitDefault() {
}

var VideoPublishUploadingResponse_Base_DEFAULT *base.Status

func (p *VideoPublishUploadingResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishUploadingResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *VideoPublishUploadingResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *VideoPublishUploadingResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishUploadingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishUploadingResponse(%+v)", *p)
}

var fieldIDToName_VideoPublishUploadingResponse = map[int16]string{
	1: "base",
}

type VideoPublishCompleteRequest struct {
	UserId int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Uuid   string `thrift:"uuid,2" frugal:"2,default,string" json:"uuid"`
}

func NewVideoPublishCompleteRequest() *VideoPublishCompleteRequest {
	return &VideoPublishCompleteRequest{}
}

func (p *VideoPublishCompleteRequest) InitDefault() {
}

func (p *VideoPublishCompleteRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishCompleteRequest) GetUuid() (v string) {
	return p.Uuid
}
func (p *VideoPublishCompleteRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishCompleteRequest) SetUuid(val string) {
	p.Uuid = val
}

func (p *VideoPublishCompleteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCompleteRequest(%+v)", *p)
}

var fieldIDToName_VideoPublishCompleteRequest = map[int16]string{
	1: "user_id",
	2: "uuid",
}

type VideoPublishCompleteResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewVideoPublishCompleteResponse() *VideoPublishCompleteResponse {
	return &VideoPublishCompleteResponse{}
}

func (p *VideoPublishCompleteResponse) InitDefault() {
}

var VideoPublishCompleteResponse_Base_DEFAULT *base.Status

func (p *VideoPublishCompleteResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishCompleteResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *VideoPublishCompleteResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *VideoPublishCompleteResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishCompleteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCompleteResponse(%+v)", *p)
}

var fieldIDToName_VideoPublishCompleteResponse = map[int16]string{
	1: "base",
}

type VideoPublishCancleRequest struct {
	UserId int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Uuid   string `thrift:"uuid,2" frugal:"2,default,string" json:"uuid"`
}

func NewVideoPublishCancleRequest() *VideoPublishCancleRequest {
	return &VideoPublishCancleRequest{}
}

func (p *VideoPublishCancleRequest) InitDefault() {
}

func (p *VideoPublishCancleRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishCancleRequest) GetUuid() (v string) {
	return p.Uuid
}
func (p *VideoPublishCancleRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishCancleRequest) SetUuid(val string) {
	p.Uuid = val
}

func (p *VideoPublishCancleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCancleRequest(%+v)", *p)
}

var fieldIDToName_VideoPublishCancleRequest = map[int16]string{
	1: "user_id",
	2: "uuid",
}

type VideoPublishCancleResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewVideoPublishCancleResponse() *VideoPublishCancleResponse {
	return &VideoPublishCancleResponse{}
}

func (p *VideoPublishCancleResponse) InitDefault() {
}

var VideoPublishCancleResponse_Base_DEFAULT *base.Status

func (p *VideoPublishCancleResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishCancleResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *VideoPublishCancleResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *VideoPublishCancleResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishCancleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCancleResponse(%+v)", *p)
}

var fieldIDToName_VideoPublishCancleResponse = map[int16]string{
	1: "base",
}

type VideoPublishStartRequestV2 struct {
	UserId              int64            `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Title               string           `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Description         string           `thrift:"description,3" frugal:"3,default,string" json:"description"`
	Tags                []string         `thrift:"tags,4" frugal:"4,default,list<string>" json:"tags"`
	Category            string           `thrift:"category,5" frugal:"5,default,string" json:"category"`
	Privacy             string           `thrift:"privacy,6" frugal:"6,default,string" json:"privacy"`
	TotalFileSize       int64            `thrift:"total_file_size,7" frugal:"7,default,i64" json:"total_file_size"`
	EstimatedDuration   int64            `thrift:"estimated_duration,8" frugal:"8,default,i64" json:"estimated_duration"`
	EstimatedResolution *VideoResolution `thrift:"estimated_resolution,9" frugal:"9,default,VideoResolution" json:"estimated_resolution"`
	ChunkTotalNumber    int32            `thrift:"chunk_total_number,10" frugal:"10,default,i32" json:"chunk_total_number"`
	ChunkSize           int64            `thrift:"chunk_size,11" frugal:"11,default,i64" json:"chunk_size"`
	OriginalFilename    string           `thrift:"original_filename,12" frugal:"12,default,string" json:"original_filename"`
	ContentType         string           `thrift:"content_type,13" frugal:"13,default,string" json:"content_type"`
	UploadSessionExpire string           `thrift:"upload_session_expire,14" frugal:"14,default,string" json:"upload_session_expire"`
}

func NewVideoPublishStartRequestV2() *VideoPublishStartRequestV2 {
	return &VideoPublishStartRequestV2{}
}

func (p *VideoPublishStartRequestV2) InitDefault() {
}

func (p *VideoPublishStartRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishStartRequestV2) GetTitle() (v string) {
	return p.Title
}

func (p *VideoPublishStartRequestV2) GetDescription() (v string) {
	return p.Description
}

func (p *VideoPublishStartRequestV2) GetTags() (v []string) {
	return p.Tags
}

func (p *VideoPublishStartRequestV2) GetCategory() (v string) {
	return p.Category
}

func (p *VideoPublishStartRequestV2) GetPrivacy() (v string) {
	return p.Privacy
}

func (p *VideoPublishStartRequestV2) GetTotalFileSize() (v int64) {
	return p.TotalFileSize
}

func (p *VideoPublishStartRequestV2) GetEstimatedDuration() (v int64) {
	return p.EstimatedDuration
}

var VideoPublishStartRequestV2_EstimatedResolution_DEFAULT *VideoResolution

func (p *VideoPublishStartRequestV2) GetEstimatedResolution() (v *VideoResolution) {
	if !p.IsSetEstimatedResolution() {
		return VideoPublishStartRequestV2_EstimatedResolution_DEFAULT
	}
	return p.EstimatedResolution
}

func (p *VideoPublishStartRequestV2) GetChunkTotalNumber() (v int32) {
	return p.ChunkTotalNumber
}

func (p *VideoPublishStartRequestV2) GetChunkSize() (v int64) {
	return p.ChunkSize
}

func (p *VideoPublishStartRequestV2) GetOriginalFilename() (v string) {
	return p.OriginalFilename
}

func (p *VideoPublishStartRequestV2) GetContentType() (v string) {
	return p.ContentType
}

func (p *VideoPublishStartRequestV2) GetUploadSessionExpire() (v string) {
	return p.UploadSessionExpire
}
func (p *VideoPublishStartRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishStartRequestV2) SetTitle(val string) {
	p.Title = val
}
func (p *VideoPublishStartRequestV2) SetDescription(val string) {
	p.Description = val
}
func (p *VideoPublishStartRequestV2) SetTags(val []string) {
	p.Tags = val
}
func (p *VideoPublishStartRequestV2) SetCategory(val string) {
	p.Category = val
}
func (p *VideoPublishStartRequestV2) SetPrivacy(val string) {
	p.Privacy = val
}
func (p *VideoPublishStartRequestV2) SetTotalFileSize(val int64) {
	p.TotalFileSize = val
}
func (p *VideoPublishStartRequestV2) SetEstimatedDuration(val int64) {
	p.EstimatedDuration = val
}
func (p *VideoPublishStartRequestV2) SetEstimatedResolution(val *VideoResolution) {
	p.EstimatedResolution = val
}
func (p *VideoPublishStartRequestV2) SetChunkTotalNumber(val int32) {
	p.ChunkTotalNumber = val
}
func (p *VideoPublishStartRequestV2) SetChunkSize(val int64) {
	p.ChunkSize = val
}
func (p *VideoPublishStartRequestV2) SetOriginalFilename(val string) {
	p.OriginalFilename = val
}
func (p *VideoPublishStartRequestV2) SetContentType(val string) {
	p.ContentType = val
}
func (p *VideoPublishStartRequestV2) SetUploadSessionExpire(val string) {
	p.UploadSessionExpire = val
}

func (p *VideoPublishStartRequestV2) IsSetEstimatedResolution() bool {
	return p.EstimatedResolution != nil
}

func (p *VideoPublishStartRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishStartRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishStartRequestV2 = map[int16]string{
	1:  "user_id",
	2:  "title",
	3:  "description",
	4:  "tags",
	5:  "category",
	6:  "privacy",
	7:  "total_file_size",
	8:  "estimated_duration",
	9:  "estimated_resolution",
	10: "chunk_total_number",
	11: "chunk_size",
	12: "original_filename",
	13: "content_type",
	14: "upload_session_expire",
}

type VideoPublishStartResponseV2 struct {
	Base              *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	UploadSessionUuid string            `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
	VideoId           int64             `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
	UserQuota         *UserStorageQuota `thrift:"user_quota,4" frugal:"4,default,UserStorageQuota" json:"user_quota"`
	TempUploadPath    string            `thrift:"temp_upload_path,5" frugal:"5,default,string" json:"temp_upload_path"`
	SessionExpiresAt  int64             `thrift:"session_expires_at,6" frugal:"6,default,i64" json:"session_expires_at"`
	PresignedUrls     []string          `thrift:"presigned_urls,7" frugal:"7,default,list<string>" json:"presigned_urls"`
}

func NewVideoPublishStartResponseV2() *VideoPublishStartResponseV2 {
	return &VideoPublishStartResponseV2{}
}

func (p *VideoPublishStartResponseV2) InitDefault() {
}

var VideoPublishStartResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishStartResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishStartResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishStartResponseV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}

func (p *VideoPublishStartResponseV2) GetVideoId() (v int64) {
	return p.VideoId
}

var VideoPublishStartResponseV2_UserQuota_DEFAULT *UserStorageQuota

func (p *VideoPublishStartResponseV2) GetUserQuota() (v *UserStorageQuota) {
	if !p.IsSetUserQuota() {
		return VideoPublishStartResponseV2_UserQuota_DEFAULT
	}
	return p.UserQuota
}

func (p *VideoPublishStartResponseV2) GetTempUploadPath() (v string) {
	return p.TempUploadPath
}

func (p *VideoPublishStartResponseV2) GetSessionExpiresAt() (v int64) {
	return p.SessionExpiresAt
}

func (p *VideoPublishStartResponseV2) GetPresignedUrls() (v []string) {
	return p.PresignedUrls
}
func (p *VideoPublishStartResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishStartResponseV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}
func (p *VideoPublishStartResponseV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoPublishStartResponseV2) SetUserQuota(val *UserStorageQuota) {
	p.UserQuota = val
}
func (p *VideoPublishStartResponseV2) SetTempUploadPath(val string) {
	p.TempUploadPath = val
}
func (p *VideoPublishStartResponseV2) SetSessionExpiresAt(val int64) {
	p.SessionExpiresAt = val
}
func (p *VideoPublishStartResponseV2) SetPresignedUrls(val []string) {
	p.PresignedUrls = val
}

func (p *VideoPublishStartResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishStartResponseV2) IsSetUserQuota() bool {
	return p.UserQuota != nil
}

func (p *VideoPublishStartResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishStartResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishStartResponseV2 = map[int16]string{
	1: "base",
	2: "upload_session_uuid",
	3: "video_id",
	4: "user_quota",
	5: "temp_upload_path",
	6: "session_expires_at",
	7: "presigned_urls",
}

type VideoPublishUploadingRequestV2 struct {
	UserId               int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	UploadSessionUuid    string `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
	ChunkNumber          int32  `thrift:"chunk_number,3" frugal:"3,default,i32" json:"chunk_number"`
	ChunkPresignedUrl    string `thrift:"chunk_presigned_url,4" frugal:"4,default,string" json:"chunk_presigned_url"`
	ChunkData            []byte `thrift:"chunk_data,5" frugal:"5,default,binary" json:"chunk_data"`
	ChunkMd5             string `thrift:"chunk_md5,6" frugal:"6,default,string" json:"chunk_md5"`
	ChunkSize            int64  `thrift:"chunk_size,7" frugal:"7,default,i64" json:"chunk_size"`
	ChunkOffset          int64  `thrift:"chunk_offset,8" frugal:"8,default,i64" json:"chunk_offset"`
	IsCompressed         bool   `thrift:"is_compressed,9" frugal:"9,default,bool" json:"is_compressed"`
	CompressionAlgorithm string `thrift:"compression_algorithm,10" frugal:"10,default,string" json:"compression_algorithm"`
}

func NewVideoPublishUploadingRequestV2() *VideoPublishUploadingRequestV2 {
	return &VideoPublishUploadingRequestV2{}
}

func (p *VideoPublishUploadingRequestV2) InitDefault() {
}

func (p *VideoPublishUploadingRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishUploadingRequestV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}

func (p *VideoPublishUploadingRequestV2) GetChunkNumber() (v int32) {
	return p.ChunkNumber
}

func (p *VideoPublishUploadingRequestV2) GetChunkPresignedUrl() (v string) {
	return p.ChunkPresignedUrl
}

func (p *VideoPublishUploadingRequestV2) GetChunkData() (v []byte) {
	return p.ChunkData
}

func (p *VideoPublishUploadingRequestV2) GetChunkMd5() (v string) {
	return p.ChunkMd5
}

func (p *VideoPublishUploadingRequestV2) GetChunkSize() (v int64) {
	return p.ChunkSize
}

func (p *VideoPublishUploadingRequestV2) GetChunkOffset() (v int64) {
	return p.ChunkOffset
}

func (p *VideoPublishUploadingRequestV2) GetIsCompressed() (v bool) {
	return p.IsCompressed
}

func (p *VideoPublishUploadingRequestV2) GetCompressionAlgorithm() (v string) {
	return p.CompressionAlgorithm
}
func (p *VideoPublishUploadingRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishUploadingRequestV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkNumber(val int32) {
	p.ChunkNumber = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkPresignedUrl(val string) {
	p.ChunkPresignedUrl = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkData(val []byte) {
	p.ChunkData = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkMd5(val string) {
	p.ChunkMd5 = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkSize(val int64) {
	p.ChunkSize = val
}
func (p *VideoPublishUploadingRequestV2) SetChunkOffset(val int64) {
	p.ChunkOffset = val
}
func (p *VideoPublishUploadingRequestV2) SetIsCompressed(val bool) {
	p.IsCompressed = val
}
func (p *VideoPublishUploadingRequestV2) SetCompressionAlgorithm(val string) {
	p.CompressionAlgorithm = val
}

func (p *VideoPublishUploadingRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishUploadingRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishUploadingRequestV2 = map[int16]string{
	1:  "user_id",
	2:  "upload_session_uuid",
	3:  "chunk_number",
	4:  "chunk_presigned_url",
	5:  "chunk_data",
	6:  "chunk_md5",
	7:  "chunk_size",
	8:  "chunk_offset",
	9:  "is_compressed",
	10: "compression_algorithm",
}

type VideoPublishUploadingResponseV2 struct {
	Base                  *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	UploadedChunkNumber   int32        `thrift:"uploaded_chunk_number,2" frugal:"2,default,i32" json:"uploaded_chunk_number"`
	ChunkUploadStatus     string       `thrift:"chunk_upload_status,3" frugal:"3,default,string" json:"chunk_upload_status"`
	UploadProgressPercent float64      `thrift:"upload_progress_percent,4" frugal:"4,default,double" json:"upload_progress_percent"`
	NextChunkOffset       int64        `thrift:"next_chunk_offset,5" frugal:"5,default,i64" json:"next_chunk_offset"`
	UploadSpeedMbps       string       `thrift:"upload_speed_mbps,6" frugal:"6,default,string" json:"upload_speed_mbps"`
}

func NewVideoPublishUploadingResponseV2() *VideoPublishUploadingResponseV2 {
	return &VideoPublishUploadingResponseV2{}
}

func (p *VideoPublishUploadingResponseV2) InitDefault() {
}

var VideoPublishUploadingResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishUploadingResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishUploadingResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishUploadingResponseV2) GetUploadedChunkNumber() (v int32) {
	return p.UploadedChunkNumber
}

func (p *VideoPublishUploadingResponseV2) GetChunkUploadStatus() (v string) {
	return p.ChunkUploadStatus
}

func (p *VideoPublishUploadingResponseV2) GetUploadProgressPercent() (v float64) {
	return p.UploadProgressPercent
}

func (p *VideoPublishUploadingResponseV2) GetNextChunkOffset() (v int64) {
	return p.NextChunkOffset
}

func (p *VideoPublishUploadingResponseV2) GetUploadSpeedMbps() (v string) {
	return p.UploadSpeedMbps
}
func (p *VideoPublishUploadingResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishUploadingResponseV2) SetUploadedChunkNumber(val int32) {
	p.UploadedChunkNumber = val
}
func (p *VideoPublishUploadingResponseV2) SetChunkUploadStatus(val string) {
	p.ChunkUploadStatus = val
}
func (p *VideoPublishUploadingResponseV2) SetUploadProgressPercent(val float64) {
	p.UploadProgressPercent = val
}
func (p *VideoPublishUploadingResponseV2) SetNextChunkOffset(val int64) {
	p.NextChunkOffset = val
}
func (p *VideoPublishUploadingResponseV2) SetUploadSpeedMbps(val string) {
	p.UploadSpeedMbps = val
}

func (p *VideoPublishUploadingResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishUploadingResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishUploadingResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishUploadingResponseV2 = map[int16]string{
	1: "base",
	2: "uploaded_chunk_number",
	3: "chunk_upload_status",
	4: "upload_progress_percent",
	5: "next_chunk_offset",
	6: "upload_speed_mbps",
}

type VideoPublishCompleteRequestV2 struct {
	UserId                int64             `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	UploadSessionUuid     string            `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
	FinalFileMd5          string            `thrift:"final_file_md5,3" frugal:"3,default,string" json:"final_file_md5"`
	FinalFileSize         int64             `thrift:"final_file_size,4" frugal:"4,default,i64" json:"final_file_size"`
	EnableTranscoding     bool              `thrift:"enable_transcoding,5" frugal:"5,default,bool" json:"enable_transcoding"`
	TargetResolutions     []int32           `thrift:"target_resolutions,6" frugal:"6,default,list<i32>" json:"target_resolutions"`
	GenerateThumbnails    bool              `thrift:"generate_thumbnails,7" frugal:"7,default,bool" json:"generate_thumbnails"`
	GenerateAnimatedCover bool              `thrift:"generate_animated_cover,8" frugal:"8,default,bool" json:"generate_animated_cover"`
	CustomMetadata        map[string]string `thrift:"custom_metadata,9" frugal:"9,default,map<string:string>" json:"custom_metadata"`
}

func NewVideoPublishCompleteRequestV2() *VideoPublishCompleteRequestV2 {
	return &VideoPublishCompleteRequestV2{}
}

func (p *VideoPublishCompleteRequestV2) InitDefault() {
}

func (p *VideoPublishCompleteRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishCompleteRequestV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}

func (p *VideoPublishCompleteRequestV2) GetFinalFileMd5() (v string) {
	return p.FinalFileMd5
}

func (p *VideoPublishCompleteRequestV2) GetFinalFileSize() (v int64) {
	return p.FinalFileSize
}

func (p *VideoPublishCompleteRequestV2) GetEnableTranscoding() (v bool) {
	return p.EnableTranscoding
}

func (p *VideoPublishCompleteRequestV2) GetTargetResolutions() (v []int32) {
	return p.TargetResolutions
}

func (p *VideoPublishCompleteRequestV2) GetGenerateThumbnails() (v bool) {
	return p.GenerateThumbnails
}

func (p *VideoPublishCompleteRequestV2) GetGenerateAnimatedCover() (v bool) {
	return p.GenerateAnimatedCover
}

func (p *VideoPublishCompleteRequestV2) GetCustomMetadata() (v map[string]string) {
	return p.CustomMetadata
}
func (p *VideoPublishCompleteRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishCompleteRequestV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}
func (p *VideoPublishCompleteRequestV2) SetFinalFileMd5(val string) {
	p.FinalFileMd5 = val
}
func (p *VideoPublishCompleteRequestV2) SetFinalFileSize(val int64) {
	p.FinalFileSize = val
}
func (p *VideoPublishCompleteRequestV2) SetEnableTranscoding(val bool) {
	p.EnableTranscoding = val
}
func (p *VideoPublishCompleteRequestV2) SetTargetResolutions(val []int32) {
	p.TargetResolutions = val
}
func (p *VideoPublishCompleteRequestV2) SetGenerateThumbnails(val bool) {
	p.GenerateThumbnails = val
}
func (p *VideoPublishCompleteRequestV2) SetGenerateAnimatedCover(val bool) {
	p.GenerateAnimatedCover = val
}
func (p *VideoPublishCompleteRequestV2) SetCustomMetadata(val map[string]string) {
	p.CustomMetadata = val
}

func (p *VideoPublishCompleteRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCompleteRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishCompleteRequestV2 = map[int16]string{
	1: "user_id",
	2: "upload_session_uuid",
	3: "final_file_md5",
	4: "final_file_size",
	5: "enable_transcoding",
	6: "target_resolutions",
	7: "generate_thumbnails",
	8: "generate_animated_cover",
	9: "custom_metadata",
}

type VideoPublishCompleteResponseV2 struct {
	Base               *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoId            int64             `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	VideoSourceUrl     string            `thrift:"video_source_url,3" frugal:"3,default,string" json:"video_source_url"`
	ProcessedVideoUrls map[int32]string  `thrift:"processed_video_urls,4" frugal:"4,default,map<i32:string>" json:"processed_video_urls"`
	ThumbnailUrls      map[string]string `thrift:"thumbnail_urls,5" frugal:"5,default,map<string:string>" json:"thumbnail_urls"`
	AnimatedCoverUrl   string            `thrift:"animated_cover_url,6" frugal:"6,default,string" json:"animated_cover_url"`
	MetadataUrl        string            `thrift:"metadata_url,7" frugal:"7,default,string" json:"metadata_url"`
	ProcessingStatus   string            `thrift:"processing_status,8" frugal:"8,default,string" json:"processing_status"`
	ProcessingJobId    int64             `thrift:"processing_job_id,9" frugal:"9,default,i64" json:"processing_job_id"`
	UpdatedQuota       *UserStorageQuota `thrift:"updated_quota,10" frugal:"10,default,UserStorageQuota" json:"updated_quota"`
}

func NewVideoPublishCompleteResponseV2() *VideoPublishCompleteResponseV2 {
	return &VideoPublishCompleteResponseV2{}
}

func (p *VideoPublishCompleteResponseV2) InitDefault() {
}

var VideoPublishCompleteResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishCompleteResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishCompleteResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishCompleteResponseV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoPublishCompleteResponseV2) GetVideoSourceUrl() (v string) {
	return p.VideoSourceUrl
}

func (p *VideoPublishCompleteResponseV2) GetProcessedVideoUrls() (v map[int32]string) {
	return p.ProcessedVideoUrls
}

func (p *VideoPublishCompleteResponseV2) GetThumbnailUrls() (v map[string]string) {
	return p.ThumbnailUrls
}

func (p *VideoPublishCompleteResponseV2) GetAnimatedCoverUrl() (v string) {
	return p.AnimatedCoverUrl
}

func (p *VideoPublishCompleteResponseV2) GetMetadataUrl() (v string) {
	return p.MetadataUrl
}

func (p *VideoPublishCompleteResponseV2) GetProcessingStatus() (v string) {
	return p.ProcessingStatus
}

func (p *VideoPublishCompleteResponseV2) GetProcessingJobId() (v int64) {
	return p.ProcessingJobId
}

var VideoPublishCompleteResponseV2_UpdatedQuota_DEFAULT *UserStorageQuota

func (p *VideoPublishCompleteResponseV2) GetUpdatedQuota() (v *UserStorageQuota) {
	if !p.IsSetUpdatedQuota() {
		return VideoPublishCompleteResponseV2_UpdatedQuota_DEFAULT
	}
	return p.UpdatedQuota
}
func (p *VideoPublishCompleteResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishCompleteResponseV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoPublishCompleteResponseV2) SetVideoSourceUrl(val string) {
	p.VideoSourceUrl = val
}
func (p *VideoPublishCompleteResponseV2) SetProcessedVideoUrls(val map[int32]string) {
	p.ProcessedVideoUrls = val
}
func (p *VideoPublishCompleteResponseV2) SetThumbnailUrls(val map[string]string) {
	p.ThumbnailUrls = val
}
func (p *VideoPublishCompleteResponseV2) SetAnimatedCoverUrl(val string) {
	p.AnimatedCoverUrl = val
}
func (p *VideoPublishCompleteResponseV2) SetMetadataUrl(val string) {
	p.MetadataUrl = val
}
func (p *VideoPublishCompleteResponseV2) SetProcessingStatus(val string) {
	p.ProcessingStatus = val
}
func (p *VideoPublishCompleteResponseV2) SetProcessingJobId(val int64) {
	p.ProcessingJobId = val
}
func (p *VideoPublishCompleteResponseV2) SetUpdatedQuota(val *UserStorageQuota) {
	p.UpdatedQuota = val
}

func (p *VideoPublishCompleteResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishCompleteResponseV2) IsSetUpdatedQuota() bool {
	return p.UpdatedQuota != nil
}

func (p *VideoPublishCompleteResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCompleteResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishCompleteResponseV2 = map[int16]string{
	1:  "base",
	2:  "video_id",
	3:  "video_source_url",
	4:  "processed_video_urls",
	5:  "thumbnail_urls",
	6:  "animated_cover_url",
	7:  "metadata_url",
	8:  "processing_status",
	9:  "processing_job_id",
	10: "updated_quota",
}

type VideoPublishCancelRequestV2 struct {
	UserId            int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	UploadSessionUuid string `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
	CancelReason      string `thrift:"cancel_reason,3" frugal:"3,default,string" json:"cancel_reason"`
}

func NewVideoPublishCancelRequestV2() *VideoPublishCancelRequestV2 {
	return &VideoPublishCancelRequestV2{}
}

func (p *VideoPublishCancelRequestV2) InitDefault() {
}

func (p *VideoPublishCancelRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishCancelRequestV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}

func (p *VideoPublishCancelRequestV2) GetCancelReason() (v string) {
	return p.CancelReason
}
func (p *VideoPublishCancelRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishCancelRequestV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}
func (p *VideoPublishCancelRequestV2) SetCancelReason(val string) {
	p.CancelReason = val
}

func (p *VideoPublishCancelRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCancelRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishCancelRequestV2 = map[int16]string{
	1: "user_id",
	2: "upload_session_uuid",
	3: "cancel_reason",
}

type VideoPublishCancelResponseV2 struct {
	Base                  *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	CleanupStatus         string            `thrift:"cleanup_status,2" frugal:"2,default,string" json:"cleanup_status"`
	StorageRecoveredBytes int64             `thrift:"storage_recovered_bytes,3" frugal:"3,default,i64" json:"storage_recovered_bytes"`
	UpdatedQuota          *UserStorageQuota `thrift:"updated_quota,4" frugal:"4,default,UserStorageQuota" json:"updated_quota"`
}

func NewVideoPublishCancelResponseV2() *VideoPublishCancelResponseV2 {
	return &VideoPublishCancelResponseV2{}
}

func (p *VideoPublishCancelResponseV2) InitDefault() {
}

var VideoPublishCancelResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishCancelResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishCancelResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishCancelResponseV2) GetCleanupStatus() (v string) {
	return p.CleanupStatus
}

func (p *VideoPublishCancelResponseV2) GetStorageRecoveredBytes() (v int64) {
	return p.StorageRecoveredBytes
}

var VideoPublishCancelResponseV2_UpdatedQuota_DEFAULT *UserStorageQuota

func (p *VideoPublishCancelResponseV2) GetUpdatedQuota() (v *UserStorageQuota) {
	if !p.IsSetUpdatedQuota() {
		return VideoPublishCancelResponseV2_UpdatedQuota_DEFAULT
	}
	return p.UpdatedQuota
}
func (p *VideoPublishCancelResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishCancelResponseV2) SetCleanupStatus(val string) {
	p.CleanupStatus = val
}
func (p *VideoPublishCancelResponseV2) SetStorageRecoveredBytes(val int64) {
	p.StorageRecoveredBytes = val
}
func (p *VideoPublishCancelResponseV2) SetUpdatedQuota(val *UserStorageQuota) {
	p.UpdatedQuota = val
}

func (p *VideoPublishCancelResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishCancelResponseV2) IsSetUpdatedQuota() bool {
	return p.UpdatedQuota != nil
}

func (p *VideoPublishCancelResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCancelResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishCancelResponseV2 = map[int16]string{
	1: "base",
	2: "cleanup_status",
	3: "storage_recovered_bytes",
	4: "updated_quota",
}

type VideoPublishProgressRequestV2 struct {
	UserId            int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	UploadSessionUuid string `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
}

func NewVideoPublishProgressRequestV2() *VideoPublishProgressRequestV2 {
	return &VideoPublishProgressRequestV2{}
}

func (p *VideoPublishProgressRequestV2) InitDefault() {
}

func (p *VideoPublishProgressRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishProgressRequestV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}
func (p *VideoPublishProgressRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishProgressRequestV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}

func (p *VideoPublishProgressRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishProgressRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishProgressRequestV2 = map[int16]string{
	1: "user_id",
	2: "upload_session_uuid",
}

type VideoPublishProgressResponseV2 struct {
	Base                      *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	SessionStatus             string       `thrift:"session_status,2" frugal:"2,default,string" json:"session_status"`
	TotalChunks               int32        `thrift:"total_chunks,3" frugal:"3,default,i32" json:"total_chunks"`
	UploadedChunks            int32        `thrift:"uploaded_chunks,4" frugal:"4,default,i32" json:"uploaded_chunks"`
	UploadProgressPercent     float64      `thrift:"upload_progress_percent,5" frugal:"5,default,double" json:"upload_progress_percent"`
	ProcessingProgressPercent float64      `thrift:"processing_progress_percent,6" frugal:"6,default,double" json:"processing_progress_percent"`
	UploadSpeedBytesPerSec    int64        `thrift:"upload_speed_bytes_per_sec,7" frugal:"7,default,i64" json:"upload_speed_bytes_per_sec"`
	EtaSeconds                int64        `thrift:"eta_seconds,8" frugal:"8,default,i64" json:"eta_seconds"`
	FailedChunks              []int32      `thrift:"failed_chunks,9" frugal:"9,default,list<i32>" json:"failed_chunks"`
	CurrentStage              string       `thrift:"current_stage,10" frugal:"10,default,string" json:"current_stage"`
}

func NewVideoPublishProgressResponseV2() *VideoPublishProgressResponseV2 {
	return &VideoPublishProgressResponseV2{}
}

func (p *VideoPublishProgressResponseV2) InitDefault() {
}

var VideoPublishProgressResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishProgressResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishProgressResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishProgressResponseV2) GetSessionStatus() (v string) {
	return p.SessionStatus
}

func (p *VideoPublishProgressResponseV2) GetTotalChunks() (v int32) {
	return p.TotalChunks
}

func (p *VideoPublishProgressResponseV2) GetUploadedChunks() (v int32) {
	return p.UploadedChunks
}

func (p *VideoPublishProgressResponseV2) GetUploadProgressPercent() (v float64) {
	return p.UploadProgressPercent
}

func (p *VideoPublishProgressResponseV2) GetProcessingProgressPercent() (v float64) {
	return p.ProcessingProgressPercent
}

func (p *VideoPublishProgressResponseV2) GetUploadSpeedBytesPerSec() (v int64) {
	return p.UploadSpeedBytesPerSec
}

func (p *VideoPublishProgressResponseV2) GetEtaSeconds() (v int64) {
	return p.EtaSeconds
}

func (p *VideoPublishProgressResponseV2) GetFailedChunks() (v []int32) {
	return p.FailedChunks
}

func (p *VideoPublishProgressResponseV2) GetCurrentStage() (v string) {
	return p.CurrentStage
}
func (p *VideoPublishProgressResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishProgressResponseV2) SetSessionStatus(val string) {
	p.SessionStatus = val
}
func (p *VideoPublishProgressResponseV2) SetTotalChunks(val int32) {
	p.TotalChunks = val
}
func (p *VideoPublishProgressResponseV2) SetUploadedChunks(val int32) {
	p.UploadedChunks = val
}
func (p *VideoPublishProgressResponseV2) SetUploadProgressPercent(val float64) {
	p.UploadProgressPercent = val
}
func (p *VideoPublishProgressResponseV2) SetProcessingProgressPercent(val float64) {
	p.ProcessingProgressPercent = val
}
func (p *VideoPublishProgressResponseV2) SetUploadSpeedBytesPerSec(val int64) {
	p.UploadSpeedBytesPerSec = val
}
func (p *VideoPublishProgressResponseV2) SetEtaSeconds(val int64) {
	p.EtaSeconds = val
}
func (p *VideoPublishProgressResponseV2) SetFailedChunks(val []int32) {
	p.FailedChunks = val
}
func (p *VideoPublishProgressResponseV2) SetCurrentStage(val string) {
	p.CurrentStage = val
}

func (p *VideoPublishProgressResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishProgressResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishProgressResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishProgressResponseV2 = map[int16]string{
	1:  "base",
	2:  "session_status",
	3:  "total_chunks",
	4:  "uploaded_chunks",
	5:  "upload_progress_percent",
	6:  "processing_progress_percent",
	7:  "upload_speed_bytes_per_sec",
	8:  "eta_seconds",
	9:  "failed_chunks",
	10: "current_stage",
}

type VideoPublishResumeRequestV2 struct {
	UserId            int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	UploadSessionUuid string `thrift:"upload_session_uuid,2" frugal:"2,default,string" json:"upload_session_uuid"`
	LastChunkMd5      string `thrift:"last_chunk_md5,3" frugal:"3,default,string" json:"last_chunk_md5"`
}

func NewVideoPublishResumeRequestV2() *VideoPublishResumeRequestV2 {
	return &VideoPublishResumeRequestV2{}
}

func (p *VideoPublishResumeRequestV2) InitDefault() {
}

func (p *VideoPublishResumeRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoPublishResumeRequestV2) GetUploadSessionUuid() (v string) {
	return p.UploadSessionUuid
}

func (p *VideoPublishResumeRequestV2) GetLastChunkMd5() (v string) {
	return p.LastChunkMd5
}
func (p *VideoPublishResumeRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoPublishResumeRequestV2) SetUploadSessionUuid(val string) {
	p.UploadSessionUuid = val
}
func (p *VideoPublishResumeRequestV2) SetLastChunkMd5(val string) {
	p.LastChunkMd5 = val
}

func (p *VideoPublishResumeRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishResumeRequestV2(%+v)", *p)
}

var fieldIDToName_VideoPublishResumeRequestV2 = map[int16]string{
	1: "user_id",
	2: "upload_session_uuid",
	3: "last_chunk_md5",
}

type VideoPublishResumeResponseV2 struct {
	Base                 *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	LastUploadedChunk    int32        `thrift:"last_uploaded_chunk,2" frugal:"2,default,i32" json:"last_uploaded_chunk"`
	MissingChunks        []int32      `thrift:"missing_chunks,3" frugal:"3,default,list<i32>" json:"missing_chunks"`
	SessionRemainingTime int64        `thrift:"session_remaining_time,4" frugal:"4,default,i64" json:"session_remaining_time"`
	CanResume            bool         `thrift:"can_resume,5" frugal:"5,default,bool" json:"can_resume"`
	ResumeStrategy       string       `thrift:"resume_strategy,6" frugal:"6,default,string" json:"resume_strategy"`
}

func NewVideoPublishResumeResponseV2() *VideoPublishResumeResponseV2 {
	return &VideoPublishResumeResponseV2{}
}

func (p *VideoPublishResumeResponseV2) InitDefault() {
}

var VideoPublishResumeResponseV2_Base_DEFAULT *base.Status

func (p *VideoPublishResumeResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishResumeResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishResumeResponseV2) GetLastUploadedChunk() (v int32) {
	return p.LastUploadedChunk
}

func (p *VideoPublishResumeResponseV2) GetMissingChunks() (v []int32) {
	return p.MissingChunks
}

func (p *VideoPublishResumeResponseV2) GetSessionRemainingTime() (v int64) {
	return p.SessionRemainingTime
}

func (p *VideoPublishResumeResponseV2) GetCanResume() (v bool) {
	return p.CanResume
}

func (p *VideoPublishResumeResponseV2) GetResumeStrategy() (v string) {
	return p.ResumeStrategy
}
func (p *VideoPublishResumeResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishResumeResponseV2) SetLastUploadedChunk(val int32) {
	p.LastUploadedChunk = val
}
func (p *VideoPublishResumeResponseV2) SetMissingChunks(val []int32) {
	p.MissingChunks = val
}
func (p *VideoPublishResumeResponseV2) SetSessionRemainingTime(val int64) {
	p.SessionRemainingTime = val
}
func (p *VideoPublishResumeResponseV2) SetCanResume(val bool) {
	p.CanResume = val
}
func (p *VideoPublishResumeResponseV2) SetResumeStrategy(val string) {
	p.ResumeStrategy = val
}

func (p *VideoPublishResumeResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishResumeResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishResumeResponseV2(%+v)", *p)
}

var fieldIDToName_VideoPublishResumeResponseV2 = map[int16]string{
	1: "base",
	2: "last_uploaded_chunk",
	3: "missing_chunks",
	4: "session_remaining_time",
	5: "can_resume",
	6: "resume_strategy",
}

type VideoFeedListRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum  int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewVideoFeedListRequest() *VideoFeedListRequest {
	return &VideoFeedListRequest{}
}

func (p *VideoFeedListRequest) InitDefault() {
}

func (p *VideoFeedListRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoFeedListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoFeedListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *VideoFeedListRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoFeedListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoFeedListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *VideoFeedListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoFeedListRequest(%+v)", *p)
}

var fieldIDToName_VideoFeedListRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
}

type VideoFeedListResponse struct {
	Base      *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoList []*base.Video `thrift:"video_list,2" frugal:"2,default,list<base.Video>" json:"video_list"`
	Total     int64         `thrift:"total,3" frugal:"3,default,i64" json:"total"`
}

func NewVideoFeedListResponse() *VideoFeedListResponse {
	return &VideoFeedListResponse{}
}

func (p *VideoFeedListResponse) InitDefault() {
}

var VideoFeedListResponse_Base_DEFAULT *base.Status

func (p *VideoFeedListResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoFeedListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoFeedListResponse) GetVideoList() (v []*base.Video) {
	return p.VideoList
}

func (p *VideoFeedListResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *VideoFeedListResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoFeedListResponse) SetVideoList(val []*base.Video) {
	p.VideoList = val
}
func (p *VideoFeedListResponse) SetTotal(val int64) {
	p.Total = val
}

func (p *VideoFeedListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoFeedListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoFeedListResponse(%+v)", *p)
}

var fieldIDToName_VideoFeedListResponse = map[int16]string{
	1: "base",
	2: "video_list",
	3: "total",
}

type VideoSearchRequest struct {
	Keyword  string `thrift:"keyword,1" frugal:"1,default,string" json:"keyword"`
	PageNum  int64  `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64  `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
	FromDate string `thrift:"from_date,4" frugal:"4,default,string" json:"from_date"`
	ToDate   string `thrift:"to_date,5" frugal:"5,default,string" json:"to_date"`
}

func NewVideoSearchRequest() *VideoSearchRequest {
	return &VideoSearchRequest{}
}

func (p *VideoSearchRequest) InitDefault() {
}

func (p *VideoSearchRequest) GetKeyword() (v string) {
	return p.Keyword
}

func (p *VideoSearchRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoSearchRequest) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *VideoSearchRequest) GetFromDate() (v string) {
	return p.FromDate
}

func (p *VideoSearchRequest) GetToDate() (v string) {
	return p.ToDate
}
func (p *VideoSearchRequest) SetKeyword(val string) {
	p.Keyword = val
}
func (p *VideoSearchRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoSearchRequest) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *VideoSearchRequest) SetFromDate(val string) {
	p.FromDate = val
}
func (p *VideoSearchRequest) SetToDate(val string) {
	p.ToDate = val
}

func (p *VideoSearchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchRequest(%+v)", *p)
}

var fieldIDToName_VideoSearchRequest = map[int16]string{
	1: "keyword",
	2: "page_num",
	3: "page_size",
	4: "from_date",
	5: "to_date",
}

type VideoSearchResponse struct {
	Base        *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoSearch []*base.Video `thrift:"video_search,2" frugal:"2,default,list<base.Video>" json:"video_search"`
	Count       int64         `thrift:"count,3" frugal:"3,default,i64" json:"count"`
}

func NewVideoSearchResponse() *VideoSearchResponse {
	return &VideoSearchResponse{}
}

func (p *VideoSearchResponse) InitDefault() {
}

var VideoSearchResponse_Base_DEFAULT *base.Status

func (p *VideoSearchResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoSearchResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoSearchResponse) GetVideoSearch() (v []*base.Video) {
	return p.VideoSearch
}

func (p *VideoSearchResponse) GetCount() (v int64) {
	return p.Count
}
func (p *VideoSearchResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoSearchResponse) SetVideoSearch(val []*base.Video) {
	p.VideoSearch = val
}
func (p *VideoSearchResponse) SetCount(val int64) {
	p.Count = val
}

func (p *VideoSearchResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoSearchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchResponse(%+v)", *p)
}

var fieldIDToName_VideoSearchResponse = map[int16]string{
	1: "base",
	2: "video_search",
	3: "count",
}

type VideoPopularRequest struct {
	PageNum  int64 `thrift:"page_num,1" frugal:"1,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,2" frugal:"2,default,i64" json:"page_size"`
}

func NewVideoPopularRequest() *VideoPopularRequest {
	return &VideoPopularRequest{}
}

func (p *VideoPopularRequest) InitDefault() {
}

func (p *VideoPopularRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoPopularRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *VideoPopularRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoPopularRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *VideoPopularRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPopularRequest(%+v)", *p)
}

var fieldIDToName_VideoPopularRequest = map[int16]string{
	1: "page_num",
	2: "page_size",
}

type VideoPopularResponse struct {
	Base    *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Popular []*base.Video `thrift:"Popular,2" frugal:"2,default,list<base.Video>" json:"Popular"`
}

func NewVideoPopularResponse() *VideoPopularResponse {
	return &VideoPopularResponse{}
}

func (p *VideoPopularResponse) InitDefault() {
}

var VideoPopularResponse_Base_DEFAULT *base.Status

func (p *VideoPopularResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPopularResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPopularResponse) GetPopular() (v []*base.Video) {
	return p.Popular
}
func (p *VideoPopularResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPopularResponse) SetPopular(val []*base.Video) {
	p.Popular = val
}

func (p *VideoPopularResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPopularResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPopularResponse(%+v)", *p)
}

var fieldIDToName_VideoPopularResponse = map[int16]string{
	1: "base",
	2: "Popular",
}

type VideoInfoRequest struct {
	VideoId int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
}

func NewVideoInfoRequest() *VideoInfoRequest {
	return &VideoInfoRequest{}
}

func (p *VideoInfoRequest) InitDefault() {
}

func (p *VideoInfoRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *VideoInfoRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *VideoInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoInfoRequest(%+v)", *p)
}

var fieldIDToName_VideoInfoRequest = map[int16]string{
	1: "video_id",
}

type VideoInfoResponse struct {
	Base  *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Items *base.Video  `thrift:"items,2" frugal:"2,default,base.Video" json:"items"`
}

func NewVideoInfoResponse() *VideoInfoResponse {
	return &VideoInfoResponse{}
}

func (p *VideoInfoResponse) InitDefault() {
}

var VideoInfoResponse_Base_DEFAULT *base.Status

func (p *VideoInfoResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoInfoResponse_Base_DEFAULT
	}
	return p.Base
}

var VideoInfoResponse_Items_DEFAULT *base.Video

func (p *VideoInfoResponse) GetItems() (v *base.Video) {
	if !p.IsSetItems() {
		return VideoInfoResponse_Items_DEFAULT
	}
	return p.Items
}
func (p *VideoInfoResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoInfoResponse) SetItems(val *base.Video) {
	p.Items = val
}

func (p *VideoInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoInfoResponse) IsSetItems() bool {
	return p.Items != nil
}

func (p *VideoInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoInfoResponse(%+v)", *p)
}

var fieldIDToName_VideoInfoResponse = map[int16]string{
	1: "base",
	2: "items",
}

type VideoDeleteRequest struct {
	UserId  int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId int64 `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
}

func NewVideoDeleteRequest() *VideoDeleteRequest {
	return &VideoDeleteRequest{}
}

func (p *VideoDeleteRequest) InitDefault() {
}

func (p *VideoDeleteRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoDeleteRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *VideoDeleteRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoDeleteRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *VideoDeleteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoDeleteRequest(%+v)", *p)
}

var fieldIDToName_VideoDeleteRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
}

type VideoDeleteResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewVideoDeleteResponse() *VideoDeleteResponse {
	return &VideoDeleteResponse{}
}

func (p *VideoDeleteResponse) InitDefault() {
}

var VideoDeleteResponse_Base_DEFAULT *base.Status

func (p *VideoDeleteResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoDeleteResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *VideoDeleteResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *VideoDeleteResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoDeleteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoDeleteResponse(%+v)", *p)
}

var fieldIDToName_VideoDeleteResponse = map[int16]string{
	1: "base",
}

type VideoVisitRequest struct {
	FromId  int64 `thrift:"from_id,1" frugal:"1,default,i64" json:"from_id"`
	VideoId int64 `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
}

func NewVideoVisitRequest() *VideoVisitRequest {
	return &VideoVisitRequest{}
}

func (p *VideoVisitRequest) InitDefault() {
}

func (p *VideoVisitRequest) GetFromId() (v int64) {
	return p.FromId
}

func (p *VideoVisitRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *VideoVisitRequest) SetFromId(val int64) {
	p.FromId = val
}
func (p *VideoVisitRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *VideoVisitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoVisitRequest(%+v)", *p)
}

var fieldIDToName_VideoVisitRequest = map[int16]string{
	1: "from_id",
	2: "video_id",
}

type VideoVisitResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Item *base.Video  `thrift:"item,2" frugal:"2,default,base.Video" json:"item"`
}

func NewVideoVisitResponse() *VideoVisitResponse {
	return &VideoVisitResponse{}
}

func (p *VideoVisitResponse) InitDefault() {
}

var VideoVisitResponse_Base_DEFAULT *base.Status

func (p *VideoVisitResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoVisitResponse_Base_DEFAULT
	}
	return p.Base
}

var VideoVisitResponse_Item_DEFAULT *base.Video

func (p *VideoVisitResponse) GetItem() (v *base.Video) {
	if !p.IsSetItem() {
		return VideoVisitResponse_Item_DEFAULT
	}
	return p.Item
}
func (p *VideoVisitResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoVisitResponse) SetItem(val *base.Video) {
	p.Item = val
}

func (p *VideoVisitResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoVisitResponse) IsSetItem() bool {
	return p.Item != nil
}

func (p *VideoVisitResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoVisitResponse(%+v)", *p)
}

var fieldIDToName_VideoVisitResponse = map[int16]string{
	1: "base",
	2: "item",
}

type VideoIdListRequest struct {
	PageNum  int64 `thrift:"page_num,1" frugal:"1,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,2" frugal:"2,default,i64" json:"page_size"`
}

func NewVideoIdListRequest() *VideoIdListRequest {
	return &VideoIdListRequest{}
}

func (p *VideoIdListRequest) InitDefault() {
}

func (p *VideoIdListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoIdListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *VideoIdListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoIdListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *VideoIdListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoIdListRequest(%+v)", *p)
}

var fieldIDToName_VideoIdListRequest = map[int16]string{
	1: "page_num",
	2: "page_size",
}

type VideoIdListResponse struct {
	Base  *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	IsEnd bool         `thrift:"is_end,2" frugal:"2,default,bool" json:"is_end"`
	List  []string     `thrift:"list,3" frugal:"3,default,list<string>" json:"list"`
}

func NewVideoIdListResponse() *VideoIdListResponse {
	return &VideoIdListResponse{}
}

func (p *VideoIdListResponse) InitDefault() {
}

var VideoIdListResponse_Base_DEFAULT *base.Status

func (p *VideoIdListResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoIdListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoIdListResponse) GetIsEnd() (v bool) {
	return p.IsEnd
}

func (p *VideoIdListResponse) GetList() (v []string) {
	return p.List
}
func (p *VideoIdListResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoIdListResponse) SetIsEnd(val bool) {
	p.IsEnd = val
}
func (p *VideoIdListResponse) SetList(val []string) {
	p.List = val
}

func (p *VideoIdListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoIdListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoIdListResponse(%+v)", *p)
}

var fieldIDToName_VideoIdListResponse = map[int16]string{
	1: "base",
	2: "is_end",
	3: "list",
}

type UpdateVisitCountRequest struct {
	VideoId    int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	VisitCount int64 `thrift:"visit_count,2" frugal:"2,default,i64" json:"visit_count"`
}

func NewUpdateVisitCountRequest() *UpdateVisitCountRequest {
	return &UpdateVisitCountRequest{}
}

func (p *UpdateVisitCountRequest) InitDefault() {
}

func (p *UpdateVisitCountRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *UpdateVisitCountRequest) GetVisitCount() (v int64) {
	return p.VisitCount
}
func (p *UpdateVisitCountRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *UpdateVisitCountRequest) SetVisitCount(val int64) {
	p.VisitCount = val
}

func (p *UpdateVisitCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVisitCountRequest(%+v)", *p)
}

var fieldIDToName_UpdateVisitCountRequest = map[int16]string{
	1: "video_id",
	2: "visit_count",
}

type UpdateVisitCountResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewUpdateVisitCountResponse() *UpdateVisitCountResponse {
	return &UpdateVisitCountResponse{}
}

func (p *UpdateVisitCountResponse) InitDefault() {
}

var UpdateVisitCountResponse_Base_DEFAULT *base.Status

func (p *UpdateVisitCountResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UpdateVisitCountResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateVisitCountResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *UpdateVisitCountResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateVisitCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVisitCountResponse(%+v)", *p)
}

var fieldIDToName_UpdateVisitCountResponse = map[int16]string{
	1: "base",
}

type UpdateVideoCommentCountRequest struct {
	VideoId      int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	CommentCount int64 `thrift:"comment_count,2" frugal:"2,default,i64" json:"comment_count"`
}

func NewUpdateVideoCommentCountRequest() *UpdateVideoCommentCountRequest {
	return &UpdateVideoCommentCountRequest{}
}

func (p *UpdateVideoCommentCountRequest) InitDefault() {
}

func (p *UpdateVideoCommentCountRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *UpdateVideoCommentCountRequest) GetCommentCount() (v int64) {
	return p.CommentCount
}
func (p *UpdateVideoCommentCountRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *UpdateVideoCommentCountRequest) SetCommentCount(val int64) {
	p.CommentCount = val
}

func (p *UpdateVideoCommentCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoCommentCountRequest(%+v)", *p)
}

var fieldIDToName_UpdateVideoCommentCountRequest = map[int16]string{
	1: "video_id",
	2: "comment_count",
}

type UpdateVideoCommentCountResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewUpdateVideoCommentCountResponse() *UpdateVideoCommentCountResponse {
	return &UpdateVideoCommentCountResponse{}
}

func (p *UpdateVideoCommentCountResponse) InitDefault() {
}

var UpdateVideoCommentCountResponse_Base_DEFAULT *base.Status

func (p *UpdateVideoCommentCountResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UpdateVideoCommentCountResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateVideoCommentCountResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *UpdateVideoCommentCountResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateVideoCommentCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoCommentCountResponse(%+v)", *p)
}

var fieldIDToName_UpdateVideoCommentCountResponse = map[int16]string{
	1: "base",
}

type UpdateLikeCountRequest struct {
	VideoId   int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	LikeCount int64 `thrift:"like_count,2" frugal:"2,default,i64" json:"like_count"`
}

func NewUpdateLikeCountRequest() *UpdateLikeCountRequest {
	return &UpdateLikeCountRequest{}
}

func (p *UpdateLikeCountRequest) InitDefault() {
}

func (p *UpdateLikeCountRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *UpdateLikeCountRequest) GetLikeCount() (v int64) {
	return p.LikeCount
}
func (p *UpdateLikeCountRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *UpdateLikeCountRequest) SetLikeCount(val int64) {
	p.LikeCount = val
}

func (p *UpdateLikeCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateLikeCountRequest(%+v)", *p)
}

var fieldIDToName_UpdateLikeCountRequest = map[int16]string{
	1: "video_id",
	2: "like_count",
}

type UpdateLikeCountResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewUpdateLikeCountResponse() *UpdateLikeCountResponse {
	return &UpdateLikeCountResponse{}
}

func (p *UpdateLikeCountResponse) InitDefault() {
}

var UpdateLikeCountResponse_Base_DEFAULT *base.Status

func (p *UpdateLikeCountResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UpdateLikeCountResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateLikeCountResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *UpdateLikeCountResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateLikeCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateLikeCountResponse(%+v)", *p)
}

var fieldIDToName_UpdateLikeCountResponse = map[int16]string{
	1: "base",
}

type UpdateVideoHisLikeCountRequest struct {
	VideoId      int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	HisLikeCount int64 `thrift:"his_like_count,2" frugal:"2,default,i64" json:"his_like_count"`
}

func NewUpdateVideoHisLikeCountRequest() *UpdateVideoHisLikeCountRequest {
	return &UpdateVideoHisLikeCountRequest{}
}

func (p *UpdateVideoHisLikeCountRequest) InitDefault() {
}

func (p *UpdateVideoHisLikeCountRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *UpdateVideoHisLikeCountRequest) GetHisLikeCount() (v int64) {
	return p.HisLikeCount
}
func (p *UpdateVideoHisLikeCountRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *UpdateVideoHisLikeCountRequest) SetHisLikeCount(val int64) {
	p.HisLikeCount = val
}

func (p *UpdateVideoHisLikeCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoHisLikeCountRequest(%+v)", *p)
}

var fieldIDToName_UpdateVideoHisLikeCountRequest = map[int16]string{
	1: "video_id",
	2: "his_like_count",
}

type UpdateVideoHisLikeCountResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewUpdateVideoHisLikeCountResponse() *UpdateVideoHisLikeCountResponse {
	return &UpdateVideoHisLikeCountResponse{}
}

func (p *UpdateVideoHisLikeCountResponse) InitDefault() {
}

var UpdateVideoHisLikeCountResponse_Base_DEFAULT *base.Status

func (p *UpdateVideoHisLikeCountResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UpdateVideoHisLikeCountResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateVideoHisLikeCountResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *UpdateVideoHisLikeCountResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateVideoHisLikeCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVideoHisLikeCountResponse(%+v)", *p)
}

var fieldIDToName_UpdateVideoHisLikeCountResponse = map[int16]string{
	1: "base",
}

type GetVideoVisitCountRequest struct {
	VideoId int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
}

func NewGetVideoVisitCountRequest() *GetVideoVisitCountRequest {
	return &GetVideoVisitCountRequest{}
}

func (p *GetVideoVisitCountRequest) InitDefault() {
}

func (p *GetVideoVisitCountRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *GetVideoVisitCountRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *GetVideoVisitCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoVisitCountRequest(%+v)", *p)
}

var fieldIDToName_GetVideoVisitCountRequest = map[int16]string{
	1: "video_id",
}

type GetVideoVisitCountResponse struct {
	Base       *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VisitCount int64        `thrift:"visit_count,2" frugal:"2,default,i64" json:"visit_count"`
}

func NewGetVideoVisitCountResponse() *GetVideoVisitCountResponse {
	return &GetVideoVisitCountResponse{}
}

func (p *GetVideoVisitCountResponse) InitDefault() {
}

var GetVideoVisitCountResponse_Base_DEFAULT *base.Status

func (p *GetVideoVisitCountResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetVideoVisitCountResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetVideoVisitCountResponse) GetVisitCount() (v int64) {
	return p.VisitCount
}
func (p *GetVideoVisitCountResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetVideoVisitCountResponse) SetVisitCount(val int64) {
	p.VisitCount = val
}

func (p *GetVideoVisitCountResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetVideoVisitCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoVisitCountResponse(%+v)", *p)
}

var fieldIDToName_GetVideoVisitCountResponse = map[int16]string{
	1: "base",
	2: "visit_count",
}

type GetVideoVisitCountInRedisRequest struct {
	VideoId int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
}

func NewGetVideoVisitCountInRedisRequest() *GetVideoVisitCountInRedisRequest {
	return &GetVideoVisitCountInRedisRequest{}
}

func (p *GetVideoVisitCountInRedisRequest) InitDefault() {
}

func (p *GetVideoVisitCountInRedisRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *GetVideoVisitCountInRedisRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *GetVideoVisitCountInRedisRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoVisitCountInRedisRequest(%+v)", *p)
}

var fieldIDToName_GetVideoVisitCountInRedisRequest = map[int16]string{
	1: "video_id",
}

type GetVideoVisitCountInRedisResponse struct {
	VisitCount int64        `thrift:"visit_count,1" frugal:"1,default,i64" json:"visit_count"`
	Base       *base.Status `thrift:"base,2" frugal:"2,default,base.Status" json:"base"`
}

func NewGetVideoVisitCountInRedisResponse() *GetVideoVisitCountInRedisResponse {
	return &GetVideoVisitCountInRedisResponse{}
}

func (p *GetVideoVisitCountInRedisResponse) InitDefault() {
}

func (p *GetVideoVisitCountInRedisResponse) GetVisitCount() (v int64) {
	return p.VisitCount
}

var GetVideoVisitCountInRedisResponse_Base_DEFAULT *base.Status

func (p *GetVideoVisitCountInRedisResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetVideoVisitCountInRedisResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetVideoVisitCountInRedisResponse) SetVisitCount(val int64) {
	p.VisitCount = val
}
func (p *GetVideoVisitCountInRedisResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *GetVideoVisitCountInRedisResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetVideoVisitCountInRedisResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoVisitCountInRedisResponse(%+v)", *p)
}

var fieldIDToName_GetVideoVisitCountInRedisResponse = map[int16]string{
	1: "visit_count",
	2: "base",
}

type StreamVideoRequest struct {
	Index string `thrift:"index,1" frugal:"1,default,string" json:"index"`
}

func NewStreamVideoRequest() *StreamVideoRequest {
	return &StreamVideoRequest{}
}

func (p *StreamVideoRequest) InitDefault() {
}

func (p *StreamVideoRequest) GetIndex() (v string) {
	return p.Index
}
func (p *StreamVideoRequest) SetIndex(val string) {
	p.Index = val
}

func (p *StreamVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamVideoRequest(%+v)", *p)
}

var fieldIDToName_StreamVideoRequest = map[int16]string{
	1: "index",
}

type StreamVideoResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Data int8         `thrift:"data,2" frugal:"2,default,byte" json:"data"`
}

func NewStreamVideoResponse() *StreamVideoResponse {
	return &StreamVideoResponse{}
}

func (p *StreamVideoResponse) InitDefault() {
}

var StreamVideoResponse_Base_DEFAULT *base.Status

func (p *StreamVideoResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return StreamVideoResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *StreamVideoResponse) GetData() (v int8) {
	return p.Data
}
func (p *StreamVideoResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *StreamVideoResponse) SetData(val int8) {
	p.Data = val
}

func (p *StreamVideoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *StreamVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamVideoResponse(%+v)", *p)
}

var fieldIDToName_StreamVideoResponse = map[int16]string{
	1: "base",
	2: "data",
}

type CreateFavoriteRequest struct {
	UserId      int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Name        string `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Description string `thrift:"description,3" frugal:"3,default,string" json:"description"`
	CoverUrl    string `thrift:"cover_url,4" frugal:"4,default,string" json:"cover_url"`
}

func NewCreateFavoriteRequest() *CreateFavoriteRequest {
	return &CreateFavoriteRequest{}
}

func (p *CreateFavoriteRequest) InitDefault() {
}

func (p *CreateFavoriteRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *CreateFavoriteRequest) GetName() (v string) {
	return p.Name
}

func (p *CreateFavoriteRequest) GetDescription() (v string) {
	return p.Description
}

func (p *CreateFavoriteRequest) GetCoverUrl() (v string) {
	return p.CoverUrl
}
func (p *CreateFavoriteRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *CreateFavoriteRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateFavoriteRequest) SetDescription(val string) {
	p.Description = val
}
func (p *CreateFavoriteRequest) SetCoverUrl(val string) {
	p.CoverUrl = val
}

func (p *CreateFavoriteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFavoriteRequest(%+v)", *p)
}

var fieldIDToName_CreateFavoriteRequest = map[int16]string{
	1: "user_id",
	2: "name",
	3: "description",
	4: "cover_url",
}

type CreateFavoriteResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewCreateFavoriteResponse() *CreateFavoriteResponse {
	return &CreateFavoriteResponse{}
}

func (p *CreateFavoriteResponse) InitDefault() {
}

var CreateFavoriteResponse_Base_DEFAULT *base.Status

func (p *CreateFavoriteResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return CreateFavoriteResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateFavoriteResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *CreateFavoriteResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateFavoriteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFavoriteResponse(%+v)", *p)
}

var fieldIDToName_CreateFavoriteResponse = map[int16]string{
	1: "base",
}

type GetFavoriteListRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum  int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewGetFavoriteListRequest() *GetFavoriteListRequest {
	return &GetFavoriteListRequest{}
}

func (p *GetFavoriteListRequest) InitDefault() {
}

func (p *GetFavoriteListRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetFavoriteListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *GetFavoriteListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *GetFavoriteListRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetFavoriteListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *GetFavoriteListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *GetFavoriteListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFavoriteListRequest(%+v)", *p)
}

var fieldIDToName_GetFavoriteListRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
}

type GetFavoriteListResponse struct {
	Base         *base.Status     `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	FavoriteList []*base.Favorite `thrift:"favorite_list,2" frugal:"2,default,list<base.Favorite>" json:"favorite_list"`
}

func NewGetFavoriteListResponse() *GetFavoriteListResponse {
	return &GetFavoriteListResponse{}
}

func (p *GetFavoriteListResponse) InitDefault() {
}

var GetFavoriteListResponse_Base_DEFAULT *base.Status

func (p *GetFavoriteListResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetFavoriteListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetFavoriteListResponse) GetFavoriteList() (v []*base.Favorite) {
	return p.FavoriteList
}
func (p *GetFavoriteListResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetFavoriteListResponse) SetFavoriteList(val []*base.Favorite) {
	p.FavoriteList = val
}

func (p *GetFavoriteListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetFavoriteListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFavoriteListResponse(%+v)", *p)
}

var fieldIDToName_GetFavoriteListResponse = map[int16]string{
	1: "base",
	2: "favorite_list",
}

type AddFavoriteVideoRequest struct {
	FavoriteId int64 `thrift:"favorite_id,1" frugal:"1,default,i64" json:"favorite_id"`
	UserId     int64 `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	VideoId    int64 `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
}

func NewAddFavoriteVideoRequest() *AddFavoriteVideoRequest {
	return &AddFavoriteVideoRequest{}
}

func (p *AddFavoriteVideoRequest) InitDefault() {
}

func (p *AddFavoriteVideoRequest) GetFavoriteId() (v int64) {
	return p.FavoriteId
}

func (p *AddFavoriteVideoRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *AddFavoriteVideoRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *AddFavoriteVideoRequest) SetFavoriteId(val int64) {
	p.FavoriteId = val
}
func (p *AddFavoriteVideoRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *AddFavoriteVideoRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *AddFavoriteVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFavoriteVideoRequest(%+v)", *p)
}

var fieldIDToName_AddFavoriteVideoRequest = map[int16]string{
	1: "favorite_id",
	2: "user_id",
	3: "video_id",
}

type AddFavoriteVideoResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewAddFavoriteVideoResponse() *AddFavoriteVideoResponse {
	return &AddFavoriteVideoResponse{}
}

func (p *AddFavoriteVideoResponse) InitDefault() {
}

var AddFavoriteVideoResponse_Base_DEFAULT *base.Status

func (p *AddFavoriteVideoResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return AddFavoriteVideoResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *AddFavoriteVideoResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *AddFavoriteVideoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddFavoriteVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFavoriteVideoResponse(%+v)", *p)
}

var fieldIDToName_AddFavoriteVideoResponse = map[int16]string{
	1: "base",
}

type GetFavoriteVideoListRequest struct {
	UserId     int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	FavoriteId int64 `thrift:"favorite_id,2" frugal:"2,default,i64" json:"favorite_id"`
	PageNum    int64 `thrift:"page_num,3" frugal:"3,default,i64" json:"page_num"`
	PageSize   int64 `thrift:"page_size,4" frugal:"4,default,i64" json:"page_size"`
}

func NewGetFavoriteVideoListRequest() *GetFavoriteVideoListRequest {
	return &GetFavoriteVideoListRequest{}
}

func (p *GetFavoriteVideoListRequest) InitDefault() {
}

func (p *GetFavoriteVideoListRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetFavoriteVideoListRequest) GetFavoriteId() (v int64) {
	return p.FavoriteId
}

func (p *GetFavoriteVideoListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *GetFavoriteVideoListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *GetFavoriteVideoListRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetFavoriteVideoListRequest) SetFavoriteId(val int64) {
	p.FavoriteId = val
}
func (p *GetFavoriteVideoListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *GetFavoriteVideoListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *GetFavoriteVideoListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFavoriteVideoListRequest(%+v)", *p)
}

var fieldIDToName_GetFavoriteVideoListRequest = map[int16]string{
	1: "user_id",
	2: "favorite_id",
	3: "page_num",
	4: "page_size",
}

type GetFavoriteVideoListResponse struct {
	Base      *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoList []*base.Video `thrift:"video_list,2" frugal:"2,default,list<base.Video>" json:"video_list"`
}

func NewGetFavoriteVideoListResponse() *GetFavoriteVideoListResponse {
	return &GetFavoriteVideoListResponse{}
}

func (p *GetFavoriteVideoListResponse) InitDefault() {
}

var GetFavoriteVideoListResponse_Base_DEFAULT *base.Status

func (p *GetFavoriteVideoListResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetFavoriteVideoListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetFavoriteVideoListResponse) GetVideoList() (v []*base.Video) {
	return p.VideoList
}
func (p *GetFavoriteVideoListResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetFavoriteVideoListResponse) SetVideoList(val []*base.Video) {
	p.VideoList = val
}

func (p *GetFavoriteVideoListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetFavoriteVideoListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFavoriteVideoListResponse(%+v)", *p)
}

var fieldIDToName_GetFavoriteVideoListResponse = map[int16]string{
	1: "base",
	2: "video_list",
}

type GetVideoFromFavoriteRequest struct {
	FavoriteId int64 `thrift:"favorite_id,1" frugal:"1,default,i64" json:"favorite_id"`
	UserId     int64 `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	VideoId    int64 `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
	PageNum    int64 `thrift:"page_num,4" frugal:"4,default,i64" json:"page_num"`
	PageSize   int64 `thrift:"page_size,5" frugal:"5,default,i64" json:"page_size"`
}

func NewGetVideoFromFavoriteRequest() *GetVideoFromFavoriteRequest {
	return &GetVideoFromFavoriteRequest{}
}

func (p *GetVideoFromFavoriteRequest) InitDefault() {
}

func (p *GetVideoFromFavoriteRequest) GetFavoriteId() (v int64) {
	return p.FavoriteId
}

func (p *GetVideoFromFavoriteRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetVideoFromFavoriteRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *GetVideoFromFavoriteRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *GetVideoFromFavoriteRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *GetVideoFromFavoriteRequest) SetFavoriteId(val int64) {
	p.FavoriteId = val
}
func (p *GetVideoFromFavoriteRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetVideoFromFavoriteRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *GetVideoFromFavoriteRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *GetVideoFromFavoriteRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *GetVideoFromFavoriteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoFromFavoriteRequest(%+v)", *p)
}

var fieldIDToName_GetVideoFromFavoriteRequest = map[int16]string{
	1: "favorite_id",
	2: "user_id",
	3: "video_id",
	4: "page_num",
	5: "page_size",
}

type GetVideoFromFavoriteResponse struct {
	Base  *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Video *base.Video  `thrift:"video,2" frugal:"2,default,base.Video" json:"video"`
}

func NewGetVideoFromFavoriteResponse() *GetVideoFromFavoriteResponse {
	return &GetVideoFromFavoriteResponse{}
}

func (p *GetVideoFromFavoriteResponse) InitDefault() {
}

var GetVideoFromFavoriteResponse_Base_DEFAULT *base.Status

func (p *GetVideoFromFavoriteResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetVideoFromFavoriteResponse_Base_DEFAULT
	}
	return p.Base
}

var GetVideoFromFavoriteResponse_Video_DEFAULT *base.Video

func (p *GetVideoFromFavoriteResponse) GetVideo() (v *base.Video) {
	if !p.IsSetVideo() {
		return GetVideoFromFavoriteResponse_Video_DEFAULT
	}
	return p.Video
}
func (p *GetVideoFromFavoriteResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetVideoFromFavoriteResponse) SetVideo(val *base.Video) {
	p.Video = val
}

func (p *GetVideoFromFavoriteResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetVideoFromFavoriteResponse) IsSetVideo() bool {
	return p.Video != nil
}

func (p *GetVideoFromFavoriteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoFromFavoriteResponse(%+v)", *p)
}

var fieldIDToName_GetVideoFromFavoriteResponse = map[int16]string{
	1: "base",
	2: "video",
}

type DeleteFavoriteRequest struct {
	UserId     int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	FavoriteId int64 `thrift:"favorite_id,2" frugal:"2,default,i64" json:"favorite_id"`
}

func NewDeleteFavoriteRequest() *DeleteFavoriteRequest {
	return &DeleteFavoriteRequest{}
}

func (p *DeleteFavoriteRequest) InitDefault() {
}

func (p *DeleteFavoriteRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *DeleteFavoriteRequest) GetFavoriteId() (v int64) {
	return p.FavoriteId
}
func (p *DeleteFavoriteRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *DeleteFavoriteRequest) SetFavoriteId(val int64) {
	p.FavoriteId = val
}

func (p *DeleteFavoriteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteFavoriteRequest(%+v)", *p)
}

var fieldIDToName_DeleteFavoriteRequest = map[int16]string{
	1: "user_id",
	2: "favorite_id",
}

type DeleteFavoriteResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewDeleteFavoriteResponse() *DeleteFavoriteResponse {
	return &DeleteFavoriteResponse{}
}

func (p *DeleteFavoriteResponse) InitDefault() {
}

var DeleteFavoriteResponse_Base_DEFAULT *base.Status

func (p *DeleteFavoriteResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return DeleteFavoriteResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteFavoriteResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *DeleteFavoriteResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteFavoriteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteFavoriteResponse(%+v)", *p)
}

var fieldIDToName_DeleteFavoriteResponse = map[int16]string{
	1: "base",
}

type DeleteVideoFromFavoriteRequest struct {
	FavoriteId int64 `thrift:"favorite_id,1" frugal:"1,default,i64" json:"favorite_id"`
	UserId     int64 `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	VideoId    int64 `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
}

func NewDeleteVideoFromFavoriteRequest() *DeleteVideoFromFavoriteRequest {
	return &DeleteVideoFromFavoriteRequest{}
}

func (p *DeleteVideoFromFavoriteRequest) InitDefault() {
}

func (p *DeleteVideoFromFavoriteRequest) GetFavoriteId() (v int64) {
	return p.FavoriteId
}

func (p *DeleteVideoFromFavoriteRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *DeleteVideoFromFavoriteRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *DeleteVideoFromFavoriteRequest) SetFavoriteId(val int64) {
	p.FavoriteId = val
}
func (p *DeleteVideoFromFavoriteRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *DeleteVideoFromFavoriteRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *DeleteVideoFromFavoriteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteVideoFromFavoriteRequest(%+v)", *p)
}

var fieldIDToName_DeleteVideoFromFavoriteRequest = map[int16]string{
	1: "favorite_id",
	2: "user_id",
	3: "video_id",
}

type DeleteVideoFromFavoriteResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewDeleteVideoFromFavoriteResponse() *DeleteVideoFromFavoriteResponse {
	return &DeleteVideoFromFavoriteResponse{}
}

func (p *DeleteVideoFromFavoriteResponse) InitDefault() {
}

var DeleteVideoFromFavoriteResponse_Base_DEFAULT *base.Status

func (p *DeleteVideoFromFavoriteResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return DeleteVideoFromFavoriteResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteVideoFromFavoriteResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *DeleteVideoFromFavoriteResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteVideoFromFavoriteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteVideoFromFavoriteResponse(%+v)", *p)
}

var fieldIDToName_DeleteVideoFromFavoriteResponse = map[int16]string{
	1: "base",
}

type SharedVideoRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	ToUserId int64 `thrift:"to_user_id,2" frugal:"2,default,i64" json:"to_user_id"`
	VideoId  int64 `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
}

func NewSharedVideoRequest() *SharedVideoRequest {
	return &SharedVideoRequest{}
}

func (p *SharedVideoRequest) InitDefault() {
}

func (p *SharedVideoRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *SharedVideoRequest) GetToUserId() (v int64) {
	return p.ToUserId
}

func (p *SharedVideoRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *SharedVideoRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *SharedVideoRequest) SetToUserId(val int64) {
	p.ToUserId = val
}
func (p *SharedVideoRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *SharedVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SharedVideoRequest(%+v)", *p)
}

var fieldIDToName_SharedVideoRequest = map[int16]string{
	1: "user_id",
	2: "to_user_id",
	3: "video_id",
}

type SharedVideoResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewSharedVideoResponse() *SharedVideoResponse {
	return &SharedVideoResponse{}
}

func (p *SharedVideoResponse) InitDefault() {
}

var SharedVideoResponse_Base_DEFAULT *base.Status

func (p *SharedVideoResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return SharedVideoResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *SharedVideoResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *SharedVideoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SharedVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SharedVideoResponse(%+v)", *p)
}

var fieldIDToName_SharedVideoResponse = map[int16]string{
	1: "base",
}

type GetPopularVideoRequest struct {
	PageNum  int64 `thrift:"page_num,1" frugal:"1,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,2" frugal:"2,default,i64" json:"page_size"`
}

func NewGetPopularVideoRequest() *GetPopularVideoRequest {
	return &GetPopularVideoRequest{}
}

func (p *GetPopularVideoRequest) InitDefault() {
}

func (p *GetPopularVideoRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *GetPopularVideoRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *GetPopularVideoRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *GetPopularVideoRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *GetPopularVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPopularVideoRequest(%+v)", *p)
}

var fieldIDToName_GetPopularVideoRequest = map[int16]string{
	1: "page_num",
	2: "page_size",
}

type GetPopularVideoResponse struct {
	Base      *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoList []*base.Video `thrift:"video_list,2" frugal:"2,default,list<base.Video>" json:"video_list"`
}

func NewGetPopularVideoResponse() *GetPopularVideoResponse {
	return &GetPopularVideoResponse{}
}

func (p *GetPopularVideoResponse) InitDefault() {
}

var GetPopularVideoResponse_Base_DEFAULT *base.Status

func (p *GetPopularVideoResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetPopularVideoResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetPopularVideoResponse) GetVideoList() (v []*base.Video) {
	return p.VideoList
}
func (p *GetPopularVideoResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetPopularVideoResponse) SetVideoList(val []*base.Video) {
	p.VideoList = val
}

func (p *GetPopularVideoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPopularVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPopularVideoResponse(%+v)", *p)
}

var fieldIDToName_GetPopularVideoResponse = map[int16]string{
	1: "base",
	2: "video_list",
}

type RecommendVideoRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewRecommendVideoRequest() *RecommendVideoRequest {
	return &RecommendVideoRequest{}
}

func (p *RecommendVideoRequest) InitDefault() {
}

func (p *RecommendVideoRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *RecommendVideoRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *RecommendVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendVideoRequest(%+v)", *p)
}

var fieldIDToName_RecommendVideoRequest = map[int16]string{
	1: "user_id",
}

type RecommendVideoResponse struct {
	Base      *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoList []*base.Video `thrift:"video_list,2" frugal:"2,default,list<base.Video>" json:"video_list"`
}

func NewRecommendVideoResponse() *RecommendVideoResponse {
	return &RecommendVideoResponse{}
}

func (p *RecommendVideoResponse) InitDefault() {
}

var RecommendVideoResponse_Base_DEFAULT *base.Status

func (p *RecommendVideoResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return RecommendVideoResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *RecommendVideoResponse) GetVideoList() (v []*base.Video) {
	return p.VideoList
}
func (p *RecommendVideoResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *RecommendVideoResponse) SetVideoList(val []*base.Video) {
	p.VideoList = val
}

func (p *RecommendVideoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *RecommendVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendVideoResponse(%+v)", *p)
}

var fieldIDToName_RecommendVideoResponse = map[int16]string{
	1: "base",
	2: "video_list",
}

type VideoStorageInfo struct {
	UserId            int64             `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId           int64             `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	SourcePath        string            `thrift:"source_path,3" frugal:"3,default,string" json:"source_path"`
	ProcessedPaths    map[int32]string  `thrift:"processed_paths,4" frugal:"4,default,map<i32:string>" json:"processed_paths"`
	ThumbnailPaths    map[string]string `thrift:"thumbnail_paths,5" frugal:"5,default,map<string:string>" json:"thumbnail_paths"`
	AnimatedCoverPath string            `thrift:"animated_cover_path,6" frugal:"6,default,string" json:"animated_cover_path"`
	MetadataPath      string            `thrift:"metadata_path,7" frugal:"7,default,string" json:"metadata_path"`
	StorageTier       string            `thrift:"storage_tier,8" frugal:"8,default,string" json:"storage_tier"`
	BucketName        string            `thrift:"bucket_name,9" frugal:"9,default,string" json:"bucket_name"`
	FileSize          int64             `thrift:"file_size,10" frugal:"10,default,i64" json:"file_size"`
	DurationSeconds   int32             `thrift:"duration_seconds,11" frugal:"11,default,i32" json:"duration_seconds"`
	Resolution        *VideoResolution  `thrift:"resolution,12" frugal:"12,default,VideoResolution" json:"resolution"`
	Format            string            `thrift:"format,13" frugal:"13,default,string" json:"format"`
}

func NewVideoStorageInfo() *VideoStorageInfo {
	return &VideoStorageInfo{}
}

func (p *VideoStorageInfo) InitDefault() {
}

func (p *VideoStorageInfo) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoStorageInfo) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoStorageInfo) GetSourcePath() (v string) {
	return p.SourcePath
}

func (p *VideoStorageInfo) GetProcessedPaths() (v map[int32]string) {
	return p.ProcessedPaths
}

func (p *VideoStorageInfo) GetThumbnailPaths() (v map[string]string) {
	return p.ThumbnailPaths
}

func (p *VideoStorageInfo) GetAnimatedCoverPath() (v string) {
	return p.AnimatedCoverPath
}

func (p *VideoStorageInfo) GetMetadataPath() (v string) {
	return p.MetadataPath
}

func (p *VideoStorageInfo) GetStorageTier() (v string) {
	return p.StorageTier
}

func (p *VideoStorageInfo) GetBucketName() (v string) {
	return p.BucketName
}

func (p *VideoStorageInfo) GetFileSize() (v int64) {
	return p.FileSize
}

func (p *VideoStorageInfo) GetDurationSeconds() (v int32) {
	return p.DurationSeconds
}

var VideoStorageInfo_Resolution_DEFAULT *VideoResolution

func (p *VideoStorageInfo) GetResolution() (v *VideoResolution) {
	if !p.IsSetResolution() {
		return VideoStorageInfo_Resolution_DEFAULT
	}
	return p.Resolution
}

func (p *VideoStorageInfo) GetFormat() (v string) {
	return p.Format
}
func (p *VideoStorageInfo) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoStorageInfo) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoStorageInfo) SetSourcePath(val string) {
	p.SourcePath = val
}
func (p *VideoStorageInfo) SetProcessedPaths(val map[int32]string) {
	p.ProcessedPaths = val
}
func (p *VideoStorageInfo) SetThumbnailPaths(val map[string]string) {
	p.ThumbnailPaths = val
}
func (p *VideoStorageInfo) SetAnimatedCoverPath(val string) {
	p.AnimatedCoverPath = val
}
func (p *VideoStorageInfo) SetMetadataPath(val string) {
	p.MetadataPath = val
}
func (p *VideoStorageInfo) SetStorageTier(val string) {
	p.StorageTier = val
}
func (p *VideoStorageInfo) SetBucketName(val string) {
	p.BucketName = val
}
func (p *VideoStorageInfo) SetFileSize(val int64) {
	p.FileSize = val
}
func (p *VideoStorageInfo) SetDurationSeconds(val int32) {
	p.DurationSeconds = val
}
func (p *VideoStorageInfo) SetResolution(val *VideoResolution) {
	p.Resolution = val
}
func (p *VideoStorageInfo) SetFormat(val string) {
	p.Format = val
}

func (p *VideoStorageInfo) IsSetResolution() bool {
	return p.Resolution != nil
}

func (p *VideoStorageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoStorageInfo(%+v)", *p)
}

var fieldIDToName_VideoStorageInfo = map[int16]string{
	1:  "user_id",
	2:  "video_id",
	3:  "source_path",
	4:  "processed_paths",
	5:  "thumbnail_paths",
	6:  "animated_cover_path",
	7:  "metadata_path",
	8:  "storage_tier",
	9:  "bucket_name",
	10: "file_size",
	11: "duration_seconds",
	12: "resolution",
	13: "format",
}

type VideoHeatManagementRequest struct {
	VideoId   int64  `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	Operation string `thrift:"operation,2" frugal:"2,default,string" json:"operation"`
	Reason    string `thrift:"reason,3" frugal:"3,default,string" json:"reason"`
}

func NewVideoHeatManagementRequest() *VideoHeatManagementRequest {
	return &VideoHeatManagementRequest{}
}

func (p *VideoHeatManagementRequest) InitDefault() {
}

func (p *VideoHeatManagementRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoHeatManagementRequest) GetOperation() (v string) {
	return p.Operation
}

func (p *VideoHeatManagementRequest) GetReason() (v string) {
	return p.Reason
}
func (p *VideoHeatManagementRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoHeatManagementRequest) SetOperation(val string) {
	p.Operation = val
}
func (p *VideoHeatManagementRequest) SetReason(val string) {
	p.Reason = val
}

func (p *VideoHeatManagementRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHeatManagementRequest(%+v)", *p)
}

var fieldIDToName_VideoHeatManagementRequest = map[int16]string{
	1: "video_id",
	2: "operation",
	3: "reason",
}

type VideoHeatManagementResponse struct {
	Base               *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	OldTier            string       `thrift:"old_tier,2" frugal:"2,default,string" json:"old_tier"`
	NewTier_           string       `thrift:"new_tier,3" frugal:"3,default,string" json:"new_tier"`
	OperationCostBytes int64        `thrift:"operation_cost_bytes,4" frugal:"4,default,i64" json:"operation_cost_bytes"`
}

func NewVideoHeatManagementResponse() *VideoHeatManagementResponse {
	return &VideoHeatManagementResponse{}
}

func (p *VideoHeatManagementResponse) InitDefault() {
}

var VideoHeatManagementResponse_Base_DEFAULT *base.Status

func (p *VideoHeatManagementResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoHeatManagementResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoHeatManagementResponse) GetOldTier() (v string) {
	return p.OldTier
}

func (p *VideoHeatManagementResponse) GetNewTier_() (v string) {
	return p.NewTier_
}

func (p *VideoHeatManagementResponse) GetOperationCostBytes() (v int64) {
	return p.OperationCostBytes
}
func (p *VideoHeatManagementResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoHeatManagementResponse) SetOldTier(val string) {
	p.OldTier = val
}
func (p *VideoHeatManagementResponse) SetNewTier_(val string) {
	p.NewTier_ = val
}
func (p *VideoHeatManagementResponse) SetOperationCostBytes(val int64) {
	p.OperationCostBytes = val
}

func (p *VideoHeatManagementResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoHeatManagementResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoHeatManagementResponse(%+v)", *p)
}

var fieldIDToName_VideoHeatManagementResponse = map[int16]string{
	1: "base",
	2: "old_tier",
	3: "new_tier",
	4: "operation_cost_bytes",
}

type UserQuotaManagementRequest struct {
	UserId    int64             `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Operation string            `thrift:"operation,2" frugal:"2,default,string" json:"operation"`
	NewQuota_ *UserStorageQuota `thrift:"new_quota,3" frugal:"3,default,UserStorageQuota" json:"new_quota"`
}

func NewUserQuotaManagementRequest() *UserQuotaManagementRequest {
	return &UserQuotaManagementRequest{}
}

func (p *UserQuotaManagementRequest) InitDefault() {
}

func (p *UserQuotaManagementRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *UserQuotaManagementRequest) GetOperation() (v string) {
	return p.Operation
}

var UserQuotaManagementRequest_NewQuota__DEFAULT *UserStorageQuota

func (p *UserQuotaManagementRequest) GetNewQuota_() (v *UserStorageQuota) {
	if !p.IsSetNewQuota_() {
		return UserQuotaManagementRequest_NewQuota__DEFAULT
	}
	return p.NewQuota_
}
func (p *UserQuotaManagementRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *UserQuotaManagementRequest) SetOperation(val string) {
	p.Operation = val
}
func (p *UserQuotaManagementRequest) SetNewQuota_(val *UserStorageQuota) {
	p.NewQuota_ = val
}

func (p *UserQuotaManagementRequest) IsSetNewQuota_() bool {
	return p.NewQuota_ != nil
}

func (p *UserQuotaManagementRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserQuotaManagementRequest(%+v)", *p)
}

var fieldIDToName_UserQuotaManagementRequest = map[int16]string{
	1: "user_id",
	2: "operation",
	3: "new_quota",
}

type UserQuotaManagementResponse struct {
	Base          *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	CurrentQuota  *UserStorageQuota `thrift:"current_quota,2" frugal:"2,default,UserStorageQuota" json:"current_quota"`
	QuotaWarnings []string          `thrift:"quota_warnings,3" frugal:"3,default,list<string>" json:"quota_warnings"`
	QuotaExceeded bool              `thrift:"quota_exceeded,4" frugal:"4,default,bool" json:"quota_exceeded"`
}

func NewUserQuotaManagementResponse() *UserQuotaManagementResponse {
	return &UserQuotaManagementResponse{}
}

func (p *UserQuotaManagementResponse) InitDefault() {
}

var UserQuotaManagementResponse_Base_DEFAULT *base.Status

func (p *UserQuotaManagementResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UserQuotaManagementResponse_Base_DEFAULT
	}
	return p.Base
}

var UserQuotaManagementResponse_CurrentQuota_DEFAULT *UserStorageQuota

func (p *UserQuotaManagementResponse) GetCurrentQuota() (v *UserStorageQuota) {
	if !p.IsSetCurrentQuota() {
		return UserQuotaManagementResponse_CurrentQuota_DEFAULT
	}
	return p.CurrentQuota
}

func (p *UserQuotaManagementResponse) GetQuotaWarnings() (v []string) {
	return p.QuotaWarnings
}

func (p *UserQuotaManagementResponse) GetQuotaExceeded() (v bool) {
	return p.QuotaExceeded
}
func (p *UserQuotaManagementResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *UserQuotaManagementResponse) SetCurrentQuota(val *UserStorageQuota) {
	p.CurrentQuota = val
}
func (p *UserQuotaManagementResponse) SetQuotaWarnings(val []string) {
	p.QuotaWarnings = val
}
func (p *UserQuotaManagementResponse) SetQuotaExceeded(val bool) {
	p.QuotaExceeded = val
}

func (p *UserQuotaManagementResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UserQuotaManagementResponse) IsSetCurrentQuota() bool {
	return p.CurrentQuota != nil
}

func (p *UserQuotaManagementResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserQuotaManagementResponse(%+v)", *p)
}

var fieldIDToName_UserQuotaManagementResponse = map[int16]string{
	1: "base",
	2: "current_quota",
	3: "quota_warnings",
	4: "quota_exceeded",
}

type BatchVideoOperationRequest struct {
	UserId          int64             `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoIds        []int64           `thrift:"video_ids,2" frugal:"2,default,list<i64>" json:"video_ids"`
	Operation       string            `thrift:"operation,3" frugal:"3,default,string" json:"operation"`
	OperationParams map[string]string `thrift:"operation_params,4" frugal:"4,default,map<string:string>" json:"operation_params"`
}

func NewBatchVideoOperationRequest() *BatchVideoOperationRequest {
	return &BatchVideoOperationRequest{}
}

func (p *BatchVideoOperationRequest) InitDefault() {
}

func (p *BatchVideoOperationRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *BatchVideoOperationRequest) GetVideoIds() (v []int64) {
	return p.VideoIds
}

func (p *BatchVideoOperationRequest) GetOperation() (v string) {
	return p.Operation
}

func (p *BatchVideoOperationRequest) GetOperationParams() (v map[string]string) {
	return p.OperationParams
}
func (p *BatchVideoOperationRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *BatchVideoOperationRequest) SetVideoIds(val []int64) {
	p.VideoIds = val
}
func (p *BatchVideoOperationRequest) SetOperation(val string) {
	p.Operation = val
}
func (p *BatchVideoOperationRequest) SetOperationParams(val map[string]string) {
	p.OperationParams = val
}

func (p *BatchVideoOperationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchVideoOperationRequest(%+v)", *p)
}

var fieldIDToName_BatchVideoOperationRequest = map[int16]string{
	1: "user_id",
	2: "video_ids",
	3: "operation",
	4: "operation_params",
}

type BatchVideoOperationResponse struct {
	Base              *base.Status      `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	SuccessVideoIds   []int64           `thrift:"success_video_ids,2" frugal:"2,default,list<i64>" json:"success_video_ids"`
	FailedVideoErrors map[int64]string  `thrift:"failed_video_errors,3" frugal:"3,default,map<i64:string>" json:"failed_video_errors"`
	UpdatedQuota      *UserStorageQuota `thrift:"updated_quota,4" frugal:"4,default,UserStorageQuota" json:"updated_quota"`
}

func NewBatchVideoOperationResponse() *BatchVideoOperationResponse {
	return &BatchVideoOperationResponse{}
}

func (p *BatchVideoOperationResponse) InitDefault() {
}

var BatchVideoOperationResponse_Base_DEFAULT *base.Status

func (p *BatchVideoOperationResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return BatchVideoOperationResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *BatchVideoOperationResponse) GetSuccessVideoIds() (v []int64) {
	return p.SuccessVideoIds
}

func (p *BatchVideoOperationResponse) GetFailedVideoErrors() (v map[int64]string) {
	return p.FailedVideoErrors
}

var BatchVideoOperationResponse_UpdatedQuota_DEFAULT *UserStorageQuota

func (p *BatchVideoOperationResponse) GetUpdatedQuota() (v *UserStorageQuota) {
	if !p.IsSetUpdatedQuota() {
		return BatchVideoOperationResponse_UpdatedQuota_DEFAULT
	}
	return p.UpdatedQuota
}
func (p *BatchVideoOperationResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *BatchVideoOperationResponse) SetSuccessVideoIds(val []int64) {
	p.SuccessVideoIds = val
}
func (p *BatchVideoOperationResponse) SetFailedVideoErrors(val map[int64]string) {
	p.FailedVideoErrors = val
}
func (p *BatchVideoOperationResponse) SetUpdatedQuota(val *UserStorageQuota) {
	p.UpdatedQuota = val
}

func (p *BatchVideoOperationResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchVideoOperationResponse) IsSetUpdatedQuota() bool {
	return p.UpdatedQuota != nil
}

func (p *BatchVideoOperationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchVideoOperationResponse(%+v)", *p)
}

var fieldIDToName_BatchVideoOperationResponse = map[int16]string{
	1: "base",
	2: "success_video_ids",
	3: "failed_video_errors",
	4: "updated_quota",
}

type VideoTranscodingRequest struct {
	UserId             int64    `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId            int64    `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	TargetQualities    []int32  `thrift:"target_qualities,3" frugal:"3,default,list<i32>" json:"target_qualities"`
	TargetFormats      []string `thrift:"target_formats,4" frugal:"4,default,list<string>" json:"target_formats"`
	GenerateThumbnails bool     `thrift:"generate_thumbnails,5" frugal:"5,default,bool" json:"generate_thumbnails"`
	ThumbnailCount     int32    `thrift:"thumbnail_count,6" frugal:"6,default,i32" json:"thumbnail_count"`
}

func NewVideoTranscodingRequest() *VideoTranscodingRequest {
	return &VideoTranscodingRequest{}
}

func (p *VideoTranscodingRequest) InitDefault() {
}

func (p *VideoTranscodingRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoTranscodingRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoTranscodingRequest) GetTargetQualities() (v []int32) {
	return p.TargetQualities
}

func (p *VideoTranscodingRequest) GetTargetFormats() (v []string) {
	return p.TargetFormats
}

func (p *VideoTranscodingRequest) GetGenerateThumbnails() (v bool) {
	return p.GenerateThumbnails
}

func (p *VideoTranscodingRequest) GetThumbnailCount() (v int32) {
	return p.ThumbnailCount
}
func (p *VideoTranscodingRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoTranscodingRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoTranscodingRequest) SetTargetQualities(val []int32) {
	p.TargetQualities = val
}
func (p *VideoTranscodingRequest) SetTargetFormats(val []string) {
	p.TargetFormats = val
}
func (p *VideoTranscodingRequest) SetGenerateThumbnails(val bool) {
	p.GenerateThumbnails = val
}
func (p *VideoTranscodingRequest) SetThumbnailCount(val int32) {
	p.ThumbnailCount = val
}

func (p *VideoTranscodingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoTranscodingRequest(%+v)", *p)
}

var fieldIDToName_VideoTranscodingRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "target_qualities",
	4: "target_formats",
	5: "generate_thumbnails",
	6: "thumbnail_count",
}

type VideoTranscodingResponse struct {
	Base                    *base.Status     `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	TranscodingJobId        int64            `thrift:"transcoding_job_id,2" frugal:"2,default,i64" json:"transcoding_job_id"`
	JobStatus               string           `thrift:"job_status,3" frugal:"3,default,string" json:"job_status"`
	TranscodedUrls          map[int32]string `thrift:"transcoded_urls,4" frugal:"4,default,map<i32:string>" json:"transcoded_urls"`
	ThumbnailUrls           []string         `thrift:"thumbnail_urls,5" frugal:"5,default,list<string>" json:"thumbnail_urls"`
	EstimatedCompletionTime int64            `thrift:"estimated_completion_time,6" frugal:"6,default,i64" json:"estimated_completion_time"`
}

func NewVideoTranscodingResponse() *VideoTranscodingResponse {
	return &VideoTranscodingResponse{}
}

func (p *VideoTranscodingResponse) InitDefault() {
}

var VideoTranscodingResponse_Base_DEFAULT *base.Status

func (p *VideoTranscodingResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoTranscodingResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoTranscodingResponse) GetTranscodingJobId() (v int64) {
	return p.TranscodingJobId
}

func (p *VideoTranscodingResponse) GetJobStatus() (v string) {
	return p.JobStatus
}

func (p *VideoTranscodingResponse) GetTranscodedUrls() (v map[int32]string) {
	return p.TranscodedUrls
}

func (p *VideoTranscodingResponse) GetThumbnailUrls() (v []string) {
	return p.ThumbnailUrls
}

func (p *VideoTranscodingResponse) GetEstimatedCompletionTime() (v int64) {
	return p.EstimatedCompletionTime
}
func (p *VideoTranscodingResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoTranscodingResponse) SetTranscodingJobId(val int64) {
	p.TranscodingJobId = val
}
func (p *VideoTranscodingResponse) SetJobStatus(val string) {
	p.JobStatus = val
}
func (p *VideoTranscodingResponse) SetTranscodedUrls(val map[int32]string) {
	p.TranscodedUrls = val
}
func (p *VideoTranscodingResponse) SetThumbnailUrls(val []string) {
	p.ThumbnailUrls = val
}
func (p *VideoTranscodingResponse) SetEstimatedCompletionTime(val int64) {
	p.EstimatedCompletionTime = val
}

func (p *VideoTranscodingResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoTranscodingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoTranscodingResponse(%+v)", *p)
}

var fieldIDToName_VideoTranscodingResponse = map[int16]string{
	1: "base",
	2: "transcoding_job_id",
	3: "job_status",
	4: "transcoded_urls",
	5: "thumbnail_urls",
	6: "estimated_completion_time",
}

type VideoAnalyticsRequest struct {
	UserId         int64    `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoIds       []int64  `thrift:"video_ids,2" frugal:"2,default,list<i64>" json:"video_ids"`
	DateRangeStart string   `thrift:"date_range_start,3" frugal:"3,default,string" json:"date_range_start"`
	DateRangeEnd   string   `thrift:"date_range_end,4" frugal:"4,default,string" json:"date_range_end"`
	Metrics        []string `thrift:"metrics,5" frugal:"5,default,list<string>" json:"metrics"`
}

func NewVideoAnalyticsRequest() *VideoAnalyticsRequest {
	return &VideoAnalyticsRequest{}
}

func (p *VideoAnalyticsRequest) InitDefault() {
}

func (p *VideoAnalyticsRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *VideoAnalyticsRequest) GetVideoIds() (v []int64) {
	return p.VideoIds
}

func (p *VideoAnalyticsRequest) GetDateRangeStart() (v string) {
	return p.DateRangeStart
}

func (p *VideoAnalyticsRequest) GetDateRangeEnd() (v string) {
	return p.DateRangeEnd
}

func (p *VideoAnalyticsRequest) GetMetrics() (v []string) {
	return p.Metrics
}
func (p *VideoAnalyticsRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *VideoAnalyticsRequest) SetVideoIds(val []int64) {
	p.VideoIds = val
}
func (p *VideoAnalyticsRequest) SetDateRangeStart(val string) {
	p.DateRangeStart = val
}
func (p *VideoAnalyticsRequest) SetDateRangeEnd(val string) {
	p.DateRangeEnd = val
}
func (p *VideoAnalyticsRequest) SetMetrics(val []string) {
	p.Metrics = val
}

func (p *VideoAnalyticsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoAnalyticsRequest(%+v)", *p)
}

var fieldIDToName_VideoAnalyticsRequest = map[int16]string{
	1: "user_id",
	2: "video_ids",
	3: "date_range_start",
	4: "date_range_end",
	5: "metrics",
}

type VideoAnalyticsResponse struct {
	Base                *base.Status               `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VideoMetrics        map[int64]map[string]int64 `thrift:"video_metrics,2" frugal:"2,default,map<i64:map<string:i64>>" json:"video_metrics"`
	TotalMetrics        map[string]int64           `thrift:"total_metrics,3" frugal:"3,default,map<string:i64>" json:"total_metrics"`
	TopPerformingVideos []string                   `thrift:"top_performing_videos,4" frugal:"4,default,list<string>" json:"top_performing_videos"`
	ReportGeneratedAt   string                     `thrift:"report_generated_at,5" frugal:"5,default,string" json:"report_generated_at"`
}

func NewVideoAnalyticsResponse() *VideoAnalyticsResponse {
	return &VideoAnalyticsResponse{}
}

func (p *VideoAnalyticsResponse) InitDefault() {
}

var VideoAnalyticsResponse_Base_DEFAULT *base.Status

func (p *VideoAnalyticsResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoAnalyticsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoAnalyticsResponse) GetVideoMetrics() (v map[int64]map[string]int64) {
	return p.VideoMetrics
}

func (p *VideoAnalyticsResponse) GetTotalMetrics() (v map[string]int64) {
	return p.TotalMetrics
}

func (p *VideoAnalyticsResponse) GetTopPerformingVideos() (v []string) {
	return p.TopPerformingVideos
}

func (p *VideoAnalyticsResponse) GetReportGeneratedAt() (v string) {
	return p.ReportGeneratedAt
}
func (p *VideoAnalyticsResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoAnalyticsResponse) SetVideoMetrics(val map[int64]map[string]int64) {
	p.VideoMetrics = val
}
func (p *VideoAnalyticsResponse) SetTotalMetrics(val map[string]int64) {
	p.TotalMetrics = val
}
func (p *VideoAnalyticsResponse) SetTopPerformingVideos(val []string) {
	p.TopPerformingVideos = val
}
func (p *VideoAnalyticsResponse) SetReportGeneratedAt(val string) {
	p.ReportGeneratedAt = val
}

func (p *VideoAnalyticsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoAnalyticsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoAnalyticsResponse(%+v)", *p)
}

var fieldIDToName_VideoAnalyticsResponse = map[int16]string{
	1: "base",
	2: "video_metrics",
	3: "total_metrics",
	4: "top_performing_videos",
	5: "report_generated_at",
}

type ImageFeatureExtractRequest struct {
	UserId       int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	ImageUrl     string `thrift:"image_url,2" frugal:"2,default,string" json:"image_url"`
	ImageData    []byte `thrift:"image_data,3" frugal:"3,default,binary" json:"image_data"`
	ImageFormat  string `thrift:"image_format,4" frugal:"4,default,string" json:"image_format"`
	ExtractModel string `thrift:"extract_model,5" frugal:"5,default,string" json:"extract_model"`
	RequestId    string `thrift:"request_id,6" frugal:"6,default,string" json:"request_id"`
}

func NewImageFeatureExtractRequest() *ImageFeatureExtractRequest {
	return &ImageFeatureExtractRequest{}
}

func (p *ImageFeatureExtractRequest) InitDefault() {
}

func (p *ImageFeatureExtractRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *ImageFeatureExtractRequest) GetImageUrl() (v string) {
	return p.ImageUrl
}

func (p *ImageFeatureExtractRequest) GetImageData() (v []byte) {
	return p.ImageData
}

func (p *ImageFeatureExtractRequest) GetImageFormat() (v string) {
	return p.ImageFormat
}

func (p *ImageFeatureExtractRequest) GetExtractModel() (v string) {
	return p.ExtractModel
}

func (p *ImageFeatureExtractRequest) GetRequestId() (v string) {
	return p.RequestId
}
func (p *ImageFeatureExtractRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *ImageFeatureExtractRequest) SetImageUrl(val string) {
	p.ImageUrl = val
}
func (p *ImageFeatureExtractRequest) SetImageData(val []byte) {
	p.ImageData = val
}
func (p *ImageFeatureExtractRequest) SetImageFormat(val string) {
	p.ImageFormat = val
}
func (p *ImageFeatureExtractRequest) SetExtractModel(val string) {
	p.ExtractModel = val
}
func (p *ImageFeatureExtractRequest) SetRequestId(val string) {
	p.RequestId = val
}

func (p *ImageFeatureExtractRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageFeatureExtractRequest(%+v)", *p)
}

var fieldIDToName_ImageFeatureExtractRequest = map[int16]string{
	1: "user_id",
	2: "image_url",
	3: "image_data",
	4: "image_format",
	5: "extract_model",
	6: "request_id",
}

type ImageFeatureExtractResponse struct {
	Base            *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	FeatureId       string       `thrift:"feature_id,2" frugal:"2,default,string" json:"feature_id"`
	FeatureVector   []float64    `thrift:"feature_vector,3" frugal:"3,default,list<double>" json:"feature_vector"`
	VectorDimension int32        `thrift:"vector_dimension,4" frugal:"4,default,i32" json:"vector_dimension"`
	ModelVersion    string       `thrift:"model_version,5" frugal:"5,default,string" json:"model_version"`
	ProcessingTime  float64      `thrift:"processing_time,6" frugal:"6,default,double" json:"processing_time"`
}

func NewImageFeatureExtractResponse() *ImageFeatureExtractResponse {
	return &ImageFeatureExtractResponse{}
}

func (p *ImageFeatureExtractResponse) InitDefault() {
}

var ImageFeatureExtractResponse_Base_DEFAULT *base.Status

func (p *ImageFeatureExtractResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return ImageFeatureExtractResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ImageFeatureExtractResponse) GetFeatureId() (v string) {
	return p.FeatureId
}

func (p *ImageFeatureExtractResponse) GetFeatureVector() (v []float64) {
	return p.FeatureVector
}

func (p *ImageFeatureExtractResponse) GetVectorDimension() (v int32) {
	return p.VectorDimension
}

func (p *ImageFeatureExtractResponse) GetModelVersion() (v string) {
	return p.ModelVersion
}

func (p *ImageFeatureExtractResponse) GetProcessingTime() (v float64) {
	return p.ProcessingTime
}
func (p *ImageFeatureExtractResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *ImageFeatureExtractResponse) SetFeatureId(val string) {
	p.FeatureId = val
}
func (p *ImageFeatureExtractResponse) SetFeatureVector(val []float64) {
	p.FeatureVector = val
}
func (p *ImageFeatureExtractResponse) SetVectorDimension(val int32) {
	p.VectorDimension = val
}
func (p *ImageFeatureExtractResponse) SetModelVersion(val string) {
	p.ModelVersion = val
}
func (p *ImageFeatureExtractResponse) SetProcessingTime(val float64) {
	p.ProcessingTime = val
}

func (p *ImageFeatureExtractResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ImageFeatureExtractResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageFeatureExtractResponse(%+v)", *p)
}

var fieldIDToName_ImageFeatureExtractResponse = map[int16]string{
	1: "base",
	2: "feature_id",
	3: "feature_vector",
	4: "vector_dimension",
	5: "model_version",
	6: "processing_time",
}

type ImageSearchRequest struct {
	UserId              int64               `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	QueryImageUrl       string              `thrift:"query_image_url,2" frugal:"2,default,string" json:"query_image_url"`
	QueryImageData      []byte              `thrift:"query_image_data,3" frugal:"3,default,binary" json:"query_image_data"`
	TopK                int32               `thrift:"top_k,4" frugal:"4,default,i32" json:"top_k"`
	SimilarityThreshold float64             `thrift:"similarity_threshold,5" frugal:"5,default,double" json:"similarity_threshold"`
	SearchScope         string              `thrift:"search_scope,6" frugal:"6,default,string" json:"search_scope"`
	Filters             *ImageSearchFilters `thrift:"filters,7" frugal:"7,default,ImageSearchFilters" json:"filters"`
	SearchModel         string              `thrift:"search_model,8" frugal:"8,default,string" json:"search_model"`
}

func NewImageSearchRequest() *ImageSearchRequest {
	return &ImageSearchRequest{}
}

func (p *ImageSearchRequest) InitDefault() {
}

func (p *ImageSearchRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *ImageSearchRequest) GetQueryImageUrl() (v string) {
	return p.QueryImageUrl
}

func (p *ImageSearchRequest) GetQueryImageData() (v []byte) {
	return p.QueryImageData
}

func (p *ImageSearchRequest) GetTopK() (v int32) {
	return p.TopK
}

func (p *ImageSearchRequest) GetSimilarityThreshold() (v float64) {
	return p.SimilarityThreshold
}

func (p *ImageSearchRequest) GetSearchScope() (v string) {
	return p.SearchScope
}

var ImageSearchRequest_Filters_DEFAULT *ImageSearchFilters

func (p *ImageSearchRequest) GetFilters() (v *ImageSearchFilters) {
	if !p.IsSetFilters() {
		return ImageSearchRequest_Filters_DEFAULT
	}
	return p.Filters
}

func (p *ImageSearchRequest) GetSearchModel() (v string) {
	return p.SearchModel
}
func (p *ImageSearchRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *ImageSearchRequest) SetQueryImageUrl(val string) {
	p.QueryImageUrl = val
}
func (p *ImageSearchRequest) SetQueryImageData(val []byte) {
	p.QueryImageData = val
}
func (p *ImageSearchRequest) SetTopK(val int32) {
	p.TopK = val
}
func (p *ImageSearchRequest) SetSimilarityThreshold(val float64) {
	p.SimilarityThreshold = val
}
func (p *ImageSearchRequest) SetSearchScope(val string) {
	p.SearchScope = val
}
func (p *ImageSearchRequest) SetFilters(val *ImageSearchFilters) {
	p.Filters = val
}
func (p *ImageSearchRequest) SetSearchModel(val string) {
	p.SearchModel = val
}

func (p *ImageSearchRequest) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *ImageSearchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageSearchRequest(%+v)", *p)
}

var fieldIDToName_ImageSearchRequest = map[int16]string{
	1: "user_id",
	2: "query_image_url",
	3: "query_image_data",
	4: "top_k",
	5: "similarity_threshold",
	6: "search_scope",
	7: "filters",
	8: "search_model",
}

type ImageSearchFilters struct {
	UserIds      []int64  `thrift:"user_ids,1" frugal:"1,default,list<i64>" json:"user_ids"`
	Tags         []string `thrift:"tags,2" frugal:"2,default,list<string>" json:"tags"`
	StartDate    string   `thrift:"start_date,3" frugal:"3,default,string" json:"start_date"`
	EndDate      string   `thrift:"end_date,4" frugal:"4,default,string" json:"end_date"`
	MinDuration  int32    `thrift:"min_duration,5" frugal:"5,default,i32" json:"min_duration"`
	MaxDuration  int32    `thrift:"max_duration,6" frugal:"6,default,i32" json:"max_duration"`
	VideoQuality string   `thrift:"video_quality,7" frugal:"7,default,string" json:"video_quality"`
	Categories   []string `thrift:"categories,8" frugal:"8,default,list<string>" json:"categories"`
}

func NewImageSearchFilters() *ImageSearchFilters {
	return &ImageSearchFilters{}
}

func (p *ImageSearchFilters) InitDefault() {
}

func (p *ImageSearchFilters) GetUserIds() (v []int64) {
	return p.UserIds
}

func (p *ImageSearchFilters) GetTags() (v []string) {
	return p.Tags
}

func (p *ImageSearchFilters) GetStartDate() (v string) {
	return p.StartDate
}

func (p *ImageSearchFilters) GetEndDate() (v string) {
	return p.EndDate
}

func (p *ImageSearchFilters) GetMinDuration() (v int32) {
	return p.MinDuration
}

func (p *ImageSearchFilters) GetMaxDuration() (v int32) {
	return p.MaxDuration
}

func (p *ImageSearchFilters) GetVideoQuality() (v string) {
	return p.VideoQuality
}

func (p *ImageSearchFilters) GetCategories() (v []string) {
	return p.Categories
}
func (p *ImageSearchFilters) SetUserIds(val []int64) {
	p.UserIds = val
}
func (p *ImageSearchFilters) SetTags(val []string) {
	p.Tags = val
}
func (p *ImageSearchFilters) SetStartDate(val string) {
	p.StartDate = val
}
func (p *ImageSearchFilters) SetEndDate(val string) {
	p.EndDate = val
}
func (p *ImageSearchFilters) SetMinDuration(val int32) {
	p.MinDuration = val
}
func (p *ImageSearchFilters) SetMaxDuration(val int32) {
	p.MaxDuration = val
}
func (p *ImageSearchFilters) SetVideoQuality(val string) {
	p.VideoQuality = val
}
func (p *ImageSearchFilters) SetCategories(val []string) {
	p.Categories = val
}

func (p *ImageSearchFilters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageSearchFilters(%+v)", *p)
}

var fieldIDToName_ImageSearchFilters = map[int16]string{
	1: "user_ids",
	2: "tags",
	3: "start_date",
	4: "end_date",
	5: "min_duration",
	6: "max_duration",
	7: "video_quality",
	8: "categories",
}

type ImageSearchResult_ struct {
	VideoId         int64       `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	VideoUrl        string      `thrift:"video_url,2" frugal:"2,default,string" json:"video_url"`
	CoverUrl        string      `thrift:"cover_url,3" frugal:"3,default,string" json:"cover_url"`
	Title           string      `thrift:"title,4" frugal:"4,default,string" json:"title"`
	Description     string      `thrift:"description,5" frugal:"5,default,string" json:"description"`
	UserId          int64       `thrift:"user_id,6" frugal:"6,default,i64" json:"user_id"`
	Username        string      `thrift:"username,7" frugal:"7,default,string" json:"username"`
	SimilarityScore float64     `thrift:"similarity_score,8" frugal:"8,default,double" json:"similarity_score"`
	MatchedFrames   []string    `thrift:"matched_frames,9" frugal:"9,default,list<string>" json:"matched_frames"`
	ThumbnailUrl    string      `thrift:"thumbnail_url,10" frugal:"10,default,string" json:"thumbnail_url"`
	VideoInfo       *base.Video `thrift:"video_info,11" frugal:"11,default,base.Video" json:"video_info"`
}

func NewImageSearchResult_() *ImageSearchResult_ {
	return &ImageSearchResult_{}
}

func (p *ImageSearchResult_) InitDefault() {
}

func (p *ImageSearchResult_) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *ImageSearchResult_) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *ImageSearchResult_) GetCoverUrl() (v string) {
	return p.CoverUrl
}

func (p *ImageSearchResult_) GetTitle() (v string) {
	return p.Title
}

func (p *ImageSearchResult_) GetDescription() (v string) {
	return p.Description
}

func (p *ImageSearchResult_) GetUserId() (v int64) {
	return p.UserId
}

func (p *ImageSearchResult_) GetUsername() (v string) {
	return p.Username
}

func (p *ImageSearchResult_) GetSimilarityScore() (v float64) {
	return p.SimilarityScore
}

func (p *ImageSearchResult_) GetMatchedFrames() (v []string) {
	return p.MatchedFrames
}

func (p *ImageSearchResult_) GetThumbnailUrl() (v string) {
	return p.ThumbnailUrl
}

var ImageSearchResult__VideoInfo_DEFAULT *base.Video

func (p *ImageSearchResult_) GetVideoInfo() (v *base.Video) {
	if !p.IsSetVideoInfo() {
		return ImageSearchResult__VideoInfo_DEFAULT
	}
	return p.VideoInfo
}
func (p *ImageSearchResult_) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *ImageSearchResult_) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *ImageSearchResult_) SetCoverUrl(val string) {
	p.CoverUrl = val
}
func (p *ImageSearchResult_) SetTitle(val string) {
	p.Title = val
}
func (p *ImageSearchResult_) SetDescription(val string) {
	p.Description = val
}
func (p *ImageSearchResult_) SetUserId(val int64) {
	p.UserId = val
}
func (p *ImageSearchResult_) SetUsername(val string) {
	p.Username = val
}
func (p *ImageSearchResult_) SetSimilarityScore(val float64) {
	p.SimilarityScore = val
}
func (p *ImageSearchResult_) SetMatchedFrames(val []string) {
	p.MatchedFrames = val
}
func (p *ImageSearchResult_) SetThumbnailUrl(val string) {
	p.ThumbnailUrl = val
}
func (p *ImageSearchResult_) SetVideoInfo(val *base.Video) {
	p.VideoInfo = val
}

func (p *ImageSearchResult_) IsSetVideoInfo() bool {
	return p.VideoInfo != nil
}

func (p *ImageSearchResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageSearchResult_(%+v)", *p)
}

var fieldIDToName_ImageSearchResult_ = map[int16]string{
	1:  "video_id",
	2:  "video_url",
	3:  "cover_url",
	4:  "title",
	5:  "description",
	6:  "user_id",
	7:  "username",
	8:  "similarity_score",
	9:  "matched_frames",
	10: "thumbnail_url",
	11: "video_info",
}

type ImageSearchResponse struct {
	Base           *base.Status          `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Results        []*ImageSearchResult_ `thrift:"results,2" frugal:"2,default,list<ImageSearchResult_>" json:"results"`
	TotalCount     int64                 `thrift:"total_count,3" frugal:"3,default,i64" json:"total_count"`
	SearchTime     float64               `thrift:"search_time,4" frugal:"4,default,double" json:"search_time"`
	QueryFeatureId string                `thrift:"query_feature_id,5" frugal:"5,default,string" json:"query_feature_id"`
	Metadata       *SearchMetadata       `thrift:"metadata,6" frugal:"6,default,SearchMetadata" json:"metadata"`
}

func NewImageSearchResponse() *ImageSearchResponse {
	return &ImageSearchResponse{}
}

func (p *ImageSearchResponse) InitDefault() {
}

var ImageSearchResponse_Base_DEFAULT *base.Status

func (p *ImageSearchResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return ImageSearchResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ImageSearchResponse) GetResults() (v []*ImageSearchResult_) {
	return p.Results
}

func (p *ImageSearchResponse) GetTotalCount() (v int64) {
	return p.TotalCount
}

func (p *ImageSearchResponse) GetSearchTime() (v float64) {
	return p.SearchTime
}

func (p *ImageSearchResponse) GetQueryFeatureId() (v string) {
	return p.QueryFeatureId
}

var ImageSearchResponse_Metadata_DEFAULT *SearchMetadata

func (p *ImageSearchResponse) GetMetadata() (v *SearchMetadata) {
	if !p.IsSetMetadata() {
		return ImageSearchResponse_Metadata_DEFAULT
	}
	return p.Metadata
}
func (p *ImageSearchResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *ImageSearchResponse) SetResults(val []*ImageSearchResult_) {
	p.Results = val
}
func (p *ImageSearchResponse) SetTotalCount(val int64) {
	p.TotalCount = val
}
func (p *ImageSearchResponse) SetSearchTime(val float64) {
	p.SearchTime = val
}
func (p *ImageSearchResponse) SetQueryFeatureId(val string) {
	p.QueryFeatureId = val
}
func (p *ImageSearchResponse) SetMetadata(val *SearchMetadata) {
	p.Metadata = val
}

func (p *ImageSearchResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ImageSearchResponse) IsSetMetadata() bool {
	return p.Metadata != nil
}

func (p *ImageSearchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageSearchResponse(%+v)", *p)
}

var fieldIDToName_ImageSearchResponse = map[int16]string{
	1: "base",
	2: "results",
	3: "total_count",
	4: "search_time",
	5: "query_feature_id",
	6: "metadata",
}

type SearchMetadata struct {
	SearchId       string            `thrift:"search_id,1" frugal:"1,default,string" json:"search_id"`
	ModelUsed      string            `thrift:"model_used,2" frugal:"2,default,string" json:"model_used"`
	IndexVersion   int32             `thrift:"index_version,3" frugal:"3,default,i32" json:"index_version"`
	SearchStrategy string            `thrift:"search_strategy,4" frugal:"4,default,string" json:"search_strategy"`
	DebugInfo      map[string]string `thrift:"debug_info,5" frugal:"5,default,map<string:string>" json:"debug_info"`
}

func NewSearchMetadata() *SearchMetadata {
	return &SearchMetadata{}
}

func (p *SearchMetadata) InitDefault() {
}

func (p *SearchMetadata) GetSearchId() (v string) {
	return p.SearchId
}

func (p *SearchMetadata) GetModelUsed() (v string) {
	return p.ModelUsed
}

func (p *SearchMetadata) GetIndexVersion() (v int32) {
	return p.IndexVersion
}

func (p *SearchMetadata) GetSearchStrategy() (v string) {
	return p.SearchStrategy
}

func (p *SearchMetadata) GetDebugInfo() (v map[string]string) {
	return p.DebugInfo
}
func (p *SearchMetadata) SetSearchId(val string) {
	p.SearchId = val
}
func (p *SearchMetadata) SetModelUsed(val string) {
	p.ModelUsed = val
}
func (p *SearchMetadata) SetIndexVersion(val int32) {
	p.IndexVersion = val
}
func (p *SearchMetadata) SetSearchStrategy(val string) {
	p.SearchStrategy = val
}
func (p *SearchMetadata) SetDebugInfo(val map[string]string) {
	p.DebugInfo = val
}

func (p *SearchMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchMetadata(%+v)", *p)
}

var fieldIDToName_SearchMetadata = map[int16]string{
	1: "search_id",
	2: "model_used",
	3: "index_version",
	4: "search_strategy",
	5: "debug_info",
}

type VideoKeyFrameExtractRequest struct {
	VideoId       int64  `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	VideoUrl      string `thrift:"video_url,2" frugal:"2,default,string" json:"video_url"`
	FrameInterval int32  `thrift:"frame_interval,3" frugal:"3,default,i32" json:"frame_interval"`
	MaxFrames     int32  `thrift:"max_frames,4" frugal:"4,default,i32" json:"max_frames"`
	ExtractMethod string `thrift:"extract_method,5" frugal:"5,default,string" json:"extract_method"`
	Quality       string `thrift:"quality,6" frugal:"6,default,string" json:"quality"`
}

func NewVideoKeyFrameExtractRequest() *VideoKeyFrameExtractRequest {
	return &VideoKeyFrameExtractRequest{}
}

func (p *VideoKeyFrameExtractRequest) InitDefault() {
}

func (p *VideoKeyFrameExtractRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *VideoKeyFrameExtractRequest) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *VideoKeyFrameExtractRequest) GetFrameInterval() (v int32) {
	return p.FrameInterval
}

func (p *VideoKeyFrameExtractRequest) GetMaxFrames() (v int32) {
	return p.MaxFrames
}

func (p *VideoKeyFrameExtractRequest) GetExtractMethod() (v string) {
	return p.ExtractMethod
}

func (p *VideoKeyFrameExtractRequest) GetQuality() (v string) {
	return p.Quality
}
func (p *VideoKeyFrameExtractRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *VideoKeyFrameExtractRequest) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *VideoKeyFrameExtractRequest) SetFrameInterval(val int32) {
	p.FrameInterval = val
}
func (p *VideoKeyFrameExtractRequest) SetMaxFrames(val int32) {
	p.MaxFrames = val
}
func (p *VideoKeyFrameExtractRequest) SetExtractMethod(val string) {
	p.ExtractMethod = val
}
func (p *VideoKeyFrameExtractRequest) SetQuality(val string) {
	p.Quality = val
}

func (p *VideoKeyFrameExtractRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoKeyFrameExtractRequest(%+v)", *p)
}

var fieldIDToName_VideoKeyFrameExtractRequest = map[int16]string{
	1: "video_id",
	2: "video_url",
	3: "frame_interval",
	4: "max_frames",
	5: "extract_method",
	6: "quality",
}

type VideoKeyFrameExtractResponse struct {
	Base             *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	KeyFrames        []*KeyFrame  `thrift:"key_frames,2" frugal:"2,default,list<KeyFrame>" json:"key_frames"`
	ProcessingJobId  int64        `thrift:"processing_job_id,3" frugal:"3,default,i64" json:"processing_job_id"`
	ProcessingStatus string       `thrift:"processing_status,4" frugal:"4,default,string" json:"processing_status"`
}

func NewVideoKeyFrameExtractResponse() *VideoKeyFrameExtractResponse {
	return &VideoKeyFrameExtractResponse{}
}

func (p *VideoKeyFrameExtractResponse) InitDefault() {
}

var VideoKeyFrameExtractResponse_Base_DEFAULT *base.Status

func (p *VideoKeyFrameExtractResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoKeyFrameExtractResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoKeyFrameExtractResponse) GetKeyFrames() (v []*KeyFrame) {
	return p.KeyFrames
}

func (p *VideoKeyFrameExtractResponse) GetProcessingJobId() (v int64) {
	return p.ProcessingJobId
}

func (p *VideoKeyFrameExtractResponse) GetProcessingStatus() (v string) {
	return p.ProcessingStatus
}
func (p *VideoKeyFrameExtractResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoKeyFrameExtractResponse) SetKeyFrames(val []*KeyFrame) {
	p.KeyFrames = val
}
func (p *VideoKeyFrameExtractResponse) SetProcessingJobId(val int64) {
	p.ProcessingJobId = val
}
func (p *VideoKeyFrameExtractResponse) SetProcessingStatus(val string) {
	p.ProcessingStatus = val
}

func (p *VideoKeyFrameExtractResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoKeyFrameExtractResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoKeyFrameExtractResponse(%+v)", *p)
}

var fieldIDToName_VideoKeyFrameExtractResponse = map[int16]string{
	1: "base",
	2: "key_frames",
	3: "processing_job_id",
	4: "processing_status",
}

type KeyFrame struct {
	FrameId          string             `thrift:"frame_id,1" frugal:"1,default,string" json:"frame_id"`
	FrameUrl         string             `thrift:"frame_url,2" frugal:"2,default,string" json:"frame_url"`
	Timestamp        float64            `thrift:"timestamp,3" frugal:"3,default,double" json:"timestamp"`
	FeatureVector    []float64          `thrift:"feature_vector,4" frugal:"4,default,list<double>" json:"feature_vector"`
	SceneDescription string             `thrift:"scene_description,5" frugal:"5,default,string" json:"scene_description"`
	DetectedObjects  []string           `thrift:"detected_objects,6" frugal:"6,default,list<string>" json:"detected_objects"`
	ConfidenceScores map[string]float64 `thrift:"confidence_scores,7" frugal:"7,default,map<string:double>" json:"confidence_scores"`
}

func NewKeyFrame() *KeyFrame {
	return &KeyFrame{}
}

func (p *KeyFrame) InitDefault() {
}

func (p *KeyFrame) GetFrameId() (v string) {
	return p.FrameId
}

func (p *KeyFrame) GetFrameUrl() (v string) {
	return p.FrameUrl
}

func (p *KeyFrame) GetTimestamp() (v float64) {
	return p.Timestamp
}

func (p *KeyFrame) GetFeatureVector() (v []float64) {
	return p.FeatureVector
}

func (p *KeyFrame) GetSceneDescription() (v string) {
	return p.SceneDescription
}

func (p *KeyFrame) GetDetectedObjects() (v []string) {
	return p.DetectedObjects
}

func (p *KeyFrame) GetConfidenceScores() (v map[string]float64) {
	return p.ConfidenceScores
}
func (p *KeyFrame) SetFrameId(val string) {
	p.FrameId = val
}
func (p *KeyFrame) SetFrameUrl(val string) {
	p.FrameUrl = val
}
func (p *KeyFrame) SetTimestamp(val float64) {
	p.Timestamp = val
}
func (p *KeyFrame) SetFeatureVector(val []float64) {
	p.FeatureVector = val
}
func (p *KeyFrame) SetSceneDescription(val string) {
	p.SceneDescription = val
}
func (p *KeyFrame) SetDetectedObjects(val []string) {
	p.DetectedObjects = val
}
func (p *KeyFrame) SetConfidenceScores(val map[string]float64) {
	p.ConfidenceScores = val
}

func (p *KeyFrame) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeyFrame(%+v)", *p)
}

var fieldIDToName_KeyFrame = map[int16]string{
	1: "frame_id",
	2: "frame_url",
	3: "timestamp",
	4: "feature_vector",
	5: "scene_description",
	6: "detected_objects",
	7: "confidence_scores",
}

type BatchImageProcessRequest struct {
	UserId        int64             `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	ImageUrls     []string          `thrift:"image_urls,2" frugal:"2,default,list<string>" json:"image_urls"`
	ProcessType   string            `thrift:"process_type,3" frugal:"3,default,string" json:"process_type"`
	CallbackUrl   string            `thrift:"callback_url,4" frugal:"4,default,string" json:"callback_url"`
	ProcessParams map[string]string `thrift:"process_params,5" frugal:"5,default,map<string:string>" json:"process_params"`
}

func NewBatchImageProcessRequest() *BatchImageProcessRequest {
	return &BatchImageProcessRequest{}
}

func (p *BatchImageProcessRequest) InitDefault() {
}

func (p *BatchImageProcessRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *BatchImageProcessRequest) GetImageUrls() (v []string) {
	return p.ImageUrls
}

func (p *BatchImageProcessRequest) GetProcessType() (v string) {
	return p.ProcessType
}

func (p *BatchImageProcessRequest) GetCallbackUrl() (v string) {
	return p.CallbackUrl
}

func (p *BatchImageProcessRequest) GetProcessParams() (v map[string]string) {
	return p.ProcessParams
}
func (p *BatchImageProcessRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *BatchImageProcessRequest) SetImageUrls(val []string) {
	p.ImageUrls = val
}
func (p *BatchImageProcessRequest) SetProcessType(val string) {
	p.ProcessType = val
}
func (p *BatchImageProcessRequest) SetCallbackUrl(val string) {
	p.CallbackUrl = val
}
func (p *BatchImageProcessRequest) SetProcessParams(val map[string]string) {
	p.ProcessParams = val
}

func (p *BatchImageProcessRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchImageProcessRequest(%+v)", *p)
}

var fieldIDToName_BatchImageProcessRequest = map[int16]string{
	1: "user_id",
	2: "image_urls",
	3: "process_type",
	4: "callback_url",
	5: "process_params",
}

type BatchImageProcessResponse struct {
	Base          *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	BatchJobId    string       `thrift:"batch_job_id,2" frugal:"2,default,string" json:"batch_job_id"`
	EstimatedTime int64        `thrift:"estimated_time,3" frugal:"3,default,i64" json:"estimated_time"`
	TotalImages   int32        `thrift:"total_images,4" frugal:"4,default,i32" json:"total_images"`
	JobStatusUrl  string       `thrift:"job_status_url,5" frugal:"5,default,string" json:"job_status_url"`
}

func NewBatchImageProcessResponse() *BatchImageProcessResponse {
	return &BatchImageProcessResponse{}
}

func (p *BatchImageProcessResponse) InitDefault() {
}

var BatchImageProcessResponse_Base_DEFAULT *base.Status

func (p *BatchImageProcessResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return BatchImageProcessResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *BatchImageProcessResponse) GetBatchJobId() (v string) {
	return p.BatchJobId
}

func (p *BatchImageProcessResponse) GetEstimatedTime() (v int64) {
	return p.EstimatedTime
}

func (p *BatchImageProcessResponse) GetTotalImages() (v int32) {
	return p.TotalImages
}

func (p *BatchImageProcessResponse) GetJobStatusUrl() (v string) {
	return p.JobStatusUrl
}
func (p *BatchImageProcessResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *BatchImageProcessResponse) SetBatchJobId(val string) {
	p.BatchJobId = val
}
func (p *BatchImageProcessResponse) SetEstimatedTime(val int64) {
	p.EstimatedTime = val
}
func (p *BatchImageProcessResponse) SetTotalImages(val int32) {
	p.TotalImages = val
}
func (p *BatchImageProcessResponse) SetJobStatusUrl(val string) {
	p.JobStatusUrl = val
}

func (p *BatchImageProcessResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchImageProcessResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchImageProcessResponse(%+v)", *p)
}

var fieldIDToName_BatchImageProcessResponse = map[int16]string{
	1: "base",
	2: "batch_job_id",
	3: "estimated_time",
	4: "total_images",
	5: "job_status_url",
}

type ImageIndexManageRequest struct {
	UserId      int64             `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Operation   string            `thrift:"operation,2" frugal:"2,default,string" json:"operation"`
	IndexName   string            `thrift:"index_name,3" frugal:"3,default,string" json:"index_name"`
	VideoIds    []int64           `thrift:"video_ids,4" frugal:"4,default,list<i64>" json:"video_ids"`
	IndexParams map[string]string `thrift:"index_params,5" frugal:"5,default,map<string:string>" json:"index_params"`
}

func NewImageIndexManageRequest() *ImageIndexManageRequest {
	return &ImageIndexManageRequest{}
}

func (p *ImageIndexManageRequest) InitDefault() {
}

func (p *ImageIndexManageRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *ImageIndexManageRequest) GetOperation() (v string) {
	return p.Operation
}

func (p *ImageIndexManageRequest) GetIndexName() (v string) {
	return p.IndexName
}

func (p *ImageIndexManageRequest) GetVideoIds() (v []int64) {
	return p.VideoIds
}

func (p *ImageIndexManageRequest) GetIndexParams() (v map[string]string) {
	return p.IndexParams
}
func (p *ImageIndexManageRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *ImageIndexManageRequest) SetOperation(val string) {
	p.Operation = val
}
func (p *ImageIndexManageRequest) SetIndexName(val string) {
	p.IndexName = val
}
func (p *ImageIndexManageRequest) SetVideoIds(val []int64) {
	p.VideoIds = val
}
func (p *ImageIndexManageRequest) SetIndexParams(val map[string]string) {
	p.IndexParams = val
}

func (p *ImageIndexManageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageIndexManageRequest(%+v)", *p)
}

var fieldIDToName_ImageIndexManageRequest = map[int16]string{
	1: "user_id",
	2: "operation",
	3: "index_name",
	4: "video_ids",
	5: "index_params",
}

type ImageIndexManageResponse struct {
	Base                *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	OperationId         string       `thrift:"operation_id,2" frugal:"2,default,string" json:"operation_id"`
	IndexStatus         string       `thrift:"index_status,3" frugal:"3,default,string" json:"index_status"`
	IndexedCount        int64        `thrift:"indexed_count,4" frugal:"4,default,i64" json:"indexed_count"`
	EstimatedCompletion string       `thrift:"estimated_completion,5" frugal:"5,default,string" json:"estimated_completion"`
}

func NewImageIndexManageResponse() *ImageIndexManageResponse {
	return &ImageIndexManageResponse{}
}

func (p *ImageIndexManageResponse) InitDefault() {
}

var ImageIndexManageResponse_Base_DEFAULT *base.Status

func (p *ImageIndexManageResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return ImageIndexManageResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ImageIndexManageResponse) GetOperationId() (v string) {
	return p.OperationId
}

func (p *ImageIndexManageResponse) GetIndexStatus() (v string) {
	return p.IndexStatus
}

func (p *ImageIndexManageResponse) GetIndexedCount() (v int64) {
	return p.IndexedCount
}

func (p *ImageIndexManageResponse) GetEstimatedCompletion() (v string) {
	return p.EstimatedCompletion
}
func (p *ImageIndexManageResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *ImageIndexManageResponse) SetOperationId(val string) {
	p.OperationId = val
}
func (p *ImageIndexManageResponse) SetIndexStatus(val string) {
	p.IndexStatus = val
}
func (p *ImageIndexManageResponse) SetIndexedCount(val int64) {
	p.IndexedCount = val
}
func (p *ImageIndexManageResponse) SetEstimatedCompletion(val string) {
	p.EstimatedCompletion = val
}

func (p *ImageIndexManageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ImageIndexManageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageIndexManageResponse(%+v)", *p)
}

var fieldIDToName_ImageIndexManageResponse = map[int16]string{
	1: "base",
	2: "operation_id",
	3: "index_status",
	4: "indexed_count",
	5: "estimated_completion",
}

type SimilarityAnalysisRequest struct {
	ImageUrlA    string `thrift:"image_url_a,1" frugal:"1,default,string" json:"image_url_a"`
	ImageUrlB    string `thrift:"image_url_b,2" frugal:"2,default,string" json:"image_url_b"`
	AnalysisType string `thrift:"analysis_type,3" frugal:"3,default,string" json:"analysis_type"`
	ModelType    string `thrift:"model_type,4" frugal:"4,default,string" json:"model_type"`
}

func NewSimilarityAnalysisRequest() *SimilarityAnalysisRequest {
	return &SimilarityAnalysisRequest{}
}

func (p *SimilarityAnalysisRequest) InitDefault() {
}

func (p *SimilarityAnalysisRequest) GetImageUrlA() (v string) {
	return p.ImageUrlA
}

func (p *SimilarityAnalysisRequest) GetImageUrlB() (v string) {
	return p.ImageUrlB
}

func (p *SimilarityAnalysisRequest) GetAnalysisType() (v string) {
	return p.AnalysisType
}

func (p *SimilarityAnalysisRequest) GetModelType() (v string) {
	return p.ModelType
}
func (p *SimilarityAnalysisRequest) SetImageUrlA(val string) {
	p.ImageUrlA = val
}
func (p *SimilarityAnalysisRequest) SetImageUrlB(val string) {
	p.ImageUrlB = val
}
func (p *SimilarityAnalysisRequest) SetAnalysisType(val string) {
	p.AnalysisType = val
}
func (p *SimilarityAnalysisRequest) SetModelType(val string) {
	p.ModelType = val
}

func (p *SimilarityAnalysisRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SimilarityAnalysisRequest(%+v)", *p)
}

var fieldIDToName_SimilarityAnalysisRequest = map[int16]string{
	1: "image_url_a",
	2: "image_url_b",
	3: "analysis_type",
	4: "model_type",
}

type SimilarityAnalysisResponse struct {
	Base              *base.Status       `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	SimilarityScore   float64            `thrift:"similarity_score,2" frugal:"2,default,double" json:"similarity_score"`
	DetailedScores    map[string]float64 `thrift:"detailed_scores,3" frugal:"3,default,map<string:double>" json:"detailed_scores"`
	AnalysisReport    string             `thrift:"analysis_report,4" frugal:"4,default,string" json:"analysis_report"`
	DifferenceRegions []string           `thrift:"difference_regions,5" frugal:"5,default,list<string>" json:"difference_regions"`
}

func NewSimilarityAnalysisResponse() *SimilarityAnalysisResponse {
	return &SimilarityAnalysisResponse{}
}

func (p *SimilarityAnalysisResponse) InitDefault() {
}

var SimilarityAnalysisResponse_Base_DEFAULT *base.Status

func (p *SimilarityAnalysisResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return SimilarityAnalysisResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *SimilarityAnalysisResponse) GetSimilarityScore() (v float64) {
	return p.SimilarityScore
}

func (p *SimilarityAnalysisResponse) GetDetailedScores() (v map[string]float64) {
	return p.DetailedScores
}

func (p *SimilarityAnalysisResponse) GetAnalysisReport() (v string) {
	return p.AnalysisReport
}

func (p *SimilarityAnalysisResponse) GetDifferenceRegions() (v []string) {
	return p.DifferenceRegions
}
func (p *SimilarityAnalysisResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *SimilarityAnalysisResponse) SetSimilarityScore(val float64) {
	p.SimilarityScore = val
}
func (p *SimilarityAnalysisResponse) SetDetailedScores(val map[string]float64) {
	p.DetailedScores = val
}
func (p *SimilarityAnalysisResponse) SetAnalysisReport(val string) {
	p.AnalysisReport = val
}
func (p *SimilarityAnalysisResponse) SetDifferenceRegions(val []string) {
	p.DifferenceRegions = val
}

func (p *SimilarityAnalysisResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SimilarityAnalysisResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SimilarityAnalysisResponse(%+v)", *p)
}

var fieldIDToName_SimilarityAnalysisResponse = map[int16]string{
	1: "base",
	2: "similarity_score",
	3: "detailed_scores",
	4: "analysis_report",
	5: "difference_regions",
}

type VideoService interface {
	FeedService(ctx context.Context, req *FeedServiceRequest) (r *FeedServiceResponse, err error)

	VideoPublishStart(ctx context.Context, req *VideoPublishStartRequest) (r *VideoPublishStartResponse, err error)

	VideoPublishUploading(ctx context.Context, req *VideoPublishUploadingRequest) (r *VideoPublishUploadingResponse, err error)

	VideoPublishComplete(ctx context.Context, req *VideoPublishCompleteRequest) (r *VideoPublishCompleteResponse, err error)

	VideoPublishCancle(ctx context.Context, req *VideoPublishCancleRequest) (r *VideoPublishCancleResponse, err error)

	VideoDelete(ctx context.Context, req *VideoDeleteRequest) (r *VideoDeleteResponse, err error)

	VideoIdList(ctx context.Context, req *VideoIdListRequest) (r *VideoIdListResponse, err error)

	VideoFeedList(ctx context.Context, req *VideoFeedListRequest) (r *VideoFeedListResponse, err error)

	VideoSearch(ctx context.Context, req *VideoSearchRequest) (r *VideoSearchResponse, err error)

	VideoPopular(ctx context.Context, req *VideoPopularRequest) (r *VideoPopularResponse, err error)

	VideoInfo(ctx context.Context, req *VideoInfoRequest) (r *VideoInfoResponse, err error)

	VideoVisit(ctx context.Context, req *VideoVisitRequest) (r *VideoVisitResponse, err error)

	UpdateVisitCount(ctx context.Context, req *UpdateVisitCountRequest) (r *UpdateVisitCountResponse, err error)

	UpdateVideoCommentCount(ctx context.Context, req *UpdateVideoCommentCountRequest) (r *UpdateVideoCommentCountResponse, err error)

	UpdateVideoLikeCount(ctx context.Context, req *UpdateLikeCountRequest) (r *UpdateLikeCountResponse, err error)

	UpdateVideoHisLikeCount(ctx context.Context, req *UpdateVideoHisLikeCountRequest) (r *UpdateVideoHisLikeCountResponse, err error)

	GetVideoVisitCount(ctx context.Context, req *GetVideoVisitCountRequest) (r *GetVideoVisitCountResponse, err error)

	GetVideoVisitCountInRedis(ctx context.Context, req *GetVideoVisitCountInRedisRequest) (r *GetVideoVisitCountInRedisResponse, err error)

	StreamVideo(ctx context.Context, req *StreamVideoRequest) (r *StreamVideoResponse, err error)

	CreateFavorite(ctx context.Context, req *CreateFavoriteRequest) (r *CreateFavoriteResponse, err error)

	GetFavoriteVideoList(ctx context.Context, req *GetFavoriteVideoListRequest) (r *GetFavoriteVideoListResponse, err error)

	GetFavoriteList(ctx context.Context, req *GetFavoriteListRequest) (r *GetFavoriteListResponse, err error)

	GetVideoFromFavorite(ctx context.Context, req *GetVideoFromFavoriteRequest) (r *GetVideoFromFavoriteResponse, err error)

	AddFavoriteVideo(ctx context.Context, req *AddFavoriteVideoRequest) (r *AddFavoriteVideoResponse, err error)

	DeleteFavorite(ctx context.Context, req *DeleteFavoriteRequest) (r *DeleteFavoriteResponse, err error)

	DeleteVideoFromFavorite(ctx context.Context, req *DeleteVideoFromFavoriteRequest) (r *DeleteVideoFromFavoriteResponse, err error)

	SharedVideo(ctx context.Context, req *SharedVideoRequest) (r *SharedVideoResponse, err error)

	RecommendVideo(ctx context.Context, req *RecommendVideoRequest) (r *RecommendVideoResponse, err error)

	VideoPublishStartV2(ctx context.Context, req *VideoPublishStartRequestV2) (r *VideoPublishStartResponseV2, err error)

	VideoPublishUploadingV2(ctx context.Context, req *VideoPublishUploadingRequestV2) (r *VideoPublishUploadingResponseV2, err error)

	VideoPublishCompleteV2(ctx context.Context, req *VideoPublishCompleteRequestV2) (r *VideoPublishCompleteResponseV2, err error)

	VideoPublishCancelV2(ctx context.Context, req *VideoPublishCancelRequestV2) (r *VideoPublishCancelResponseV2, err error)

	GetUploadProgressV2(ctx context.Context, req *VideoPublishProgressRequestV2) (r *VideoPublishProgressResponseV2, err error)

	ResumeUploadV2(ctx context.Context, req *VideoPublishResumeRequestV2) (r *VideoPublishResumeResponseV2, err error)

	ManageVideoHeatV2(ctx context.Context, req *VideoHeatManagementRequest) (r *VideoHeatManagementResponse, err error)

	ManageUserQuotaV2(ctx context.Context, req *UserQuotaManagementRequest) (r *UserQuotaManagementResponse, err error)

	BatchOperateVideosV2(ctx context.Context, req *BatchVideoOperationRequest) (r *BatchVideoOperationResponse, err error)

	TranscodeVideoV2(ctx context.Context, req *VideoTranscodingRequest) (r *VideoTranscodingResponse, err error)

	GetVideoAnalyticsV2(ctx context.Context, req *VideoAnalyticsRequest) (r *VideoAnalyticsResponse, err error)

	ImageFeatureExtract(ctx context.Context, req *ImageFeatureExtractRequest) (r *ImageFeatureExtractResponse, err error)

	ImageSearch(ctx context.Context, req *ImageSearchRequest) (r *ImageSearchResponse, err error)

	VideoKeyFrameExtract(ctx context.Context, req *VideoKeyFrameExtractRequest) (r *VideoKeyFrameExtractResponse, err error)

	BatchImageProcess(ctx context.Context, req *BatchImageProcessRequest) (r *BatchImageProcessResponse, err error)

	ImageIndexManage(ctx context.Context, req *ImageIndexManageRequest) (r *ImageIndexManageResponse, err error)

	SimilarityAnalysis(ctx context.Context, req *SimilarityAnalysisRequest) (r *SimilarityAnalysisResponse, err error)
}

type VideoServiceFeedServiceArgs struct {
	Req *FeedServiceRequest `thrift:"req,1" frugal:"1,default,FeedServiceRequest" json:"req"`
}

func NewVideoServiceFeedServiceArgs() *VideoServiceFeedServiceArgs {
	return &VideoServiceFeedServiceArgs{}
}

func (p *VideoServiceFeedServiceArgs) InitDefault() {
}

var VideoServiceFeedServiceArgs_Req_DEFAULT *FeedServiceRequest

func (p *VideoServiceFeedServiceArgs) GetReq() (v *FeedServiceRequest) {
	if !p.IsSetReq() {
		return VideoServiceFeedServiceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceFeedServiceArgs) SetReq(val *FeedServiceRequest) {
	p.Req = val
}

func (p *VideoServiceFeedServiceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceFeedServiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceFeedServiceArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceFeedServiceArgs = map[int16]string{
	1: "req",
}

type VideoServiceFeedServiceResult struct {
	Success *FeedServiceResponse `thrift:"success,0,optional" frugal:"0,optional,FeedServiceResponse" json:"success,omitempty"`
}

func NewVideoServiceFeedServiceResult() *VideoServiceFeedServiceResult {
	return &VideoServiceFeedServiceResult{}
}

func (p *VideoServiceFeedServiceResult) InitDefault() {
}

var VideoServiceFeedServiceResult_Success_DEFAULT *FeedServiceResponse

func (p *VideoServiceFeedServiceResult) GetSuccess() (v *FeedServiceResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceFeedServiceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceFeedServiceResult) SetSuccess(x interface{}) {
	p.Success = x.(*FeedServiceResponse)
}

func (p *VideoServiceFeedServiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceFeedServiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceFeedServiceResult(%+v)", *p)
}

var fieldIDToName_VideoServiceFeedServiceResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoPublishStartArgs struct {
	Req *VideoPublishStartRequest `thrift:"req,1" frugal:"1,default,VideoPublishStartRequest" json:"req"`
}

func NewVideoServiceVideoPublishStartArgs() *VideoServiceVideoPublishStartArgs {
	return &VideoServiceVideoPublishStartArgs{}
}

func (p *VideoServiceVideoPublishStartArgs) InitDefault() {
}

var VideoServiceVideoPublishStartArgs_Req_DEFAULT *VideoPublishStartRequest

func (p *VideoServiceVideoPublishStartArgs) GetReq() (v *VideoPublishStartRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishStartArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishStartArgs) SetReq(val *VideoPublishStartRequest) {
	p.Req = val
}

func (p *VideoServiceVideoPublishStartArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishStartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishStartArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishStartArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishStartResult struct {
	Success *VideoPublishStartResponse `thrift:"success,0,optional" frugal:"0,optional,VideoPublishStartResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishStartResult() *VideoServiceVideoPublishStartResult {
	return &VideoServiceVideoPublishStartResult{}
}

func (p *VideoServiceVideoPublishStartResult) InitDefault() {
}

var VideoServiceVideoPublishStartResult_Success_DEFAULT *VideoPublishStartResponse

func (p *VideoServiceVideoPublishStartResult) GetSuccess() (v *VideoPublishStartResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishStartResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishStartResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishStartResponse)
}

func (p *VideoServiceVideoPublishStartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishStartResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishStartResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishStartResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoPublishUploadingArgs struct {
	Req *VideoPublishUploadingRequest `thrift:"req,1" frugal:"1,default,VideoPublishUploadingRequest" json:"req"`
}

func NewVideoServiceVideoPublishUploadingArgs() *VideoServiceVideoPublishUploadingArgs {
	return &VideoServiceVideoPublishUploadingArgs{}
}

func (p *VideoServiceVideoPublishUploadingArgs) InitDefault() {
}

var VideoServiceVideoPublishUploadingArgs_Req_DEFAULT *VideoPublishUploadingRequest

func (p *VideoServiceVideoPublishUploadingArgs) GetReq() (v *VideoPublishUploadingRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishUploadingArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishUploadingArgs) SetReq(val *VideoPublishUploadingRequest) {
	p.Req = val
}

func (p *VideoServiceVideoPublishUploadingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishUploadingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishUploadingArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishUploadingArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishUploadingResult struct {
	Success *VideoPublishUploadingResponse `thrift:"success,0,optional" frugal:"0,optional,VideoPublishUploadingResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishUploadingResult() *VideoServiceVideoPublishUploadingResult {
	return &VideoServiceVideoPublishUploadingResult{}
}

func (p *VideoServiceVideoPublishUploadingResult) InitDefault() {
}

var VideoServiceVideoPublishUploadingResult_Success_DEFAULT *VideoPublishUploadingResponse

func (p *VideoServiceVideoPublishUploadingResult) GetSuccess() (v *VideoPublishUploadingResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishUploadingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishUploadingResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishUploadingResponse)
}

func (p *VideoServiceVideoPublishUploadingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishUploadingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishUploadingResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishUploadingResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoPublishCompleteArgs struct {
	Req *VideoPublishCompleteRequest `thrift:"req,1" frugal:"1,default,VideoPublishCompleteRequest" json:"req"`
}

func NewVideoServiceVideoPublishCompleteArgs() *VideoServiceVideoPublishCompleteArgs {
	return &VideoServiceVideoPublishCompleteArgs{}
}

func (p *VideoServiceVideoPublishCompleteArgs) InitDefault() {
}

var VideoServiceVideoPublishCompleteArgs_Req_DEFAULT *VideoPublishCompleteRequest

func (p *VideoServiceVideoPublishCompleteArgs) GetReq() (v *VideoPublishCompleteRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishCompleteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishCompleteArgs) SetReq(val *VideoPublishCompleteRequest) {
	p.Req = val
}

func (p *VideoServiceVideoPublishCompleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishCompleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCompleteArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCompleteArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishCompleteResult struct {
	Success *VideoPublishCompleteResponse `thrift:"success,0,optional" frugal:"0,optional,VideoPublishCompleteResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishCompleteResult() *VideoServiceVideoPublishCompleteResult {
	return &VideoServiceVideoPublishCompleteResult{}
}

func (p *VideoServiceVideoPublishCompleteResult) InitDefault() {
}

var VideoServiceVideoPublishCompleteResult_Success_DEFAULT *VideoPublishCompleteResponse

func (p *VideoServiceVideoPublishCompleteResult) GetSuccess() (v *VideoPublishCompleteResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishCompleteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishCompleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishCompleteResponse)
}

func (p *VideoServiceVideoPublishCompleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishCompleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCompleteResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCompleteResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoPublishCancleArgs struct {
	Req *VideoPublishCancleRequest `thrift:"req,1" frugal:"1,default,VideoPublishCancleRequest" json:"req"`
}

func NewVideoServiceVideoPublishCancleArgs() *VideoServiceVideoPublishCancleArgs {
	return &VideoServiceVideoPublishCancleArgs{}
}

func (p *VideoServiceVideoPublishCancleArgs) InitDefault() {
}

var VideoServiceVideoPublishCancleArgs_Req_DEFAULT *VideoPublishCancleRequest

func (p *VideoServiceVideoPublishCancleArgs) GetReq() (v *VideoPublishCancleRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishCancleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishCancleArgs) SetReq(val *VideoPublishCancleRequest) {
	p.Req = val
}

func (p *VideoServiceVideoPublishCancleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishCancleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCancleArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCancleArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishCancleResult struct {
	Success *VideoPublishCancleResponse `thrift:"success,0,optional" frugal:"0,optional,VideoPublishCancleResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishCancleResult() *VideoServiceVideoPublishCancleResult {
	return &VideoServiceVideoPublishCancleResult{}
}

func (p *VideoServiceVideoPublishCancleResult) InitDefault() {
}

var VideoServiceVideoPublishCancleResult_Success_DEFAULT *VideoPublishCancleResponse

func (p *VideoServiceVideoPublishCancleResult) GetSuccess() (v *VideoPublishCancleResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishCancleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishCancleResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishCancleResponse)
}

func (p *VideoServiceVideoPublishCancleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishCancleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCancleResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCancleResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoDeleteArgs struct {
	Req *VideoDeleteRequest `thrift:"req,1" frugal:"1,default,VideoDeleteRequest" json:"req"`
}

func NewVideoServiceVideoDeleteArgs() *VideoServiceVideoDeleteArgs {
	return &VideoServiceVideoDeleteArgs{}
}

func (p *VideoServiceVideoDeleteArgs) InitDefault() {
}

var VideoServiceVideoDeleteArgs_Req_DEFAULT *VideoDeleteRequest

func (p *VideoServiceVideoDeleteArgs) GetReq() (v *VideoDeleteRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoDeleteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoDeleteArgs) SetReq(val *VideoDeleteRequest) {
	p.Req = val
}

func (p *VideoServiceVideoDeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoDeleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoDeleteArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoDeleteArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoDeleteResult struct {
	Success *VideoDeleteResponse `thrift:"success,0,optional" frugal:"0,optional,VideoDeleteResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoDeleteResult() *VideoServiceVideoDeleteResult {
	return &VideoServiceVideoDeleteResult{}
}

func (p *VideoServiceVideoDeleteResult) InitDefault() {
}

var VideoServiceVideoDeleteResult_Success_DEFAULT *VideoDeleteResponse

func (p *VideoServiceVideoDeleteResult) GetSuccess() (v *VideoDeleteResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoDeleteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoDeleteResponse)
}

func (p *VideoServiceVideoDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoDeleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoDeleteResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoDeleteResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoIdListArgs struct {
	Req *VideoIdListRequest `thrift:"req,1" frugal:"1,default,VideoIdListRequest" json:"req"`
}

func NewVideoServiceVideoIdListArgs() *VideoServiceVideoIdListArgs {
	return &VideoServiceVideoIdListArgs{}
}

func (p *VideoServiceVideoIdListArgs) InitDefault() {
}

var VideoServiceVideoIdListArgs_Req_DEFAULT *VideoIdListRequest

func (p *VideoServiceVideoIdListArgs) GetReq() (v *VideoIdListRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoIdListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoIdListArgs) SetReq(val *VideoIdListRequest) {
	p.Req = val
}

func (p *VideoServiceVideoIdListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoIdListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoIdListArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoIdListArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoIdListResult struct {
	Success *VideoIdListResponse `thrift:"success,0,optional" frugal:"0,optional,VideoIdListResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoIdListResult() *VideoServiceVideoIdListResult {
	return &VideoServiceVideoIdListResult{}
}

func (p *VideoServiceVideoIdListResult) InitDefault() {
}

var VideoServiceVideoIdListResult_Success_DEFAULT *VideoIdListResponse

func (p *VideoServiceVideoIdListResult) GetSuccess() (v *VideoIdListResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoIdListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoIdListResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoIdListResponse)
}

func (p *VideoServiceVideoIdListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoIdListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoIdListResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoIdListResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoFeedListArgs struct {
	Req *VideoFeedListRequest `thrift:"req,1" frugal:"1,default,VideoFeedListRequest" json:"req"`
}

func NewVideoServiceVideoFeedListArgs() *VideoServiceVideoFeedListArgs {
	return &VideoServiceVideoFeedListArgs{}
}

func (p *VideoServiceVideoFeedListArgs) InitDefault() {
}

var VideoServiceVideoFeedListArgs_Req_DEFAULT *VideoFeedListRequest

func (p *VideoServiceVideoFeedListArgs) GetReq() (v *VideoFeedListRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoFeedListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoFeedListArgs) SetReq(val *VideoFeedListRequest) {
	p.Req = val
}

func (p *VideoServiceVideoFeedListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoFeedListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoFeedListArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoFeedListArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoFeedListResult struct {
	Success *VideoFeedListResponse `thrift:"success,0,optional" frugal:"0,optional,VideoFeedListResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoFeedListResult() *VideoServiceVideoFeedListResult {
	return &VideoServiceVideoFeedListResult{}
}

func (p *VideoServiceVideoFeedListResult) InitDefault() {
}

var VideoServiceVideoFeedListResult_Success_DEFAULT *VideoFeedListResponse

func (p *VideoServiceVideoFeedListResult) GetSuccess() (v *VideoFeedListResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoFeedListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoFeedListResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoFeedListResponse)
}

func (p *VideoServiceVideoFeedListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoFeedListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoFeedListResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoFeedListResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoSearchArgs struct {
	Req *VideoSearchRequest `thrift:"req,1" frugal:"1,default,VideoSearchRequest" json:"req"`
}

func NewVideoServiceVideoSearchArgs() *VideoServiceVideoSearchArgs {
	return &VideoServiceVideoSearchArgs{}
}

func (p *VideoServiceVideoSearchArgs) InitDefault() {
}

var VideoServiceVideoSearchArgs_Req_DEFAULT *VideoSearchRequest

func (p *VideoServiceVideoSearchArgs) GetReq() (v *VideoSearchRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoSearchArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoSearchArgs) SetReq(val *VideoSearchRequest) {
	p.Req = val
}

func (p *VideoServiceVideoSearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSearchArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoSearchArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoSearchResult struct {
	Success *VideoSearchResponse `thrift:"success,0,optional" frugal:"0,optional,VideoSearchResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoSearchResult() *VideoServiceVideoSearchResult {
	return &VideoServiceVideoSearchResult{}
}

func (p *VideoServiceVideoSearchResult) InitDefault() {
}

var VideoServiceVideoSearchResult_Success_DEFAULT *VideoSearchResponse

func (p *VideoServiceVideoSearchResult) GetSuccess() (v *VideoSearchResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoSearchResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoSearchResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoSearchResponse)
}

func (p *VideoServiceVideoSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSearchResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoSearchResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoPopularArgs struct {
	Req *VideoPopularRequest `thrift:"req,1" frugal:"1,default,VideoPopularRequest" json:"req"`
}

func NewVideoServiceVideoPopularArgs() *VideoServiceVideoPopularArgs {
	return &VideoServiceVideoPopularArgs{}
}

func (p *VideoServiceVideoPopularArgs) InitDefault() {
}

var VideoServiceVideoPopularArgs_Req_DEFAULT *VideoPopularRequest

func (p *VideoServiceVideoPopularArgs) GetReq() (v *VideoPopularRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoPopularArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPopularArgs) SetReq(val *VideoPopularRequest) {
	p.Req = val
}

func (p *VideoServiceVideoPopularArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPopularArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPopularArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPopularArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoPopularResult struct {
	Success *VideoPopularResponse `thrift:"success,0,optional" frugal:"0,optional,VideoPopularResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoPopularResult() *VideoServiceVideoPopularResult {
	return &VideoServiceVideoPopularResult{}
}

func (p *VideoServiceVideoPopularResult) InitDefault() {
}

var VideoServiceVideoPopularResult_Success_DEFAULT *VideoPopularResponse

func (p *VideoServiceVideoPopularResult) GetSuccess() (v *VideoPopularResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPopularResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPopularResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPopularResponse)
}

func (p *VideoServiceVideoPopularResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPopularResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPopularResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPopularResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoInfoArgs struct {
	Req *VideoInfoRequest `thrift:"req,1" frugal:"1,default,VideoInfoRequest" json:"req"`
}

func NewVideoServiceVideoInfoArgs() *VideoServiceVideoInfoArgs {
	return &VideoServiceVideoInfoArgs{}
}

func (p *VideoServiceVideoInfoArgs) InitDefault() {
}

var VideoServiceVideoInfoArgs_Req_DEFAULT *VideoInfoRequest

func (p *VideoServiceVideoInfoArgs) GetReq() (v *VideoInfoRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoInfoArgs) SetReq(val *VideoInfoRequest) {
	p.Req = val
}

func (p *VideoServiceVideoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoInfoArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoInfoArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoInfoResult struct {
	Success *VideoInfoResponse `thrift:"success,0,optional" frugal:"0,optional,VideoInfoResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoInfoResult() *VideoServiceVideoInfoResult {
	return &VideoServiceVideoInfoResult{}
}

func (p *VideoServiceVideoInfoResult) InitDefault() {
}

var VideoServiceVideoInfoResult_Success_DEFAULT *VideoInfoResponse

func (p *VideoServiceVideoInfoResult) GetSuccess() (v *VideoInfoResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoInfoResponse)
}

func (p *VideoServiceVideoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoInfoResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoInfoResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoVisitArgs struct {
	Req *VideoVisitRequest `thrift:"req,1" frugal:"1,default,VideoVisitRequest" json:"req"`
}

func NewVideoServiceVideoVisitArgs() *VideoServiceVideoVisitArgs {
	return &VideoServiceVideoVisitArgs{}
}

func (p *VideoServiceVideoVisitArgs) InitDefault() {
}

var VideoServiceVideoVisitArgs_Req_DEFAULT *VideoVisitRequest

func (p *VideoServiceVideoVisitArgs) GetReq() (v *VideoVisitRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoVisitArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoVisitArgs) SetReq(val *VideoVisitRequest) {
	p.Req = val
}

func (p *VideoServiceVideoVisitArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoVisitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoVisitArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoVisitArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoVisitResult struct {
	Success *VideoVisitResponse `thrift:"success,0,optional" frugal:"0,optional,VideoVisitResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoVisitResult() *VideoServiceVideoVisitResult {
	return &VideoServiceVideoVisitResult{}
}

func (p *VideoServiceVideoVisitResult) InitDefault() {
}

var VideoServiceVideoVisitResult_Success_DEFAULT *VideoVisitResponse

func (p *VideoServiceVideoVisitResult) GetSuccess() (v *VideoVisitResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoVisitResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoVisitResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoVisitResponse)
}

func (p *VideoServiceVideoVisitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoVisitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoVisitResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoVisitResult = map[int16]string{
	0: "success",
}

type VideoServiceUpdateVisitCountArgs struct {
	Req *UpdateVisitCountRequest `thrift:"req,1" frugal:"1,default,UpdateVisitCountRequest" json:"req"`
}

func NewVideoServiceUpdateVisitCountArgs() *VideoServiceUpdateVisitCountArgs {
	return &VideoServiceUpdateVisitCountArgs{}
}

func (p *VideoServiceUpdateVisitCountArgs) InitDefault() {
}

var VideoServiceUpdateVisitCountArgs_Req_DEFAULT *UpdateVisitCountRequest

func (p *VideoServiceUpdateVisitCountArgs) GetReq() (v *UpdateVisitCountRequest) {
	if !p.IsSetReq() {
		return VideoServiceUpdateVisitCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceUpdateVisitCountArgs) SetReq(val *UpdateVisitCountRequest) {
	p.Req = val
}

func (p *VideoServiceUpdateVisitCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceUpdateVisitCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVisitCountArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVisitCountArgs = map[int16]string{
	1: "req",
}

type VideoServiceUpdateVisitCountResult struct {
	Success *UpdateVisitCountResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateVisitCountResponse" json:"success,omitempty"`
}

func NewVideoServiceUpdateVisitCountResult() *VideoServiceUpdateVisitCountResult {
	return &VideoServiceUpdateVisitCountResult{}
}

func (p *VideoServiceUpdateVisitCountResult) InitDefault() {
}

var VideoServiceUpdateVisitCountResult_Success_DEFAULT *UpdateVisitCountResponse

func (p *VideoServiceUpdateVisitCountResult) GetSuccess() (v *UpdateVisitCountResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceUpdateVisitCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceUpdateVisitCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateVisitCountResponse)
}

func (p *VideoServiceUpdateVisitCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceUpdateVisitCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVisitCountResult(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVisitCountResult = map[int16]string{
	0: "success",
}

type VideoServiceUpdateVideoCommentCountArgs struct {
	Req *UpdateVideoCommentCountRequest `thrift:"req,1" frugal:"1,default,UpdateVideoCommentCountRequest" json:"req"`
}

func NewVideoServiceUpdateVideoCommentCountArgs() *VideoServiceUpdateVideoCommentCountArgs {
	return &VideoServiceUpdateVideoCommentCountArgs{}
}

func (p *VideoServiceUpdateVideoCommentCountArgs) InitDefault() {
}

var VideoServiceUpdateVideoCommentCountArgs_Req_DEFAULT *UpdateVideoCommentCountRequest

func (p *VideoServiceUpdateVideoCommentCountArgs) GetReq() (v *UpdateVideoCommentCountRequest) {
	if !p.IsSetReq() {
		return VideoServiceUpdateVideoCommentCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceUpdateVideoCommentCountArgs) SetReq(val *UpdateVideoCommentCountRequest) {
	p.Req = val
}

func (p *VideoServiceUpdateVideoCommentCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceUpdateVideoCommentCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVideoCommentCountArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVideoCommentCountArgs = map[int16]string{
	1: "req",
}

type VideoServiceUpdateVideoCommentCountResult struct {
	Success *UpdateVideoCommentCountResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateVideoCommentCountResponse" json:"success,omitempty"`
}

func NewVideoServiceUpdateVideoCommentCountResult() *VideoServiceUpdateVideoCommentCountResult {
	return &VideoServiceUpdateVideoCommentCountResult{}
}

func (p *VideoServiceUpdateVideoCommentCountResult) InitDefault() {
}

var VideoServiceUpdateVideoCommentCountResult_Success_DEFAULT *UpdateVideoCommentCountResponse

func (p *VideoServiceUpdateVideoCommentCountResult) GetSuccess() (v *UpdateVideoCommentCountResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceUpdateVideoCommentCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceUpdateVideoCommentCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateVideoCommentCountResponse)
}

func (p *VideoServiceUpdateVideoCommentCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceUpdateVideoCommentCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVideoCommentCountResult(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVideoCommentCountResult = map[int16]string{
	0: "success",
}

type VideoServiceUpdateVideoLikeCountArgs struct {
	Req *UpdateLikeCountRequest `thrift:"req,1" frugal:"1,default,UpdateLikeCountRequest" json:"req"`
}

func NewVideoServiceUpdateVideoLikeCountArgs() *VideoServiceUpdateVideoLikeCountArgs {
	return &VideoServiceUpdateVideoLikeCountArgs{}
}

func (p *VideoServiceUpdateVideoLikeCountArgs) InitDefault() {
}

var VideoServiceUpdateVideoLikeCountArgs_Req_DEFAULT *UpdateLikeCountRequest

func (p *VideoServiceUpdateVideoLikeCountArgs) GetReq() (v *UpdateLikeCountRequest) {
	if !p.IsSetReq() {
		return VideoServiceUpdateVideoLikeCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceUpdateVideoLikeCountArgs) SetReq(val *UpdateLikeCountRequest) {
	p.Req = val
}

func (p *VideoServiceUpdateVideoLikeCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceUpdateVideoLikeCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVideoLikeCountArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVideoLikeCountArgs = map[int16]string{
	1: "req",
}

type VideoServiceUpdateVideoLikeCountResult struct {
	Success *UpdateLikeCountResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateLikeCountResponse" json:"success,omitempty"`
}

func NewVideoServiceUpdateVideoLikeCountResult() *VideoServiceUpdateVideoLikeCountResult {
	return &VideoServiceUpdateVideoLikeCountResult{}
}

func (p *VideoServiceUpdateVideoLikeCountResult) InitDefault() {
}

var VideoServiceUpdateVideoLikeCountResult_Success_DEFAULT *UpdateLikeCountResponse

func (p *VideoServiceUpdateVideoLikeCountResult) GetSuccess() (v *UpdateLikeCountResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceUpdateVideoLikeCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceUpdateVideoLikeCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateLikeCountResponse)
}

func (p *VideoServiceUpdateVideoLikeCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceUpdateVideoLikeCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVideoLikeCountResult(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVideoLikeCountResult = map[int16]string{
	0: "success",
}

type VideoServiceUpdateVideoHisLikeCountArgs struct {
	Req *UpdateVideoHisLikeCountRequest `thrift:"req,1" frugal:"1,default,UpdateVideoHisLikeCountRequest" json:"req"`
}

func NewVideoServiceUpdateVideoHisLikeCountArgs() *VideoServiceUpdateVideoHisLikeCountArgs {
	return &VideoServiceUpdateVideoHisLikeCountArgs{}
}

func (p *VideoServiceUpdateVideoHisLikeCountArgs) InitDefault() {
}

var VideoServiceUpdateVideoHisLikeCountArgs_Req_DEFAULT *UpdateVideoHisLikeCountRequest

func (p *VideoServiceUpdateVideoHisLikeCountArgs) GetReq() (v *UpdateVideoHisLikeCountRequest) {
	if !p.IsSetReq() {
		return VideoServiceUpdateVideoHisLikeCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceUpdateVideoHisLikeCountArgs) SetReq(val *UpdateVideoHisLikeCountRequest) {
	p.Req = val
}

func (p *VideoServiceUpdateVideoHisLikeCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceUpdateVideoHisLikeCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVideoHisLikeCountArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVideoHisLikeCountArgs = map[int16]string{
	1: "req",
}

type VideoServiceUpdateVideoHisLikeCountResult struct {
	Success *UpdateVideoHisLikeCountResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateVideoHisLikeCountResponse" json:"success,omitempty"`
}

func NewVideoServiceUpdateVideoHisLikeCountResult() *VideoServiceUpdateVideoHisLikeCountResult {
	return &VideoServiceUpdateVideoHisLikeCountResult{}
}

func (p *VideoServiceUpdateVideoHisLikeCountResult) InitDefault() {
}

var VideoServiceUpdateVideoHisLikeCountResult_Success_DEFAULT *UpdateVideoHisLikeCountResponse

func (p *VideoServiceUpdateVideoHisLikeCountResult) GetSuccess() (v *UpdateVideoHisLikeCountResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceUpdateVideoHisLikeCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceUpdateVideoHisLikeCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateVideoHisLikeCountResponse)
}

func (p *VideoServiceUpdateVideoHisLikeCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceUpdateVideoHisLikeCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVideoHisLikeCountResult(%+v)", *p)
}

var fieldIDToName_VideoServiceUpdateVideoHisLikeCountResult = map[int16]string{
	0: "success",
}

type VideoServiceGetVideoVisitCountArgs struct {
	Req *GetVideoVisitCountRequest `thrift:"req,1" frugal:"1,default,GetVideoVisitCountRequest" json:"req"`
}

func NewVideoServiceGetVideoVisitCountArgs() *VideoServiceGetVideoVisitCountArgs {
	return &VideoServiceGetVideoVisitCountArgs{}
}

func (p *VideoServiceGetVideoVisitCountArgs) InitDefault() {
}

var VideoServiceGetVideoVisitCountArgs_Req_DEFAULT *GetVideoVisitCountRequest

func (p *VideoServiceGetVideoVisitCountArgs) GetReq() (v *GetVideoVisitCountRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetVideoVisitCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetVideoVisitCountArgs) SetReq(val *GetVideoVisitCountRequest) {
	p.Req = val
}

func (p *VideoServiceGetVideoVisitCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetVideoVisitCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoVisitCountArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoVisitCountArgs = map[int16]string{
	1: "req",
}

type VideoServiceGetVideoVisitCountResult struct {
	Success *GetVideoVisitCountResponse `thrift:"success,0,optional" frugal:"0,optional,GetVideoVisitCountResponse" json:"success,omitempty"`
}

func NewVideoServiceGetVideoVisitCountResult() *VideoServiceGetVideoVisitCountResult {
	return &VideoServiceGetVideoVisitCountResult{}
}

func (p *VideoServiceGetVideoVisitCountResult) InitDefault() {
}

var VideoServiceGetVideoVisitCountResult_Success_DEFAULT *GetVideoVisitCountResponse

func (p *VideoServiceGetVideoVisitCountResult) GetSuccess() (v *GetVideoVisitCountResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetVideoVisitCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetVideoVisitCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetVideoVisitCountResponse)
}

func (p *VideoServiceGetVideoVisitCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetVideoVisitCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoVisitCountResult(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoVisitCountResult = map[int16]string{
	0: "success",
}

type VideoServiceGetVideoVisitCountInRedisArgs struct {
	Req *GetVideoVisitCountInRedisRequest `thrift:"req,1" frugal:"1,default,GetVideoVisitCountInRedisRequest" json:"req"`
}

func NewVideoServiceGetVideoVisitCountInRedisArgs() *VideoServiceGetVideoVisitCountInRedisArgs {
	return &VideoServiceGetVideoVisitCountInRedisArgs{}
}

func (p *VideoServiceGetVideoVisitCountInRedisArgs) InitDefault() {
}

var VideoServiceGetVideoVisitCountInRedisArgs_Req_DEFAULT *GetVideoVisitCountInRedisRequest

func (p *VideoServiceGetVideoVisitCountInRedisArgs) GetReq() (v *GetVideoVisitCountInRedisRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetVideoVisitCountInRedisArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetVideoVisitCountInRedisArgs) SetReq(val *GetVideoVisitCountInRedisRequest) {
	p.Req = val
}

func (p *VideoServiceGetVideoVisitCountInRedisArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetVideoVisitCountInRedisArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoVisitCountInRedisArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoVisitCountInRedisArgs = map[int16]string{
	1: "req",
}

type VideoServiceGetVideoVisitCountInRedisResult struct {
	Success *GetVideoVisitCountInRedisResponse `thrift:"success,0,optional" frugal:"0,optional,GetVideoVisitCountInRedisResponse" json:"success,omitempty"`
}

func NewVideoServiceGetVideoVisitCountInRedisResult() *VideoServiceGetVideoVisitCountInRedisResult {
	return &VideoServiceGetVideoVisitCountInRedisResult{}
}

func (p *VideoServiceGetVideoVisitCountInRedisResult) InitDefault() {
}

var VideoServiceGetVideoVisitCountInRedisResult_Success_DEFAULT *GetVideoVisitCountInRedisResponse

func (p *VideoServiceGetVideoVisitCountInRedisResult) GetSuccess() (v *GetVideoVisitCountInRedisResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetVideoVisitCountInRedisResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetVideoVisitCountInRedisResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetVideoVisitCountInRedisResponse)
}

func (p *VideoServiceGetVideoVisitCountInRedisResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetVideoVisitCountInRedisResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoVisitCountInRedisResult(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoVisitCountInRedisResult = map[int16]string{
	0: "success",
}

type VideoServiceStreamVideoArgs struct {
	Req *StreamVideoRequest `thrift:"req,1" frugal:"1,default,StreamVideoRequest" json:"req"`
}

func NewVideoServiceStreamVideoArgs() *VideoServiceStreamVideoArgs {
	return &VideoServiceStreamVideoArgs{}
}

func (p *VideoServiceStreamVideoArgs) InitDefault() {
}

var VideoServiceStreamVideoArgs_Req_DEFAULT *StreamVideoRequest

func (p *VideoServiceStreamVideoArgs) GetReq() (v *StreamVideoRequest) {
	if !p.IsSetReq() {
		return VideoServiceStreamVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceStreamVideoArgs) SetReq(val *StreamVideoRequest) {
	p.Req = val
}

func (p *VideoServiceStreamVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceStreamVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceStreamVideoArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceStreamVideoArgs = map[int16]string{
	1: "req",
}

type VideoServiceStreamVideoResult struct {
	Success *StreamVideoResponse `thrift:"success,0,optional" frugal:"0,optional,StreamVideoResponse" json:"success,omitempty"`
}

func NewVideoServiceStreamVideoResult() *VideoServiceStreamVideoResult {
	return &VideoServiceStreamVideoResult{}
}

func (p *VideoServiceStreamVideoResult) InitDefault() {
}

var VideoServiceStreamVideoResult_Success_DEFAULT *StreamVideoResponse

func (p *VideoServiceStreamVideoResult) GetSuccess() (v *StreamVideoResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceStreamVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceStreamVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*StreamVideoResponse)
}

func (p *VideoServiceStreamVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceStreamVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceStreamVideoResult(%+v)", *p)
}

var fieldIDToName_VideoServiceStreamVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceCreateFavoriteArgs struct {
	Req *CreateFavoriteRequest `thrift:"req,1" frugal:"1,default,CreateFavoriteRequest" json:"req"`
}

func NewVideoServiceCreateFavoriteArgs() *VideoServiceCreateFavoriteArgs {
	return &VideoServiceCreateFavoriteArgs{}
}

func (p *VideoServiceCreateFavoriteArgs) InitDefault() {
}

var VideoServiceCreateFavoriteArgs_Req_DEFAULT *CreateFavoriteRequest

func (p *VideoServiceCreateFavoriteArgs) GetReq() (v *CreateFavoriteRequest) {
	if !p.IsSetReq() {
		return VideoServiceCreateFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceCreateFavoriteArgs) SetReq(val *CreateFavoriteRequest) {
	p.Req = val
}

func (p *VideoServiceCreateFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceCreateFavoriteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceCreateFavoriteArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceCreateFavoriteArgs = map[int16]string{
	1: "req",
}

type VideoServiceCreateFavoriteResult struct {
	Success *CreateFavoriteResponse `thrift:"success,0,optional" frugal:"0,optional,CreateFavoriteResponse" json:"success,omitempty"`
}

func NewVideoServiceCreateFavoriteResult() *VideoServiceCreateFavoriteResult {
	return &VideoServiceCreateFavoriteResult{}
}

func (p *VideoServiceCreateFavoriteResult) InitDefault() {
}

var VideoServiceCreateFavoriteResult_Success_DEFAULT *CreateFavoriteResponse

func (p *VideoServiceCreateFavoriteResult) GetSuccess() (v *CreateFavoriteResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceCreateFavoriteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceCreateFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateFavoriteResponse)
}

func (p *VideoServiceCreateFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceCreateFavoriteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceCreateFavoriteResult(%+v)", *p)
}

var fieldIDToName_VideoServiceCreateFavoriteResult = map[int16]string{
	0: "success",
}

type VideoServiceGetFavoriteVideoListArgs struct {
	Req *GetFavoriteVideoListRequest `thrift:"req,1" frugal:"1,default,GetFavoriteVideoListRequest" json:"req"`
}

func NewVideoServiceGetFavoriteVideoListArgs() *VideoServiceGetFavoriteVideoListArgs {
	return &VideoServiceGetFavoriteVideoListArgs{}
}

func (p *VideoServiceGetFavoriteVideoListArgs) InitDefault() {
}

var VideoServiceGetFavoriteVideoListArgs_Req_DEFAULT *GetFavoriteVideoListRequest

func (p *VideoServiceGetFavoriteVideoListArgs) GetReq() (v *GetFavoriteVideoListRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetFavoriteVideoListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetFavoriteVideoListArgs) SetReq(val *GetFavoriteVideoListRequest) {
	p.Req = val
}

func (p *VideoServiceGetFavoriteVideoListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetFavoriteVideoListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetFavoriteVideoListArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceGetFavoriteVideoListArgs = map[int16]string{
	1: "req",
}

type VideoServiceGetFavoriteVideoListResult struct {
	Success *GetFavoriteVideoListResponse `thrift:"success,0,optional" frugal:"0,optional,GetFavoriteVideoListResponse" json:"success,omitempty"`
}

func NewVideoServiceGetFavoriteVideoListResult() *VideoServiceGetFavoriteVideoListResult {
	return &VideoServiceGetFavoriteVideoListResult{}
}

func (p *VideoServiceGetFavoriteVideoListResult) InitDefault() {
}

var VideoServiceGetFavoriteVideoListResult_Success_DEFAULT *GetFavoriteVideoListResponse

func (p *VideoServiceGetFavoriteVideoListResult) GetSuccess() (v *GetFavoriteVideoListResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetFavoriteVideoListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetFavoriteVideoListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFavoriteVideoListResponse)
}

func (p *VideoServiceGetFavoriteVideoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetFavoriteVideoListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetFavoriteVideoListResult(%+v)", *p)
}

var fieldIDToName_VideoServiceGetFavoriteVideoListResult = map[int16]string{
	0: "success",
}

type VideoServiceGetFavoriteListArgs struct {
	Req *GetFavoriteListRequest `thrift:"req,1" frugal:"1,default,GetFavoriteListRequest" json:"req"`
}

func NewVideoServiceGetFavoriteListArgs() *VideoServiceGetFavoriteListArgs {
	return &VideoServiceGetFavoriteListArgs{}
}

func (p *VideoServiceGetFavoriteListArgs) InitDefault() {
}

var VideoServiceGetFavoriteListArgs_Req_DEFAULT *GetFavoriteListRequest

func (p *VideoServiceGetFavoriteListArgs) GetReq() (v *GetFavoriteListRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetFavoriteListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetFavoriteListArgs) SetReq(val *GetFavoriteListRequest) {
	p.Req = val
}

func (p *VideoServiceGetFavoriteListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetFavoriteListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetFavoriteListArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceGetFavoriteListArgs = map[int16]string{
	1: "req",
}

type VideoServiceGetFavoriteListResult struct {
	Success *GetFavoriteListResponse `thrift:"success,0,optional" frugal:"0,optional,GetFavoriteListResponse" json:"success,omitempty"`
}

func NewVideoServiceGetFavoriteListResult() *VideoServiceGetFavoriteListResult {
	return &VideoServiceGetFavoriteListResult{}
}

func (p *VideoServiceGetFavoriteListResult) InitDefault() {
}

var VideoServiceGetFavoriteListResult_Success_DEFAULT *GetFavoriteListResponse

func (p *VideoServiceGetFavoriteListResult) GetSuccess() (v *GetFavoriteListResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetFavoriteListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetFavoriteListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetFavoriteListResponse)
}

func (p *VideoServiceGetFavoriteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetFavoriteListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetFavoriteListResult(%+v)", *p)
}

var fieldIDToName_VideoServiceGetFavoriteListResult = map[int16]string{
	0: "success",
}

type VideoServiceGetVideoFromFavoriteArgs struct {
	Req *GetVideoFromFavoriteRequest `thrift:"req,1" frugal:"1,default,GetVideoFromFavoriteRequest" json:"req"`
}

func NewVideoServiceGetVideoFromFavoriteArgs() *VideoServiceGetVideoFromFavoriteArgs {
	return &VideoServiceGetVideoFromFavoriteArgs{}
}

func (p *VideoServiceGetVideoFromFavoriteArgs) InitDefault() {
}

var VideoServiceGetVideoFromFavoriteArgs_Req_DEFAULT *GetVideoFromFavoriteRequest

func (p *VideoServiceGetVideoFromFavoriteArgs) GetReq() (v *GetVideoFromFavoriteRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetVideoFromFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetVideoFromFavoriteArgs) SetReq(val *GetVideoFromFavoriteRequest) {
	p.Req = val
}

func (p *VideoServiceGetVideoFromFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetVideoFromFavoriteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoFromFavoriteArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoFromFavoriteArgs = map[int16]string{
	1: "req",
}

type VideoServiceGetVideoFromFavoriteResult struct {
	Success *GetVideoFromFavoriteResponse `thrift:"success,0,optional" frugal:"0,optional,GetVideoFromFavoriteResponse" json:"success,omitempty"`
}

func NewVideoServiceGetVideoFromFavoriteResult() *VideoServiceGetVideoFromFavoriteResult {
	return &VideoServiceGetVideoFromFavoriteResult{}
}

func (p *VideoServiceGetVideoFromFavoriteResult) InitDefault() {
}

var VideoServiceGetVideoFromFavoriteResult_Success_DEFAULT *GetVideoFromFavoriteResponse

func (p *VideoServiceGetVideoFromFavoriteResult) GetSuccess() (v *GetVideoFromFavoriteResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetVideoFromFavoriteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetVideoFromFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetVideoFromFavoriteResponse)
}

func (p *VideoServiceGetVideoFromFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetVideoFromFavoriteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoFromFavoriteResult(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoFromFavoriteResult = map[int16]string{
	0: "success",
}

type VideoServiceAddFavoriteVideoArgs struct {
	Req *AddFavoriteVideoRequest `thrift:"req,1" frugal:"1,default,AddFavoriteVideoRequest" json:"req"`
}

func NewVideoServiceAddFavoriteVideoArgs() *VideoServiceAddFavoriteVideoArgs {
	return &VideoServiceAddFavoriteVideoArgs{}
}

func (p *VideoServiceAddFavoriteVideoArgs) InitDefault() {
}

var VideoServiceAddFavoriteVideoArgs_Req_DEFAULT *AddFavoriteVideoRequest

func (p *VideoServiceAddFavoriteVideoArgs) GetReq() (v *AddFavoriteVideoRequest) {
	if !p.IsSetReq() {
		return VideoServiceAddFavoriteVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceAddFavoriteVideoArgs) SetReq(val *AddFavoriteVideoRequest) {
	p.Req = val
}

func (p *VideoServiceAddFavoriteVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceAddFavoriteVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceAddFavoriteVideoArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceAddFavoriteVideoArgs = map[int16]string{
	1: "req",
}

type VideoServiceAddFavoriteVideoResult struct {
	Success *AddFavoriteVideoResponse `thrift:"success,0,optional" frugal:"0,optional,AddFavoriteVideoResponse" json:"success,omitempty"`
}

func NewVideoServiceAddFavoriteVideoResult() *VideoServiceAddFavoriteVideoResult {
	return &VideoServiceAddFavoriteVideoResult{}
}

func (p *VideoServiceAddFavoriteVideoResult) InitDefault() {
}

var VideoServiceAddFavoriteVideoResult_Success_DEFAULT *AddFavoriteVideoResponse

func (p *VideoServiceAddFavoriteVideoResult) GetSuccess() (v *AddFavoriteVideoResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceAddFavoriteVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceAddFavoriteVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddFavoriteVideoResponse)
}

func (p *VideoServiceAddFavoriteVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceAddFavoriteVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceAddFavoriteVideoResult(%+v)", *p)
}

var fieldIDToName_VideoServiceAddFavoriteVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceDeleteFavoriteArgs struct {
	Req *DeleteFavoriteRequest `thrift:"req,1" frugal:"1,default,DeleteFavoriteRequest" json:"req"`
}

func NewVideoServiceDeleteFavoriteArgs() *VideoServiceDeleteFavoriteArgs {
	return &VideoServiceDeleteFavoriteArgs{}
}

func (p *VideoServiceDeleteFavoriteArgs) InitDefault() {
}

var VideoServiceDeleteFavoriteArgs_Req_DEFAULT *DeleteFavoriteRequest

func (p *VideoServiceDeleteFavoriteArgs) GetReq() (v *DeleteFavoriteRequest) {
	if !p.IsSetReq() {
		return VideoServiceDeleteFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceDeleteFavoriteArgs) SetReq(val *DeleteFavoriteRequest) {
	p.Req = val
}

func (p *VideoServiceDeleteFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceDeleteFavoriteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteFavoriteArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteFavoriteArgs = map[int16]string{
	1: "req",
}

type VideoServiceDeleteFavoriteResult struct {
	Success *DeleteFavoriteResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteFavoriteResponse" json:"success,omitempty"`
}

func NewVideoServiceDeleteFavoriteResult() *VideoServiceDeleteFavoriteResult {
	return &VideoServiceDeleteFavoriteResult{}
}

func (p *VideoServiceDeleteFavoriteResult) InitDefault() {
}

var VideoServiceDeleteFavoriteResult_Success_DEFAULT *DeleteFavoriteResponse

func (p *VideoServiceDeleteFavoriteResult) GetSuccess() (v *DeleteFavoriteResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceDeleteFavoriteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceDeleteFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteFavoriteResponse)
}

func (p *VideoServiceDeleteFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceDeleteFavoriteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteFavoriteResult(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteFavoriteResult = map[int16]string{
	0: "success",
}

type VideoServiceDeleteVideoFromFavoriteArgs struct {
	Req *DeleteVideoFromFavoriteRequest `thrift:"req,1" frugal:"1,default,DeleteVideoFromFavoriteRequest" json:"req"`
}

func NewVideoServiceDeleteVideoFromFavoriteArgs() *VideoServiceDeleteVideoFromFavoriteArgs {
	return &VideoServiceDeleteVideoFromFavoriteArgs{}
}

func (p *VideoServiceDeleteVideoFromFavoriteArgs) InitDefault() {
}

var VideoServiceDeleteVideoFromFavoriteArgs_Req_DEFAULT *DeleteVideoFromFavoriteRequest

func (p *VideoServiceDeleteVideoFromFavoriteArgs) GetReq() (v *DeleteVideoFromFavoriteRequest) {
	if !p.IsSetReq() {
		return VideoServiceDeleteVideoFromFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceDeleteVideoFromFavoriteArgs) SetReq(val *DeleteVideoFromFavoriteRequest) {
	p.Req = val
}

func (p *VideoServiceDeleteVideoFromFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceDeleteVideoFromFavoriteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteVideoFromFavoriteArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteVideoFromFavoriteArgs = map[int16]string{
	1: "req",
}

type VideoServiceDeleteVideoFromFavoriteResult struct {
	Success *DeleteVideoFromFavoriteResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteVideoFromFavoriteResponse" json:"success,omitempty"`
}

func NewVideoServiceDeleteVideoFromFavoriteResult() *VideoServiceDeleteVideoFromFavoriteResult {
	return &VideoServiceDeleteVideoFromFavoriteResult{}
}

func (p *VideoServiceDeleteVideoFromFavoriteResult) InitDefault() {
}

var VideoServiceDeleteVideoFromFavoriteResult_Success_DEFAULT *DeleteVideoFromFavoriteResponse

func (p *VideoServiceDeleteVideoFromFavoriteResult) GetSuccess() (v *DeleteVideoFromFavoriteResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceDeleteVideoFromFavoriteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceDeleteVideoFromFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteVideoFromFavoriteResponse)
}

func (p *VideoServiceDeleteVideoFromFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceDeleteVideoFromFavoriteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteVideoFromFavoriteResult(%+v)", *p)
}

var fieldIDToName_VideoServiceDeleteVideoFromFavoriteResult = map[int16]string{
	0: "success",
}

type VideoServiceSharedVideoArgs struct {
	Req *SharedVideoRequest `thrift:"req,1" frugal:"1,default,SharedVideoRequest" json:"req"`
}

func NewVideoServiceSharedVideoArgs() *VideoServiceSharedVideoArgs {
	return &VideoServiceSharedVideoArgs{}
}

func (p *VideoServiceSharedVideoArgs) InitDefault() {
}

var VideoServiceSharedVideoArgs_Req_DEFAULT *SharedVideoRequest

func (p *VideoServiceSharedVideoArgs) GetReq() (v *SharedVideoRequest) {
	if !p.IsSetReq() {
		return VideoServiceSharedVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceSharedVideoArgs) SetReq(val *SharedVideoRequest) {
	p.Req = val
}

func (p *VideoServiceSharedVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceSharedVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSharedVideoArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceSharedVideoArgs = map[int16]string{
	1: "req",
}

type VideoServiceSharedVideoResult struct {
	Success *SharedVideoResponse `thrift:"success,0,optional" frugal:"0,optional,SharedVideoResponse" json:"success,omitempty"`
}

func NewVideoServiceSharedVideoResult() *VideoServiceSharedVideoResult {
	return &VideoServiceSharedVideoResult{}
}

func (p *VideoServiceSharedVideoResult) InitDefault() {
}

var VideoServiceSharedVideoResult_Success_DEFAULT *SharedVideoResponse

func (p *VideoServiceSharedVideoResult) GetSuccess() (v *SharedVideoResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceSharedVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceSharedVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*SharedVideoResponse)
}

func (p *VideoServiceSharedVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceSharedVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSharedVideoResult(%+v)", *p)
}

var fieldIDToName_VideoServiceSharedVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceRecommendVideoArgs struct {
	Req *RecommendVideoRequest `thrift:"req,1" frugal:"1,default,RecommendVideoRequest" json:"req"`
}

func NewVideoServiceRecommendVideoArgs() *VideoServiceRecommendVideoArgs {
	return &VideoServiceRecommendVideoArgs{}
}

func (p *VideoServiceRecommendVideoArgs) InitDefault() {
}

var VideoServiceRecommendVideoArgs_Req_DEFAULT *RecommendVideoRequest

func (p *VideoServiceRecommendVideoArgs) GetReq() (v *RecommendVideoRequest) {
	if !p.IsSetReq() {
		return VideoServiceRecommendVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceRecommendVideoArgs) SetReq(val *RecommendVideoRequest) {
	p.Req = val
}

func (p *VideoServiceRecommendVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceRecommendVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceRecommendVideoArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceRecommendVideoArgs = map[int16]string{
	1: "req",
}

type VideoServiceRecommendVideoResult struct {
	Success *RecommendVideoResponse `thrift:"success,0,optional" frugal:"0,optional,RecommendVideoResponse" json:"success,omitempty"`
}

func NewVideoServiceRecommendVideoResult() *VideoServiceRecommendVideoResult {
	return &VideoServiceRecommendVideoResult{}
}

func (p *VideoServiceRecommendVideoResult) InitDefault() {
}

var VideoServiceRecommendVideoResult_Success_DEFAULT *RecommendVideoResponse

func (p *VideoServiceRecommendVideoResult) GetSuccess() (v *RecommendVideoResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceRecommendVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceRecommendVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*RecommendVideoResponse)
}

func (p *VideoServiceRecommendVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceRecommendVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceRecommendVideoResult(%+v)", *p)
}

var fieldIDToName_VideoServiceRecommendVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoPublishStartV2Args struct {
	Req *VideoPublishStartRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishStartRequestV2" json:"req"`
}

func NewVideoServiceVideoPublishStartV2Args() *VideoServiceVideoPublishStartV2Args {
	return &VideoServiceVideoPublishStartV2Args{}
}

func (p *VideoServiceVideoPublishStartV2Args) InitDefault() {
}

var VideoServiceVideoPublishStartV2Args_Req_DEFAULT *VideoPublishStartRequestV2

func (p *VideoServiceVideoPublishStartV2Args) GetReq() (v *VideoPublishStartRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishStartV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishStartV2Args) SetReq(val *VideoPublishStartRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoPublishStartV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishStartV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishStartV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishStartV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishStartV2Result struct {
	Success *VideoPublishStartResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishStartResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishStartV2Result() *VideoServiceVideoPublishStartV2Result {
	return &VideoServiceVideoPublishStartV2Result{}
}

func (p *VideoServiceVideoPublishStartV2Result) InitDefault() {
}

var VideoServiceVideoPublishStartV2Result_Success_DEFAULT *VideoPublishStartResponseV2

func (p *VideoServiceVideoPublishStartV2Result) GetSuccess() (v *VideoPublishStartResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishStartV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishStartV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishStartResponseV2)
}

func (p *VideoServiceVideoPublishStartV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishStartV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishStartV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishStartV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoPublishUploadingV2Args struct {
	Req *VideoPublishUploadingRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishUploadingRequestV2" json:"req"`
}

func NewVideoServiceVideoPublishUploadingV2Args() *VideoServiceVideoPublishUploadingV2Args {
	return &VideoServiceVideoPublishUploadingV2Args{}
}

func (p *VideoServiceVideoPublishUploadingV2Args) InitDefault() {
}

var VideoServiceVideoPublishUploadingV2Args_Req_DEFAULT *VideoPublishUploadingRequestV2

func (p *VideoServiceVideoPublishUploadingV2Args) GetReq() (v *VideoPublishUploadingRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishUploadingV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishUploadingV2Args) SetReq(val *VideoPublishUploadingRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoPublishUploadingV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishUploadingV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishUploadingV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishUploadingV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishUploadingV2Result struct {
	Success *VideoPublishUploadingResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishUploadingResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishUploadingV2Result() *VideoServiceVideoPublishUploadingV2Result {
	return &VideoServiceVideoPublishUploadingV2Result{}
}

func (p *VideoServiceVideoPublishUploadingV2Result) InitDefault() {
}

var VideoServiceVideoPublishUploadingV2Result_Success_DEFAULT *VideoPublishUploadingResponseV2

func (p *VideoServiceVideoPublishUploadingV2Result) GetSuccess() (v *VideoPublishUploadingResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishUploadingV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishUploadingV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishUploadingResponseV2)
}

func (p *VideoServiceVideoPublishUploadingV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishUploadingV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishUploadingV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishUploadingV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoPublishCompleteV2Args struct {
	Req *VideoPublishCompleteRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishCompleteRequestV2" json:"req"`
}

func NewVideoServiceVideoPublishCompleteV2Args() *VideoServiceVideoPublishCompleteV2Args {
	return &VideoServiceVideoPublishCompleteV2Args{}
}

func (p *VideoServiceVideoPublishCompleteV2Args) InitDefault() {
}

var VideoServiceVideoPublishCompleteV2Args_Req_DEFAULT *VideoPublishCompleteRequestV2

func (p *VideoServiceVideoPublishCompleteV2Args) GetReq() (v *VideoPublishCompleteRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishCompleteV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishCompleteV2Args) SetReq(val *VideoPublishCompleteRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoPublishCompleteV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishCompleteV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCompleteV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCompleteV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishCompleteV2Result struct {
	Success *VideoPublishCompleteResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishCompleteResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishCompleteV2Result() *VideoServiceVideoPublishCompleteV2Result {
	return &VideoServiceVideoPublishCompleteV2Result{}
}

func (p *VideoServiceVideoPublishCompleteV2Result) InitDefault() {
}

var VideoServiceVideoPublishCompleteV2Result_Success_DEFAULT *VideoPublishCompleteResponseV2

func (p *VideoServiceVideoPublishCompleteV2Result) GetSuccess() (v *VideoPublishCompleteResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishCompleteV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishCompleteV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishCompleteResponseV2)
}

func (p *VideoServiceVideoPublishCompleteV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishCompleteV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCompleteV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCompleteV2Result = map[int16]string{
	0: "success",
}

type VideoServiceVideoPublishCancelV2Args struct {
	Req *VideoPublishCancelRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishCancelRequestV2" json:"req"`
}

func NewVideoServiceVideoPublishCancelV2Args() *VideoServiceVideoPublishCancelV2Args {
	return &VideoServiceVideoPublishCancelV2Args{}
}

func (p *VideoServiceVideoPublishCancelV2Args) InitDefault() {
}

var VideoServiceVideoPublishCancelV2Args_Req_DEFAULT *VideoPublishCancelRequestV2

func (p *VideoServiceVideoPublishCancelV2Args) GetReq() (v *VideoPublishCancelRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceVideoPublishCancelV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoPublishCancelV2Args) SetReq(val *VideoPublishCancelRequestV2) {
	p.Req = val
}

func (p *VideoServiceVideoPublishCancelV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoPublishCancelV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCancelV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCancelV2Args = map[int16]string{
	1: "req",
}

type VideoServiceVideoPublishCancelV2Result struct {
	Success *VideoPublishCancelResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishCancelResponseV2" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishCancelV2Result() *VideoServiceVideoPublishCancelV2Result {
	return &VideoServiceVideoPublishCancelV2Result{}
}

func (p *VideoServiceVideoPublishCancelV2Result) InitDefault() {
}

var VideoServiceVideoPublishCancelV2Result_Success_DEFAULT *VideoPublishCancelResponseV2

func (p *VideoServiceVideoPublishCancelV2Result) GetSuccess() (v *VideoPublishCancelResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishCancelV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishCancelV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishCancelResponseV2)
}

func (p *VideoServiceVideoPublishCancelV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishCancelV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCancelV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoPublishCancelV2Result = map[int16]string{
	0: "success",
}

type VideoServiceGetUploadProgressV2Args struct {
	Req *VideoPublishProgressRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishProgressRequestV2" json:"req"`
}

func NewVideoServiceGetUploadProgressV2Args() *VideoServiceGetUploadProgressV2Args {
	return &VideoServiceGetUploadProgressV2Args{}
}

func (p *VideoServiceGetUploadProgressV2Args) InitDefault() {
}

var VideoServiceGetUploadProgressV2Args_Req_DEFAULT *VideoPublishProgressRequestV2

func (p *VideoServiceGetUploadProgressV2Args) GetReq() (v *VideoPublishProgressRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceGetUploadProgressV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetUploadProgressV2Args) SetReq(val *VideoPublishProgressRequestV2) {
	p.Req = val
}

func (p *VideoServiceGetUploadProgressV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetUploadProgressV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetUploadProgressV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceGetUploadProgressV2Args = map[int16]string{
	1: "req",
}

type VideoServiceGetUploadProgressV2Result struct {
	Success *VideoPublishProgressResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishProgressResponseV2" json:"success,omitempty"`
}

func NewVideoServiceGetUploadProgressV2Result() *VideoServiceGetUploadProgressV2Result {
	return &VideoServiceGetUploadProgressV2Result{}
}

func (p *VideoServiceGetUploadProgressV2Result) InitDefault() {
}

var VideoServiceGetUploadProgressV2Result_Success_DEFAULT *VideoPublishProgressResponseV2

func (p *VideoServiceGetUploadProgressV2Result) GetSuccess() (v *VideoPublishProgressResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceGetUploadProgressV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetUploadProgressV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishProgressResponseV2)
}

func (p *VideoServiceGetUploadProgressV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetUploadProgressV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetUploadProgressV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceGetUploadProgressV2Result = map[int16]string{
	0: "success",
}

type VideoServiceResumeUploadV2Args struct {
	Req *VideoPublishResumeRequestV2 `thrift:"req,1" frugal:"1,default,VideoPublishResumeRequestV2" json:"req"`
}

func NewVideoServiceResumeUploadV2Args() *VideoServiceResumeUploadV2Args {
	return &VideoServiceResumeUploadV2Args{}
}

func (p *VideoServiceResumeUploadV2Args) InitDefault() {
}

var VideoServiceResumeUploadV2Args_Req_DEFAULT *VideoPublishResumeRequestV2

func (p *VideoServiceResumeUploadV2Args) GetReq() (v *VideoPublishResumeRequestV2) {
	if !p.IsSetReq() {
		return VideoServiceResumeUploadV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceResumeUploadV2Args) SetReq(val *VideoPublishResumeRequestV2) {
	p.Req = val
}

func (p *VideoServiceResumeUploadV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceResumeUploadV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceResumeUploadV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceResumeUploadV2Args = map[int16]string{
	1: "req",
}

type VideoServiceResumeUploadV2Result struct {
	Success *VideoPublishResumeResponseV2 `thrift:"success,0,optional" frugal:"0,optional,VideoPublishResumeResponseV2" json:"success,omitempty"`
}

func NewVideoServiceResumeUploadV2Result() *VideoServiceResumeUploadV2Result {
	return &VideoServiceResumeUploadV2Result{}
}

func (p *VideoServiceResumeUploadV2Result) InitDefault() {
}

var VideoServiceResumeUploadV2Result_Success_DEFAULT *VideoPublishResumeResponseV2

func (p *VideoServiceResumeUploadV2Result) GetSuccess() (v *VideoPublishResumeResponseV2) {
	if !p.IsSetSuccess() {
		return VideoServiceResumeUploadV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceResumeUploadV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishResumeResponseV2)
}

func (p *VideoServiceResumeUploadV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceResumeUploadV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceResumeUploadV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceResumeUploadV2Result = map[int16]string{
	0: "success",
}

type VideoServiceManageVideoHeatV2Args struct {
	Req *VideoHeatManagementRequest `thrift:"req,1" frugal:"1,default,VideoHeatManagementRequest" json:"req"`
}

func NewVideoServiceManageVideoHeatV2Args() *VideoServiceManageVideoHeatV2Args {
	return &VideoServiceManageVideoHeatV2Args{}
}

func (p *VideoServiceManageVideoHeatV2Args) InitDefault() {
}

var VideoServiceManageVideoHeatV2Args_Req_DEFAULT *VideoHeatManagementRequest

func (p *VideoServiceManageVideoHeatV2Args) GetReq() (v *VideoHeatManagementRequest) {
	if !p.IsSetReq() {
		return VideoServiceManageVideoHeatV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceManageVideoHeatV2Args) SetReq(val *VideoHeatManagementRequest) {
	p.Req = val
}

func (p *VideoServiceManageVideoHeatV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceManageVideoHeatV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceManageVideoHeatV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceManageVideoHeatV2Args = map[int16]string{
	1: "req",
}

type VideoServiceManageVideoHeatV2Result struct {
	Success *VideoHeatManagementResponse `thrift:"success,0,optional" frugal:"0,optional,VideoHeatManagementResponse" json:"success,omitempty"`
}

func NewVideoServiceManageVideoHeatV2Result() *VideoServiceManageVideoHeatV2Result {
	return &VideoServiceManageVideoHeatV2Result{}
}

func (p *VideoServiceManageVideoHeatV2Result) InitDefault() {
}

var VideoServiceManageVideoHeatV2Result_Success_DEFAULT *VideoHeatManagementResponse

func (p *VideoServiceManageVideoHeatV2Result) GetSuccess() (v *VideoHeatManagementResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceManageVideoHeatV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceManageVideoHeatV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoHeatManagementResponse)
}

func (p *VideoServiceManageVideoHeatV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceManageVideoHeatV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceManageVideoHeatV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceManageVideoHeatV2Result = map[int16]string{
	0: "success",
}

type VideoServiceManageUserQuotaV2Args struct {
	Req *UserQuotaManagementRequest `thrift:"req,1" frugal:"1,default,UserQuotaManagementRequest" json:"req"`
}

func NewVideoServiceManageUserQuotaV2Args() *VideoServiceManageUserQuotaV2Args {
	return &VideoServiceManageUserQuotaV2Args{}
}

func (p *VideoServiceManageUserQuotaV2Args) InitDefault() {
}

var VideoServiceManageUserQuotaV2Args_Req_DEFAULT *UserQuotaManagementRequest

func (p *VideoServiceManageUserQuotaV2Args) GetReq() (v *UserQuotaManagementRequest) {
	if !p.IsSetReq() {
		return VideoServiceManageUserQuotaV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceManageUserQuotaV2Args) SetReq(val *UserQuotaManagementRequest) {
	p.Req = val
}

func (p *VideoServiceManageUserQuotaV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceManageUserQuotaV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceManageUserQuotaV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceManageUserQuotaV2Args = map[int16]string{
	1: "req",
}

type VideoServiceManageUserQuotaV2Result struct {
	Success *UserQuotaManagementResponse `thrift:"success,0,optional" frugal:"0,optional,UserQuotaManagementResponse" json:"success,omitempty"`
}

func NewVideoServiceManageUserQuotaV2Result() *VideoServiceManageUserQuotaV2Result {
	return &VideoServiceManageUserQuotaV2Result{}
}

func (p *VideoServiceManageUserQuotaV2Result) InitDefault() {
}

var VideoServiceManageUserQuotaV2Result_Success_DEFAULT *UserQuotaManagementResponse

func (p *VideoServiceManageUserQuotaV2Result) GetSuccess() (v *UserQuotaManagementResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceManageUserQuotaV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceManageUserQuotaV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*UserQuotaManagementResponse)
}

func (p *VideoServiceManageUserQuotaV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceManageUserQuotaV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceManageUserQuotaV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceManageUserQuotaV2Result = map[int16]string{
	0: "success",
}

type VideoServiceBatchOperateVideosV2Args struct {
	Req *BatchVideoOperationRequest `thrift:"req,1" frugal:"1,default,BatchVideoOperationRequest" json:"req"`
}

func NewVideoServiceBatchOperateVideosV2Args() *VideoServiceBatchOperateVideosV2Args {
	return &VideoServiceBatchOperateVideosV2Args{}
}

func (p *VideoServiceBatchOperateVideosV2Args) InitDefault() {
}

var VideoServiceBatchOperateVideosV2Args_Req_DEFAULT *BatchVideoOperationRequest

func (p *VideoServiceBatchOperateVideosV2Args) GetReq() (v *BatchVideoOperationRequest) {
	if !p.IsSetReq() {
		return VideoServiceBatchOperateVideosV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceBatchOperateVideosV2Args) SetReq(val *BatchVideoOperationRequest) {
	p.Req = val
}

func (p *VideoServiceBatchOperateVideosV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceBatchOperateVideosV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceBatchOperateVideosV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceBatchOperateVideosV2Args = map[int16]string{
	1: "req",
}

type VideoServiceBatchOperateVideosV2Result struct {
	Success *BatchVideoOperationResponse `thrift:"success,0,optional" frugal:"0,optional,BatchVideoOperationResponse" json:"success,omitempty"`
}

func NewVideoServiceBatchOperateVideosV2Result() *VideoServiceBatchOperateVideosV2Result {
	return &VideoServiceBatchOperateVideosV2Result{}
}

func (p *VideoServiceBatchOperateVideosV2Result) InitDefault() {
}

var VideoServiceBatchOperateVideosV2Result_Success_DEFAULT *BatchVideoOperationResponse

func (p *VideoServiceBatchOperateVideosV2Result) GetSuccess() (v *BatchVideoOperationResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceBatchOperateVideosV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceBatchOperateVideosV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*BatchVideoOperationResponse)
}

func (p *VideoServiceBatchOperateVideosV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceBatchOperateVideosV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceBatchOperateVideosV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceBatchOperateVideosV2Result = map[int16]string{
	0: "success",
}

type VideoServiceTranscodeVideoV2Args struct {
	Req *VideoTranscodingRequest `thrift:"req,1" frugal:"1,default,VideoTranscodingRequest" json:"req"`
}

func NewVideoServiceTranscodeVideoV2Args() *VideoServiceTranscodeVideoV2Args {
	return &VideoServiceTranscodeVideoV2Args{}
}

func (p *VideoServiceTranscodeVideoV2Args) InitDefault() {
}

var VideoServiceTranscodeVideoV2Args_Req_DEFAULT *VideoTranscodingRequest

func (p *VideoServiceTranscodeVideoV2Args) GetReq() (v *VideoTranscodingRequest) {
	if !p.IsSetReq() {
		return VideoServiceTranscodeVideoV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceTranscodeVideoV2Args) SetReq(val *VideoTranscodingRequest) {
	p.Req = val
}

func (p *VideoServiceTranscodeVideoV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceTranscodeVideoV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceTranscodeVideoV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceTranscodeVideoV2Args = map[int16]string{
	1: "req",
}

type VideoServiceTranscodeVideoV2Result struct {
	Success *VideoTranscodingResponse `thrift:"success,0,optional" frugal:"0,optional,VideoTranscodingResponse" json:"success,omitempty"`
}

func NewVideoServiceTranscodeVideoV2Result() *VideoServiceTranscodeVideoV2Result {
	return &VideoServiceTranscodeVideoV2Result{}
}

func (p *VideoServiceTranscodeVideoV2Result) InitDefault() {
}

var VideoServiceTranscodeVideoV2Result_Success_DEFAULT *VideoTranscodingResponse

func (p *VideoServiceTranscodeVideoV2Result) GetSuccess() (v *VideoTranscodingResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceTranscodeVideoV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceTranscodeVideoV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoTranscodingResponse)
}

func (p *VideoServiceTranscodeVideoV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceTranscodeVideoV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceTranscodeVideoV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceTranscodeVideoV2Result = map[int16]string{
	0: "success",
}

type VideoServiceGetVideoAnalyticsV2Args struct {
	Req *VideoAnalyticsRequest `thrift:"req,1" frugal:"1,default,VideoAnalyticsRequest" json:"req"`
}

func NewVideoServiceGetVideoAnalyticsV2Args() *VideoServiceGetVideoAnalyticsV2Args {
	return &VideoServiceGetVideoAnalyticsV2Args{}
}

func (p *VideoServiceGetVideoAnalyticsV2Args) InitDefault() {
}

var VideoServiceGetVideoAnalyticsV2Args_Req_DEFAULT *VideoAnalyticsRequest

func (p *VideoServiceGetVideoAnalyticsV2Args) GetReq() (v *VideoAnalyticsRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetVideoAnalyticsV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetVideoAnalyticsV2Args) SetReq(val *VideoAnalyticsRequest) {
	p.Req = val
}

func (p *VideoServiceGetVideoAnalyticsV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetVideoAnalyticsV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoAnalyticsV2Args(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoAnalyticsV2Args = map[int16]string{
	1: "req",
}

type VideoServiceGetVideoAnalyticsV2Result struct {
	Success *VideoAnalyticsResponse `thrift:"success,0,optional" frugal:"0,optional,VideoAnalyticsResponse" json:"success,omitempty"`
}

func NewVideoServiceGetVideoAnalyticsV2Result() *VideoServiceGetVideoAnalyticsV2Result {
	return &VideoServiceGetVideoAnalyticsV2Result{}
}

func (p *VideoServiceGetVideoAnalyticsV2Result) InitDefault() {
}

var VideoServiceGetVideoAnalyticsV2Result_Success_DEFAULT *VideoAnalyticsResponse

func (p *VideoServiceGetVideoAnalyticsV2Result) GetSuccess() (v *VideoAnalyticsResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetVideoAnalyticsV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetVideoAnalyticsV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*VideoAnalyticsResponse)
}

func (p *VideoServiceGetVideoAnalyticsV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetVideoAnalyticsV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoAnalyticsV2Result(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoAnalyticsV2Result = map[int16]string{
	0: "success",
}

type VideoServiceImageFeatureExtractArgs struct {
	Req *ImageFeatureExtractRequest `thrift:"req,1" frugal:"1,default,ImageFeatureExtractRequest" json:"req"`
}

func NewVideoServiceImageFeatureExtractArgs() *VideoServiceImageFeatureExtractArgs {
	return &VideoServiceImageFeatureExtractArgs{}
}

func (p *VideoServiceImageFeatureExtractArgs) InitDefault() {
}

var VideoServiceImageFeatureExtractArgs_Req_DEFAULT *ImageFeatureExtractRequest

func (p *VideoServiceImageFeatureExtractArgs) GetReq() (v *ImageFeatureExtractRequest) {
	if !p.IsSetReq() {
		return VideoServiceImageFeatureExtractArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceImageFeatureExtractArgs) SetReq(val *ImageFeatureExtractRequest) {
	p.Req = val
}

func (p *VideoServiceImageFeatureExtractArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceImageFeatureExtractArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceImageFeatureExtractArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceImageFeatureExtractArgs = map[int16]string{
	1: "req",
}

type VideoServiceImageFeatureExtractResult struct {
	Success *ImageFeatureExtractResponse `thrift:"success,0,optional" frugal:"0,optional,ImageFeatureExtractResponse" json:"success,omitempty"`
}

func NewVideoServiceImageFeatureExtractResult() *VideoServiceImageFeatureExtractResult {
	return &VideoServiceImageFeatureExtractResult{}
}

func (p *VideoServiceImageFeatureExtractResult) InitDefault() {
}

var VideoServiceImageFeatureExtractResult_Success_DEFAULT *ImageFeatureExtractResponse

func (p *VideoServiceImageFeatureExtractResult) GetSuccess() (v *ImageFeatureExtractResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceImageFeatureExtractResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceImageFeatureExtractResult) SetSuccess(x interface{}) {
	p.Success = x.(*ImageFeatureExtractResponse)
}

func (p *VideoServiceImageFeatureExtractResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceImageFeatureExtractResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceImageFeatureExtractResult(%+v)", *p)
}

var fieldIDToName_VideoServiceImageFeatureExtractResult = map[int16]string{
	0: "success",
}

type VideoServiceImageSearchArgs struct {
	Req *ImageSearchRequest `thrift:"req,1" frugal:"1,default,ImageSearchRequest" json:"req"`
}

func NewVideoServiceImageSearchArgs() *VideoServiceImageSearchArgs {
	return &VideoServiceImageSearchArgs{}
}

func (p *VideoServiceImageSearchArgs) InitDefault() {
}

var VideoServiceImageSearchArgs_Req_DEFAULT *ImageSearchRequest

func (p *VideoServiceImageSearchArgs) GetReq() (v *ImageSearchRequest) {
	if !p.IsSetReq() {
		return VideoServiceImageSearchArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceImageSearchArgs) SetReq(val *ImageSearchRequest) {
	p.Req = val
}

func (p *VideoServiceImageSearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceImageSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceImageSearchArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceImageSearchArgs = map[int16]string{
	1: "req",
}

type VideoServiceImageSearchResult struct {
	Success *ImageSearchResponse `thrift:"success,0,optional" frugal:"0,optional,ImageSearchResponse" json:"success,omitempty"`
}

func NewVideoServiceImageSearchResult() *VideoServiceImageSearchResult {
	return &VideoServiceImageSearchResult{}
}

func (p *VideoServiceImageSearchResult) InitDefault() {
}

var VideoServiceImageSearchResult_Success_DEFAULT *ImageSearchResponse

func (p *VideoServiceImageSearchResult) GetSuccess() (v *ImageSearchResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceImageSearchResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceImageSearchResult) SetSuccess(x interface{}) {
	p.Success = x.(*ImageSearchResponse)
}

func (p *VideoServiceImageSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceImageSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceImageSearchResult(%+v)", *p)
}

var fieldIDToName_VideoServiceImageSearchResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoKeyFrameExtractArgs struct {
	Req *VideoKeyFrameExtractRequest `thrift:"req,1" frugal:"1,default,VideoKeyFrameExtractRequest" json:"req"`
}

func NewVideoServiceVideoKeyFrameExtractArgs() *VideoServiceVideoKeyFrameExtractArgs {
	return &VideoServiceVideoKeyFrameExtractArgs{}
}

func (p *VideoServiceVideoKeyFrameExtractArgs) InitDefault() {
}

var VideoServiceVideoKeyFrameExtractArgs_Req_DEFAULT *VideoKeyFrameExtractRequest

func (p *VideoServiceVideoKeyFrameExtractArgs) GetReq() (v *VideoKeyFrameExtractRequest) {
	if !p.IsSetReq() {
		return VideoServiceVideoKeyFrameExtractArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoKeyFrameExtractArgs) SetReq(val *VideoKeyFrameExtractRequest) {
	p.Req = val
}

func (p *VideoServiceVideoKeyFrameExtractArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoKeyFrameExtractArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoKeyFrameExtractArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoKeyFrameExtractArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoKeyFrameExtractResult struct {
	Success *VideoKeyFrameExtractResponse `thrift:"success,0,optional" frugal:"0,optional,VideoKeyFrameExtractResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoKeyFrameExtractResult() *VideoServiceVideoKeyFrameExtractResult {
	return &VideoServiceVideoKeyFrameExtractResult{}
}

func (p *VideoServiceVideoKeyFrameExtractResult) InitDefault() {
}

var VideoServiceVideoKeyFrameExtractResult_Success_DEFAULT *VideoKeyFrameExtractResponse

func (p *VideoServiceVideoKeyFrameExtractResult) GetSuccess() (v *VideoKeyFrameExtractResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoKeyFrameExtractResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoKeyFrameExtractResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoKeyFrameExtractResponse)
}

func (p *VideoServiceVideoKeyFrameExtractResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoKeyFrameExtractResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoKeyFrameExtractResult(%+v)", *p)
}

var fieldIDToName_VideoServiceVideoKeyFrameExtractResult = map[int16]string{
	0: "success",
}

type VideoServiceBatchImageProcessArgs struct {
	Req *BatchImageProcessRequest `thrift:"req,1" frugal:"1,default,BatchImageProcessRequest" json:"req"`
}

func NewVideoServiceBatchImageProcessArgs() *VideoServiceBatchImageProcessArgs {
	return &VideoServiceBatchImageProcessArgs{}
}

func (p *VideoServiceBatchImageProcessArgs) InitDefault() {
}

var VideoServiceBatchImageProcessArgs_Req_DEFAULT *BatchImageProcessRequest

func (p *VideoServiceBatchImageProcessArgs) GetReq() (v *BatchImageProcessRequest) {
	if !p.IsSetReq() {
		return VideoServiceBatchImageProcessArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceBatchImageProcessArgs) SetReq(val *BatchImageProcessRequest) {
	p.Req = val
}

func (p *VideoServiceBatchImageProcessArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceBatchImageProcessArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceBatchImageProcessArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceBatchImageProcessArgs = map[int16]string{
	1: "req",
}

type VideoServiceBatchImageProcessResult struct {
	Success *BatchImageProcessResponse `thrift:"success,0,optional" frugal:"0,optional,BatchImageProcessResponse" json:"success,omitempty"`
}

func NewVideoServiceBatchImageProcessResult() *VideoServiceBatchImageProcessResult {
	return &VideoServiceBatchImageProcessResult{}
}

func (p *VideoServiceBatchImageProcessResult) InitDefault() {
}

var VideoServiceBatchImageProcessResult_Success_DEFAULT *BatchImageProcessResponse

func (p *VideoServiceBatchImageProcessResult) GetSuccess() (v *BatchImageProcessResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceBatchImageProcessResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceBatchImageProcessResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchImageProcessResponse)
}

func (p *VideoServiceBatchImageProcessResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceBatchImageProcessResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceBatchImageProcessResult(%+v)", *p)
}

var fieldIDToName_VideoServiceBatchImageProcessResult = map[int16]string{
	0: "success",
}

type VideoServiceImageIndexManageArgs struct {
	Req *ImageIndexManageRequest `thrift:"req,1" frugal:"1,default,ImageIndexManageRequest" json:"req"`
}

func NewVideoServiceImageIndexManageArgs() *VideoServiceImageIndexManageArgs {
	return &VideoServiceImageIndexManageArgs{}
}

func (p *VideoServiceImageIndexManageArgs) InitDefault() {
}

var VideoServiceImageIndexManageArgs_Req_DEFAULT *ImageIndexManageRequest

func (p *VideoServiceImageIndexManageArgs) GetReq() (v *ImageIndexManageRequest) {
	if !p.IsSetReq() {
		return VideoServiceImageIndexManageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceImageIndexManageArgs) SetReq(val *ImageIndexManageRequest) {
	p.Req = val
}

func (p *VideoServiceImageIndexManageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceImageIndexManageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceImageIndexManageArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceImageIndexManageArgs = map[int16]string{
	1: "req",
}

type VideoServiceImageIndexManageResult struct {
	Success *ImageIndexManageResponse `thrift:"success,0,optional" frugal:"0,optional,ImageIndexManageResponse" json:"success,omitempty"`
}

func NewVideoServiceImageIndexManageResult() *VideoServiceImageIndexManageResult {
	return &VideoServiceImageIndexManageResult{}
}

func (p *VideoServiceImageIndexManageResult) InitDefault() {
}

var VideoServiceImageIndexManageResult_Success_DEFAULT *ImageIndexManageResponse

func (p *VideoServiceImageIndexManageResult) GetSuccess() (v *ImageIndexManageResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceImageIndexManageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceImageIndexManageResult) SetSuccess(x interface{}) {
	p.Success = x.(*ImageIndexManageResponse)
}

func (p *VideoServiceImageIndexManageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceImageIndexManageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceImageIndexManageResult(%+v)", *p)
}

var fieldIDToName_VideoServiceImageIndexManageResult = map[int16]string{
	0: "success",
}

type VideoServiceSimilarityAnalysisArgs struct {
	Req *SimilarityAnalysisRequest `thrift:"req,1" frugal:"1,default,SimilarityAnalysisRequest" json:"req"`
}

func NewVideoServiceSimilarityAnalysisArgs() *VideoServiceSimilarityAnalysisArgs {
	return &VideoServiceSimilarityAnalysisArgs{}
}

func (p *VideoServiceSimilarityAnalysisArgs) InitDefault() {
}

var VideoServiceSimilarityAnalysisArgs_Req_DEFAULT *SimilarityAnalysisRequest

func (p *VideoServiceSimilarityAnalysisArgs) GetReq() (v *SimilarityAnalysisRequest) {
	if !p.IsSetReq() {
		return VideoServiceSimilarityAnalysisArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceSimilarityAnalysisArgs) SetReq(val *SimilarityAnalysisRequest) {
	p.Req = val
}

func (p *VideoServiceSimilarityAnalysisArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceSimilarityAnalysisArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSimilarityAnalysisArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceSimilarityAnalysisArgs = map[int16]string{
	1: "req",
}

type VideoServiceSimilarityAnalysisResult struct {
	Success *SimilarityAnalysisResponse `thrift:"success,0,optional" frugal:"0,optional,SimilarityAnalysisResponse" json:"success,omitempty"`
}

func NewVideoServiceSimilarityAnalysisResult() *VideoServiceSimilarityAnalysisResult {
	return &VideoServiceSimilarityAnalysisResult{}
}

func (p *VideoServiceSimilarityAnalysisResult) InitDefault() {
}

var VideoServiceSimilarityAnalysisResult_Success_DEFAULT *SimilarityAnalysisResponse

func (p *VideoServiceSimilarityAnalysisResult) GetSuccess() (v *SimilarityAnalysisResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceSimilarityAnalysisResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceSimilarityAnalysisResult) SetSuccess(x interface{}) {
	p.Success = x.(*SimilarityAnalysisResponse)
}

func (p *VideoServiceSimilarityAnalysisResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceSimilarityAnalysisResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSimilarityAnalysisResult(%+v)", *p)
}

var fieldIDToName_VideoServiceSimilarityAnalysisResult = map[int16]string{
	0: "success",
}
