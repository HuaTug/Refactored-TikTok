// Code generated by Kitex v0.10.3. DO NOT EDIT.

package videoservice

import (
	videos "HuaTug.com/kitex_gen/videos"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FeedService(ctx context.Context, req *videos.FeedServiceRequest, callOptions ...callopt.Option) (r *videos.FeedServiceResponse, err error)
	VideoPublishStart(ctx context.Context, req *videos.VideoPublishStartRequest, callOptions ...callopt.Option) (r *videos.VideoPublishStartResponse, err error)
	VideoPublishUploading(ctx context.Context, req *videos.VideoPublishUploadingRequest, callOptions ...callopt.Option) (r *videos.VideoPublishUploadingResponse, err error)
	VideoPublishComplete(ctx context.Context, req *videos.VideoPublishCompleteRequest, callOptions ...callopt.Option) (r *videos.VideoPublishCompleteResponse, err error)
	VideoPublishCancle(ctx context.Context, req *videos.VideoPublishCancleRequest, callOptions ...callopt.Option) (r *videos.VideoPublishCancleResponse, err error)
	VideoDelete(ctx context.Context, req *videos.VideoDeleteRequest, callOptions ...callopt.Option) (r *videos.VideoDeleteResponse, err error)
	VideoIdList(ctx context.Context, req *videos.VideoIdListRequest, callOptions ...callopt.Option) (r *videos.VideoIdListResponse, err error)
	VideoFeedList(ctx context.Context, req *videos.VideoFeedListRequest, callOptions ...callopt.Option) (r *videos.VideoFeedListResponse, err error)
	VideoSearch(ctx context.Context, req *videos.VideoSearchRequest, callOptions ...callopt.Option) (r *videos.VideoSearchResponse, err error)
	VideoPopular(ctx context.Context, req *videos.VideoPopularRequest, callOptions ...callopt.Option) (r *videos.VideoPopularResponse, err error)
	VideoInfo(ctx context.Context, req *videos.VideoInfoRequest, callOptions ...callopt.Option) (r *videos.VideoInfoResponse, err error)
	VideoVisit(ctx context.Context, req *videos.VideoVisitRequest, callOptions ...callopt.Option) (r *videos.VideoVisitResponse, err error)
	UpdateVisitCount(ctx context.Context, req *videos.UpdateVisitCountRequest, callOptions ...callopt.Option) (r *videos.UpdateVisitCountResponse, err error)
	UpdateVideoCommentCount(ctx context.Context, req *videos.UpdateVideoCommentCountRequest, callOptions ...callopt.Option) (r *videos.UpdateVideoCommentCountResponse, err error)
	UpdateVideoLikeCount(ctx context.Context, req *videos.UpdateLikeCountRequest, callOptions ...callopt.Option) (r *videos.UpdateLikeCountResponse, err error)
	UpdateVideoHisLikeCount(ctx context.Context, req *videos.UpdateVideoHisLikeCountRequest, callOptions ...callopt.Option) (r *videos.UpdateVideoHisLikeCountResponse, err error)
	GetVideoVisitCount(ctx context.Context, req *videos.GetVideoVisitCountRequest, callOptions ...callopt.Option) (r *videos.GetVideoVisitCountResponse, err error)
	GetVideoVisitCountInRedis(ctx context.Context, req *videos.GetVideoVisitCountInRedisRequest, callOptions ...callopt.Option) (r *videos.GetVideoVisitCountInRedisResponse, err error)
	StreamVideo(ctx context.Context, req *videos.StreamVideoRequest, callOptions ...callopt.Option) (r *videos.StreamVideoResponse, err error)
	CreateFavorite(ctx context.Context, req *videos.CreateFavoriteRequest, callOptions ...callopt.Option) (r *videos.CreateFavoriteResponse, err error)
	GetFavoriteVideoList(ctx context.Context, req *videos.GetFavoriteVideoListRequest, callOptions ...callopt.Option) (r *videos.GetFavoriteVideoListResponse, err error)
	GetFavoriteList(ctx context.Context, req *videos.GetFavoriteListRequest, callOptions ...callopt.Option) (r *videos.GetFavoriteListResponse, err error)
	GetVideoFromFavorite(ctx context.Context, req *videos.GetVideoFromFavoriteRequest, callOptions ...callopt.Option) (r *videos.GetVideoFromFavoriteResponse, err error)
	AddFavoriteVideo(ctx context.Context, req *videos.AddFavoriteVideoRequest, callOptions ...callopt.Option) (r *videos.AddFavoriteVideoResponse, err error)
	DeleteFavorite(ctx context.Context, req *videos.DeleteFavoriteRequest, callOptions ...callopt.Option) (r *videos.DeleteFavoriteResponse, err error)
	DeleteVideoFromFavorite(ctx context.Context, req *videos.DeleteVideoFromFavoriteRequest, callOptions ...callopt.Option) (r *videos.DeleteVideoFromFavoriteResponse, err error)
	SharedVideo(ctx context.Context, req *videos.SharedVideoRequest, callOptions ...callopt.Option) (r *videos.SharedVideoResponse, err error)
	RecommendVideo(ctx context.Context, req *videos.RecommendVideoRequest, callOptions ...callopt.Option) (r *videos.RecommendVideoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) FeedService(ctx context.Context, req *videos.FeedServiceRequest, callOptions ...callopt.Option) (r *videos.FeedServiceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FeedService(ctx, req)
}

func (p *kVideoServiceClient) VideoPublishStart(ctx context.Context, req *videos.VideoPublishStartRequest, callOptions ...callopt.Option) (r *videos.VideoPublishStartResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishStart(ctx, req)
}

func (p *kVideoServiceClient) VideoPublishUploading(ctx context.Context, req *videos.VideoPublishUploadingRequest, callOptions ...callopt.Option) (r *videos.VideoPublishUploadingResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishUploading(ctx, req)
}

func (p *kVideoServiceClient) VideoPublishComplete(ctx context.Context, req *videos.VideoPublishCompleteRequest, callOptions ...callopt.Option) (r *videos.VideoPublishCompleteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishComplete(ctx, req)
}

func (p *kVideoServiceClient) VideoPublishCancle(ctx context.Context, req *videos.VideoPublishCancleRequest, callOptions ...callopt.Option) (r *videos.VideoPublishCancleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishCancle(ctx, req)
}

func (p *kVideoServiceClient) VideoDelete(ctx context.Context, req *videos.VideoDeleteRequest, callOptions ...callopt.Option) (r *videos.VideoDeleteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoDelete(ctx, req)
}

func (p *kVideoServiceClient) VideoIdList(ctx context.Context, req *videos.VideoIdListRequest, callOptions ...callopt.Option) (r *videos.VideoIdListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoIdList(ctx, req)
}

func (p *kVideoServiceClient) VideoFeedList(ctx context.Context, req *videos.VideoFeedListRequest, callOptions ...callopt.Option) (r *videos.VideoFeedListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoFeedList(ctx, req)
}

func (p *kVideoServiceClient) VideoSearch(ctx context.Context, req *videos.VideoSearchRequest, callOptions ...callopt.Option) (r *videos.VideoSearchResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoSearch(ctx, req)
}

func (p *kVideoServiceClient) VideoPopular(ctx context.Context, req *videos.VideoPopularRequest, callOptions ...callopt.Option) (r *videos.VideoPopularResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPopular(ctx, req)
}

func (p *kVideoServiceClient) VideoInfo(ctx context.Context, req *videos.VideoInfoRequest, callOptions ...callopt.Option) (r *videos.VideoInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoInfo(ctx, req)
}

func (p *kVideoServiceClient) VideoVisit(ctx context.Context, req *videos.VideoVisitRequest, callOptions ...callopt.Option) (r *videos.VideoVisitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoVisit(ctx, req)
}

func (p *kVideoServiceClient) UpdateVisitCount(ctx context.Context, req *videos.UpdateVisitCountRequest, callOptions ...callopt.Option) (r *videos.UpdateVisitCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVisitCount(ctx, req)
}

func (p *kVideoServiceClient) UpdateVideoCommentCount(ctx context.Context, req *videos.UpdateVideoCommentCountRequest, callOptions ...callopt.Option) (r *videos.UpdateVideoCommentCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVideoCommentCount(ctx, req)
}

func (p *kVideoServiceClient) UpdateVideoLikeCount(ctx context.Context, req *videos.UpdateLikeCountRequest, callOptions ...callopt.Option) (r *videos.UpdateLikeCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVideoLikeCount(ctx, req)
}

func (p *kVideoServiceClient) UpdateVideoHisLikeCount(ctx context.Context, req *videos.UpdateVideoHisLikeCountRequest, callOptions ...callopt.Option) (r *videos.UpdateVideoHisLikeCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVideoHisLikeCount(ctx, req)
}

func (p *kVideoServiceClient) GetVideoVisitCount(ctx context.Context, req *videos.GetVideoVisitCountRequest, callOptions ...callopt.Option) (r *videos.GetVideoVisitCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoVisitCount(ctx, req)
}

func (p *kVideoServiceClient) GetVideoVisitCountInRedis(ctx context.Context, req *videos.GetVideoVisitCountInRedisRequest, callOptions ...callopt.Option) (r *videos.GetVideoVisitCountInRedisResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoVisitCountInRedis(ctx, req)
}

func (p *kVideoServiceClient) StreamVideo(ctx context.Context, req *videos.StreamVideoRequest, callOptions ...callopt.Option) (r *videos.StreamVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.StreamVideo(ctx, req)
}

func (p *kVideoServiceClient) CreateFavorite(ctx context.Context, req *videos.CreateFavoriteRequest, callOptions ...callopt.Option) (r *videos.CreateFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateFavorite(ctx, req)
}

func (p *kVideoServiceClient) GetFavoriteVideoList(ctx context.Context, req *videos.GetFavoriteVideoListRequest, callOptions ...callopt.Option) (r *videos.GetFavoriteVideoListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteVideoList(ctx, req)
}

func (p *kVideoServiceClient) GetFavoriteList(ctx context.Context, req *videos.GetFavoriteListRequest, callOptions ...callopt.Option) (r *videos.GetFavoriteListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteList(ctx, req)
}

func (p *kVideoServiceClient) GetVideoFromFavorite(ctx context.Context, req *videos.GetVideoFromFavoriteRequest, callOptions ...callopt.Option) (r *videos.GetVideoFromFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoFromFavorite(ctx, req)
}

func (p *kVideoServiceClient) AddFavoriteVideo(ctx context.Context, req *videos.AddFavoriteVideoRequest, callOptions ...callopt.Option) (r *videos.AddFavoriteVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddFavoriteVideo(ctx, req)
}

func (p *kVideoServiceClient) DeleteFavorite(ctx context.Context, req *videos.DeleteFavoriteRequest, callOptions ...callopt.Option) (r *videos.DeleteFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteFavorite(ctx, req)
}

func (p *kVideoServiceClient) DeleteVideoFromFavorite(ctx context.Context, req *videos.DeleteVideoFromFavoriteRequest, callOptions ...callopt.Option) (r *videos.DeleteVideoFromFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteVideoFromFavorite(ctx, req)
}

func (p *kVideoServiceClient) SharedVideo(ctx context.Context, req *videos.SharedVideoRequest, callOptions ...callopt.Option) (r *videos.SharedVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SharedVideo(ctx, req)
}

func (p *kVideoServiceClient) RecommendVideo(ctx context.Context, req *videos.RecommendVideoRequest, callOptions ...callopt.Option) (r *videos.RecommendVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RecommendVideo(ctx, req)
}
