// Code generated by Kitex v0.14.1. DO NOT EDIT.

package videoservice

import (
	videos "HuaTug.com/kitex_gen/videos"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	VideoPublishStartV2(ctx context.Context, req *videos.VideoPublishStartRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishStartResponseV2, err error)
	VideoPublishUploadingV2(ctx context.Context, req *videos.VideoPublishUploadingRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishUploadingResponseV2, err error)
	VideoPublishCompleteV2(ctx context.Context, req *videos.VideoPublishCompleteRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishCompleteResponseV2, err error)
	VideoPublishCancelV2(ctx context.Context, req *videos.VideoPublishCancelRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishCancelResponseV2, err error)
	GetUploadProgressV2(ctx context.Context, req *videos.VideoPublishProgressRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishProgressResponseV2, err error)
	ResumeUploadV2(ctx context.Context, req *videos.VideoPublishResumeRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishResumeResponseV2, err error)
	VideoFeedListV2(ctx context.Context, req *videos.VideoFeedListRequestV2, callOptions ...callopt.Option) (r *videos.VideoFeedListResponseV2, err error)
	VideoSearchV2(ctx context.Context, req *videos.VideoSearchRequestV2, callOptions ...callopt.Option) (r *videos.VideoSearchResponseV2, err error)
	VideoPopularV2(ctx context.Context, req *videos.VideoPopularRequestV2, callOptions ...callopt.Option) (r *videos.VideoPopularResponseV2, err error)
	VideoInfoV2(ctx context.Context, req *videos.VideoInfoRequestV2, callOptions ...callopt.Option) (r *videos.VideoInfoResponseV2, err error)
	VideoDeleteV2(ctx context.Context, req *videos.VideoDeleteRequestV2, callOptions ...callopt.Option) (r *videos.VideoDeleteResponseV2, err error)
	VideoVisitV2(ctx context.Context, req *videos.VideoVisitRequestV2, callOptions ...callopt.Option) (r *videos.VideoVisitResponseV2, err error)
	UpdateVisitCountV2(ctx context.Context, req *videos.UpdateVisitCountRequestV2, callOptions ...callopt.Option) (r *videos.UpdateVisitCountResponseV2, err error)
	UpdateVideoCommentCountV2(ctx context.Context, req *videos.UpdateVideoCommentCountRequestV2, callOptions ...callopt.Option) (r *videos.UpdateVideoCommentCountResponseV2, err error)
	UpdateVideoLikeCountV2(ctx context.Context, req *videos.UpdateLikeCountRequestV2, callOptions ...callopt.Option) (r *videos.UpdateLikeCountResponseV2, err error)
	GetVideoVisitCountV2(ctx context.Context, req *videos.GetVideoVisitCountRequestV2, callOptions ...callopt.Option) (r *videos.GetVideoVisitCountResponseV2, err error)
	StreamVideoV2(ctx context.Context, req *videos.StreamVideoRequestV2, callOptions ...callopt.Option) (r *videos.StreamVideoResponseV2, err error)
	CreateFavoriteV2(ctx context.Context, req *videos.CreateFavoriteRequestV2, callOptions ...callopt.Option) (r *videos.CreateFavoriteResponseV2, err error)
	GetFavoriteVideoListV2(ctx context.Context, req *videos.GetFavoriteVideoListRequestV2, callOptions ...callopt.Option) (r *videos.GetFavoriteVideoListResponseV2, err error)
	GetFavoriteListV2(ctx context.Context, req *videos.GetFavoriteListRequestV2, callOptions ...callopt.Option) (r *videos.GetFavoriteListResponseV2, err error)
	AddFavoriteVideoV2(ctx context.Context, req *videos.AddFavoriteVideoRequestV2, callOptions ...callopt.Option) (r *videos.AddFavoriteVideoResponseV2, err error)
	DeleteFavoriteV2(ctx context.Context, req *videos.DeleteFavoriteRequestV2, callOptions ...callopt.Option) (r *videos.DeleteFavoriteResponseV2, err error)
	DeleteVideoFromFavoriteV2(ctx context.Context, req *videos.DeleteVideoFromFavoriteRequestV2, callOptions ...callopt.Option) (r *videos.DeleteVideoFromFavoriteResponseV2, err error)
	SharedVideoV2(ctx context.Context, req *videos.SharedVideoRequestV2, callOptions ...callopt.Option) (r *videos.SharedVideoResponseV2, err error)
	RecommendVideoV2(ctx context.Context, req *videos.RecommendVideoRequestV2, callOptions ...callopt.Option) (r *videos.RecommendVideoResponseV2, err error)
	ManageVideoHeatV2(ctx context.Context, req *videos.VideoHeatManagementRequest, callOptions ...callopt.Option) (r *videos.VideoHeatManagementResponse, err error)
	ManageUserQuotaV2(ctx context.Context, req *videos.UserQuotaManagementRequest, callOptions ...callopt.Option) (r *videos.UserQuotaManagementResponse, err error)
	BatchOperateVideosV2(ctx context.Context, req *videos.BatchVideoOperationRequest, callOptions ...callopt.Option) (r *videos.BatchVideoOperationResponse, err error)
	TranscodeVideoV2(ctx context.Context, req *videos.VideoTranscodingRequest, callOptions ...callopt.Option) (r *videos.VideoTranscodingResponse, err error)
	GetVideoAnalyticsV2(ctx context.Context, req *videos.VideoAnalyticsRequest, callOptions ...callopt.Option) (r *videos.VideoAnalyticsResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) VideoPublishStartV2(ctx context.Context, req *videos.VideoPublishStartRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishStartResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishStartV2(ctx, req)
}

func (p *kVideoServiceClient) VideoPublishUploadingV2(ctx context.Context, req *videos.VideoPublishUploadingRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishUploadingResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishUploadingV2(ctx, req)
}

func (p *kVideoServiceClient) VideoPublishCompleteV2(ctx context.Context, req *videos.VideoPublishCompleteRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishCompleteResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishCompleteV2(ctx, req)
}

func (p *kVideoServiceClient) VideoPublishCancelV2(ctx context.Context, req *videos.VideoPublishCancelRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishCancelResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishCancelV2(ctx, req)
}

func (p *kVideoServiceClient) GetUploadProgressV2(ctx context.Context, req *videos.VideoPublishProgressRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishProgressResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUploadProgressV2(ctx, req)
}

func (p *kVideoServiceClient) ResumeUploadV2(ctx context.Context, req *videos.VideoPublishResumeRequestV2, callOptions ...callopt.Option) (r *videos.VideoPublishResumeResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ResumeUploadV2(ctx, req)
}

func (p *kVideoServiceClient) VideoFeedListV2(ctx context.Context, req *videos.VideoFeedListRequestV2, callOptions ...callopt.Option) (r *videos.VideoFeedListResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoFeedListV2(ctx, req)
}

func (p *kVideoServiceClient) VideoSearchV2(ctx context.Context, req *videos.VideoSearchRequestV2, callOptions ...callopt.Option) (r *videos.VideoSearchResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoSearchV2(ctx, req)
}

func (p *kVideoServiceClient) VideoPopularV2(ctx context.Context, req *videos.VideoPopularRequestV2, callOptions ...callopt.Option) (r *videos.VideoPopularResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPopularV2(ctx, req)
}

func (p *kVideoServiceClient) VideoInfoV2(ctx context.Context, req *videos.VideoInfoRequestV2, callOptions ...callopt.Option) (r *videos.VideoInfoResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoInfoV2(ctx, req)
}

func (p *kVideoServiceClient) VideoDeleteV2(ctx context.Context, req *videos.VideoDeleteRequestV2, callOptions ...callopt.Option) (r *videos.VideoDeleteResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoDeleteV2(ctx, req)
}

func (p *kVideoServiceClient) VideoVisitV2(ctx context.Context, req *videos.VideoVisitRequestV2, callOptions ...callopt.Option) (r *videos.VideoVisitResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoVisitV2(ctx, req)
}

func (p *kVideoServiceClient) UpdateVisitCountV2(ctx context.Context, req *videos.UpdateVisitCountRequestV2, callOptions ...callopt.Option) (r *videos.UpdateVisitCountResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVisitCountV2(ctx, req)
}

func (p *kVideoServiceClient) UpdateVideoCommentCountV2(ctx context.Context, req *videos.UpdateVideoCommentCountRequestV2, callOptions ...callopt.Option) (r *videos.UpdateVideoCommentCountResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVideoCommentCountV2(ctx, req)
}

func (p *kVideoServiceClient) UpdateVideoLikeCountV2(ctx context.Context, req *videos.UpdateLikeCountRequestV2, callOptions ...callopt.Option) (r *videos.UpdateLikeCountResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVideoLikeCountV2(ctx, req)
}

func (p *kVideoServiceClient) GetVideoVisitCountV2(ctx context.Context, req *videos.GetVideoVisitCountRequestV2, callOptions ...callopt.Option) (r *videos.GetVideoVisitCountResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoVisitCountV2(ctx, req)
}

func (p *kVideoServiceClient) StreamVideoV2(ctx context.Context, req *videos.StreamVideoRequestV2, callOptions ...callopt.Option) (r *videos.StreamVideoResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.StreamVideoV2(ctx, req)
}

func (p *kVideoServiceClient) CreateFavoriteV2(ctx context.Context, req *videos.CreateFavoriteRequestV2, callOptions ...callopt.Option) (r *videos.CreateFavoriteResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateFavoriteV2(ctx, req)
}

func (p *kVideoServiceClient) GetFavoriteVideoListV2(ctx context.Context, req *videos.GetFavoriteVideoListRequestV2, callOptions ...callopt.Option) (r *videos.GetFavoriteVideoListResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteVideoListV2(ctx, req)
}

func (p *kVideoServiceClient) GetFavoriteListV2(ctx context.Context, req *videos.GetFavoriteListRequestV2, callOptions ...callopt.Option) (r *videos.GetFavoriteListResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteListV2(ctx, req)
}

func (p *kVideoServiceClient) AddFavoriteVideoV2(ctx context.Context, req *videos.AddFavoriteVideoRequestV2, callOptions ...callopt.Option) (r *videos.AddFavoriteVideoResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddFavoriteVideoV2(ctx, req)
}

func (p *kVideoServiceClient) DeleteFavoriteV2(ctx context.Context, req *videos.DeleteFavoriteRequestV2, callOptions ...callopt.Option) (r *videos.DeleteFavoriteResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteFavoriteV2(ctx, req)
}

func (p *kVideoServiceClient) DeleteVideoFromFavoriteV2(ctx context.Context, req *videos.DeleteVideoFromFavoriteRequestV2, callOptions ...callopt.Option) (r *videos.DeleteVideoFromFavoriteResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteVideoFromFavoriteV2(ctx, req)
}

func (p *kVideoServiceClient) SharedVideoV2(ctx context.Context, req *videos.SharedVideoRequestV2, callOptions ...callopt.Option) (r *videos.SharedVideoResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SharedVideoV2(ctx, req)
}

func (p *kVideoServiceClient) RecommendVideoV2(ctx context.Context, req *videos.RecommendVideoRequestV2, callOptions ...callopt.Option) (r *videos.RecommendVideoResponseV2, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RecommendVideoV2(ctx, req)
}

func (p *kVideoServiceClient) ManageVideoHeatV2(ctx context.Context, req *videos.VideoHeatManagementRequest, callOptions ...callopt.Option) (r *videos.VideoHeatManagementResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ManageVideoHeatV2(ctx, req)
}

func (p *kVideoServiceClient) ManageUserQuotaV2(ctx context.Context, req *videos.UserQuotaManagementRequest, callOptions ...callopt.Option) (r *videos.UserQuotaManagementResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ManageUserQuotaV2(ctx, req)
}

func (p *kVideoServiceClient) BatchOperateVideosV2(ctx context.Context, req *videos.BatchVideoOperationRequest, callOptions ...callopt.Option) (r *videos.BatchVideoOperationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchOperateVideosV2(ctx, req)
}

func (p *kVideoServiceClient) TranscodeVideoV2(ctx context.Context, req *videos.VideoTranscodingRequest, callOptions ...callopt.Option) (r *videos.VideoTranscodingResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TranscodeVideoV2(ctx, req)
}

func (p *kVideoServiceClient) GetVideoAnalyticsV2(ctx context.Context, req *videos.VideoAnalyticsRequest, callOptions ...callopt.Option) (r *videos.VideoAnalyticsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoAnalyticsV2(ctx, req)
}
