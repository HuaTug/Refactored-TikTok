// Code generated by Kitex v0.14.1. DO NOT EDIT.

package videoservice

import (
	videos "HuaTug.com/kitex_gen/videos"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"VideoPublishStartV2": kitex.NewMethodInfo(
		videoPublishStartV2Handler,
		newVideoServiceVideoPublishStartV2Args,
		newVideoServiceVideoPublishStartV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoPublishUploadingV2": kitex.NewMethodInfo(
		videoPublishUploadingV2Handler,
		newVideoServiceVideoPublishUploadingV2Args,
		newVideoServiceVideoPublishUploadingV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoPublishCompleteV2": kitex.NewMethodInfo(
		videoPublishCompleteV2Handler,
		newVideoServiceVideoPublishCompleteV2Args,
		newVideoServiceVideoPublishCompleteV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoPublishCancelV2": kitex.NewMethodInfo(
		videoPublishCancelV2Handler,
		newVideoServiceVideoPublishCancelV2Args,
		newVideoServiceVideoPublishCancelV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUploadProgressV2": kitex.NewMethodInfo(
		getUploadProgressV2Handler,
		newVideoServiceGetUploadProgressV2Args,
		newVideoServiceGetUploadProgressV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ResumeUploadV2": kitex.NewMethodInfo(
		resumeUploadV2Handler,
		newVideoServiceResumeUploadV2Args,
		newVideoServiceResumeUploadV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoFeedListV2": kitex.NewMethodInfo(
		videoFeedListV2Handler,
		newVideoServiceVideoFeedListV2Args,
		newVideoServiceVideoFeedListV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoSearchV2": kitex.NewMethodInfo(
		videoSearchV2Handler,
		newVideoServiceVideoSearchV2Args,
		newVideoServiceVideoSearchV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoPopularV2": kitex.NewMethodInfo(
		videoPopularV2Handler,
		newVideoServiceVideoPopularV2Args,
		newVideoServiceVideoPopularV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoInfoV2": kitex.NewMethodInfo(
		videoInfoV2Handler,
		newVideoServiceVideoInfoV2Args,
		newVideoServiceVideoInfoV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoDeleteV2": kitex.NewMethodInfo(
		videoDeleteV2Handler,
		newVideoServiceVideoDeleteV2Args,
		newVideoServiceVideoDeleteV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoVisitV2": kitex.NewMethodInfo(
		videoVisitV2Handler,
		newVideoServiceVideoVisitV2Args,
		newVideoServiceVideoVisitV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateVisitCountV2": kitex.NewMethodInfo(
		updateVisitCountV2Handler,
		newVideoServiceUpdateVisitCountV2Args,
		newVideoServiceUpdateVisitCountV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateVideoCommentCountV2": kitex.NewMethodInfo(
		updateVideoCommentCountV2Handler,
		newVideoServiceUpdateVideoCommentCountV2Args,
		newVideoServiceUpdateVideoCommentCountV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateVideoLikeCountV2": kitex.NewMethodInfo(
		updateVideoLikeCountV2Handler,
		newVideoServiceUpdateVideoLikeCountV2Args,
		newVideoServiceUpdateVideoLikeCountV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoVisitCountV2": kitex.NewMethodInfo(
		getVideoVisitCountV2Handler,
		newVideoServiceGetVideoVisitCountV2Args,
		newVideoServiceGetVideoVisitCountV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"StreamVideoV2": kitex.NewMethodInfo(
		streamVideoV2Handler,
		newVideoServiceStreamVideoV2Args,
		newVideoServiceStreamVideoV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateFavoriteV2": kitex.NewMethodInfo(
		createFavoriteV2Handler,
		newVideoServiceCreateFavoriteV2Args,
		newVideoServiceCreateFavoriteV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFavoriteVideoListV2": kitex.NewMethodInfo(
		getFavoriteVideoListV2Handler,
		newVideoServiceGetFavoriteVideoListV2Args,
		newVideoServiceGetFavoriteVideoListV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetFavoriteListV2": kitex.NewMethodInfo(
		getFavoriteListV2Handler,
		newVideoServiceGetFavoriteListV2Args,
		newVideoServiceGetFavoriteListV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddFavoriteVideoV2": kitex.NewMethodInfo(
		addFavoriteVideoV2Handler,
		newVideoServiceAddFavoriteVideoV2Args,
		newVideoServiceAddFavoriteVideoV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteFavoriteV2": kitex.NewMethodInfo(
		deleteFavoriteV2Handler,
		newVideoServiceDeleteFavoriteV2Args,
		newVideoServiceDeleteFavoriteV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteVideoFromFavoriteV2": kitex.NewMethodInfo(
		deleteVideoFromFavoriteV2Handler,
		newVideoServiceDeleteVideoFromFavoriteV2Args,
		newVideoServiceDeleteVideoFromFavoriteV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SharedVideoV2": kitex.NewMethodInfo(
		sharedVideoV2Handler,
		newVideoServiceSharedVideoV2Args,
		newVideoServiceSharedVideoV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RecommendVideoV2": kitex.NewMethodInfo(
		recommendVideoV2Handler,
		newVideoServiceRecommendVideoV2Args,
		newVideoServiceRecommendVideoV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ManageVideoHeatV2": kitex.NewMethodInfo(
		manageVideoHeatV2Handler,
		newVideoServiceManageVideoHeatV2Args,
		newVideoServiceManageVideoHeatV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ManageUserQuotaV2": kitex.NewMethodInfo(
		manageUserQuotaV2Handler,
		newVideoServiceManageUserQuotaV2Args,
		newVideoServiceManageUserQuotaV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchOperateVideosV2": kitex.NewMethodInfo(
		batchOperateVideosV2Handler,
		newVideoServiceBatchOperateVideosV2Args,
		newVideoServiceBatchOperateVideosV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"TranscodeVideoV2": kitex.NewMethodInfo(
		transcodeVideoV2Handler,
		newVideoServiceTranscodeVideoV2Args,
		newVideoServiceTranscodeVideoV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoAnalyticsV2": kitex.NewMethodInfo(
		getVideoAnalyticsV2Handler,
		newVideoServiceGetVideoAnalyticsV2Args,
		newVideoServiceGetVideoAnalyticsV2Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	videoServiceServiceInfo                = NewServiceInfo()
	videoServiceServiceInfoForClient       = NewServiceInfoForClient()
	videoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videos.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "videos",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.14.1",
		Extra:           extra,
	}
	return svcInfo
}

func videoPublishStartV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoPublishStartV2Args)
	realResult := result.(*videos.VideoServiceVideoPublishStartV2Result)
	success, err := handler.(videos.VideoService).VideoPublishStartV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPublishStartV2Args() interface{} {
	return videos.NewVideoServiceVideoPublishStartV2Args()
}

func newVideoServiceVideoPublishStartV2Result() interface{} {
	return videos.NewVideoServiceVideoPublishStartV2Result()
}

func videoPublishUploadingV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoPublishUploadingV2Args)
	realResult := result.(*videos.VideoServiceVideoPublishUploadingV2Result)
	success, err := handler.(videos.VideoService).VideoPublishUploadingV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPublishUploadingV2Args() interface{} {
	return videos.NewVideoServiceVideoPublishUploadingV2Args()
}

func newVideoServiceVideoPublishUploadingV2Result() interface{} {
	return videos.NewVideoServiceVideoPublishUploadingV2Result()
}

func videoPublishCompleteV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoPublishCompleteV2Args)
	realResult := result.(*videos.VideoServiceVideoPublishCompleteV2Result)
	success, err := handler.(videos.VideoService).VideoPublishCompleteV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPublishCompleteV2Args() interface{} {
	return videos.NewVideoServiceVideoPublishCompleteV2Args()
}

func newVideoServiceVideoPublishCompleteV2Result() interface{} {
	return videos.NewVideoServiceVideoPublishCompleteV2Result()
}

func videoPublishCancelV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoPublishCancelV2Args)
	realResult := result.(*videos.VideoServiceVideoPublishCancelV2Result)
	success, err := handler.(videos.VideoService).VideoPublishCancelV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPublishCancelV2Args() interface{} {
	return videos.NewVideoServiceVideoPublishCancelV2Args()
}

func newVideoServiceVideoPublishCancelV2Result() interface{} {
	return videos.NewVideoServiceVideoPublishCancelV2Result()
}

func getUploadProgressV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceGetUploadProgressV2Args)
	realResult := result.(*videos.VideoServiceGetUploadProgressV2Result)
	success, err := handler.(videos.VideoService).GetUploadProgressV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetUploadProgressV2Args() interface{} {
	return videos.NewVideoServiceGetUploadProgressV2Args()
}

func newVideoServiceGetUploadProgressV2Result() interface{} {
	return videos.NewVideoServiceGetUploadProgressV2Result()
}

func resumeUploadV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceResumeUploadV2Args)
	realResult := result.(*videos.VideoServiceResumeUploadV2Result)
	success, err := handler.(videos.VideoService).ResumeUploadV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceResumeUploadV2Args() interface{} {
	return videos.NewVideoServiceResumeUploadV2Args()
}

func newVideoServiceResumeUploadV2Result() interface{} {
	return videos.NewVideoServiceResumeUploadV2Result()
}

func videoFeedListV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoFeedListV2Args)
	realResult := result.(*videos.VideoServiceVideoFeedListV2Result)
	success, err := handler.(videos.VideoService).VideoFeedListV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoFeedListV2Args() interface{} {
	return videos.NewVideoServiceVideoFeedListV2Args()
}

func newVideoServiceVideoFeedListV2Result() interface{} {
	return videos.NewVideoServiceVideoFeedListV2Result()
}

func videoSearchV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoSearchV2Args)
	realResult := result.(*videos.VideoServiceVideoSearchV2Result)
	success, err := handler.(videos.VideoService).VideoSearchV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoSearchV2Args() interface{} {
	return videos.NewVideoServiceVideoSearchV2Args()
}

func newVideoServiceVideoSearchV2Result() interface{} {
	return videos.NewVideoServiceVideoSearchV2Result()
}

func videoPopularV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoPopularV2Args)
	realResult := result.(*videos.VideoServiceVideoPopularV2Result)
	success, err := handler.(videos.VideoService).VideoPopularV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPopularV2Args() interface{} {
	return videos.NewVideoServiceVideoPopularV2Args()
}

func newVideoServiceVideoPopularV2Result() interface{} {
	return videos.NewVideoServiceVideoPopularV2Result()
}

func videoInfoV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoInfoV2Args)
	realResult := result.(*videos.VideoServiceVideoInfoV2Result)
	success, err := handler.(videos.VideoService).VideoInfoV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoInfoV2Args() interface{} {
	return videos.NewVideoServiceVideoInfoV2Args()
}

func newVideoServiceVideoInfoV2Result() interface{} {
	return videos.NewVideoServiceVideoInfoV2Result()
}

func videoDeleteV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoDeleteV2Args)
	realResult := result.(*videos.VideoServiceVideoDeleteV2Result)
	success, err := handler.(videos.VideoService).VideoDeleteV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoDeleteV2Args() interface{} {
	return videos.NewVideoServiceVideoDeleteV2Args()
}

func newVideoServiceVideoDeleteV2Result() interface{} {
	return videos.NewVideoServiceVideoDeleteV2Result()
}

func videoVisitV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceVideoVisitV2Args)
	realResult := result.(*videos.VideoServiceVideoVisitV2Result)
	success, err := handler.(videos.VideoService).VideoVisitV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoVisitV2Args() interface{} {
	return videos.NewVideoServiceVideoVisitV2Args()
}

func newVideoServiceVideoVisitV2Result() interface{} {
	return videos.NewVideoServiceVideoVisitV2Result()
}

func updateVisitCountV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceUpdateVisitCountV2Args)
	realResult := result.(*videos.VideoServiceUpdateVisitCountV2Result)
	success, err := handler.(videos.VideoService).UpdateVisitCountV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUpdateVisitCountV2Args() interface{} {
	return videos.NewVideoServiceUpdateVisitCountV2Args()
}

func newVideoServiceUpdateVisitCountV2Result() interface{} {
	return videos.NewVideoServiceUpdateVisitCountV2Result()
}

func updateVideoCommentCountV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceUpdateVideoCommentCountV2Args)
	realResult := result.(*videos.VideoServiceUpdateVideoCommentCountV2Result)
	success, err := handler.(videos.VideoService).UpdateVideoCommentCountV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUpdateVideoCommentCountV2Args() interface{} {
	return videos.NewVideoServiceUpdateVideoCommentCountV2Args()
}

func newVideoServiceUpdateVideoCommentCountV2Result() interface{} {
	return videos.NewVideoServiceUpdateVideoCommentCountV2Result()
}

func updateVideoLikeCountV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceUpdateVideoLikeCountV2Args)
	realResult := result.(*videos.VideoServiceUpdateVideoLikeCountV2Result)
	success, err := handler.(videos.VideoService).UpdateVideoLikeCountV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUpdateVideoLikeCountV2Args() interface{} {
	return videos.NewVideoServiceUpdateVideoLikeCountV2Args()
}

func newVideoServiceUpdateVideoLikeCountV2Result() interface{} {
	return videos.NewVideoServiceUpdateVideoLikeCountV2Result()
}

func getVideoVisitCountV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceGetVideoVisitCountV2Args)
	realResult := result.(*videos.VideoServiceGetVideoVisitCountV2Result)
	success, err := handler.(videos.VideoService).GetVideoVisitCountV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoVisitCountV2Args() interface{} {
	return videos.NewVideoServiceGetVideoVisitCountV2Args()
}

func newVideoServiceGetVideoVisitCountV2Result() interface{} {
	return videos.NewVideoServiceGetVideoVisitCountV2Result()
}

func streamVideoV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceStreamVideoV2Args)
	realResult := result.(*videos.VideoServiceStreamVideoV2Result)
	success, err := handler.(videos.VideoService).StreamVideoV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceStreamVideoV2Args() interface{} {
	return videos.NewVideoServiceStreamVideoV2Args()
}

func newVideoServiceStreamVideoV2Result() interface{} {
	return videos.NewVideoServiceStreamVideoV2Result()
}

func createFavoriteV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceCreateFavoriteV2Args)
	realResult := result.(*videos.VideoServiceCreateFavoriteV2Result)
	success, err := handler.(videos.VideoService).CreateFavoriteV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCreateFavoriteV2Args() interface{} {
	return videos.NewVideoServiceCreateFavoriteV2Args()
}

func newVideoServiceCreateFavoriteV2Result() interface{} {
	return videos.NewVideoServiceCreateFavoriteV2Result()
}

func getFavoriteVideoListV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceGetFavoriteVideoListV2Args)
	realResult := result.(*videos.VideoServiceGetFavoriteVideoListV2Result)
	success, err := handler.(videos.VideoService).GetFavoriteVideoListV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetFavoriteVideoListV2Args() interface{} {
	return videos.NewVideoServiceGetFavoriteVideoListV2Args()
}

func newVideoServiceGetFavoriteVideoListV2Result() interface{} {
	return videos.NewVideoServiceGetFavoriteVideoListV2Result()
}

func getFavoriteListV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceGetFavoriteListV2Args)
	realResult := result.(*videos.VideoServiceGetFavoriteListV2Result)
	success, err := handler.(videos.VideoService).GetFavoriteListV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetFavoriteListV2Args() interface{} {
	return videos.NewVideoServiceGetFavoriteListV2Args()
}

func newVideoServiceGetFavoriteListV2Result() interface{} {
	return videos.NewVideoServiceGetFavoriteListV2Result()
}

func addFavoriteVideoV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceAddFavoriteVideoV2Args)
	realResult := result.(*videos.VideoServiceAddFavoriteVideoV2Result)
	success, err := handler.(videos.VideoService).AddFavoriteVideoV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceAddFavoriteVideoV2Args() interface{} {
	return videos.NewVideoServiceAddFavoriteVideoV2Args()
}

func newVideoServiceAddFavoriteVideoV2Result() interface{} {
	return videos.NewVideoServiceAddFavoriteVideoV2Result()
}

func deleteFavoriteV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceDeleteFavoriteV2Args)
	realResult := result.(*videos.VideoServiceDeleteFavoriteV2Result)
	success, err := handler.(videos.VideoService).DeleteFavoriteV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceDeleteFavoriteV2Args() interface{} {
	return videos.NewVideoServiceDeleteFavoriteV2Args()
}

func newVideoServiceDeleteFavoriteV2Result() interface{} {
	return videos.NewVideoServiceDeleteFavoriteV2Result()
}

func deleteVideoFromFavoriteV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceDeleteVideoFromFavoriteV2Args)
	realResult := result.(*videos.VideoServiceDeleteVideoFromFavoriteV2Result)
	success, err := handler.(videos.VideoService).DeleteVideoFromFavoriteV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceDeleteVideoFromFavoriteV2Args() interface{} {
	return videos.NewVideoServiceDeleteVideoFromFavoriteV2Args()
}

func newVideoServiceDeleteVideoFromFavoriteV2Result() interface{} {
	return videos.NewVideoServiceDeleteVideoFromFavoriteV2Result()
}

func sharedVideoV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceSharedVideoV2Args)
	realResult := result.(*videos.VideoServiceSharedVideoV2Result)
	success, err := handler.(videos.VideoService).SharedVideoV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceSharedVideoV2Args() interface{} {
	return videos.NewVideoServiceSharedVideoV2Args()
}

func newVideoServiceSharedVideoV2Result() interface{} {
	return videos.NewVideoServiceSharedVideoV2Result()
}

func recommendVideoV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceRecommendVideoV2Args)
	realResult := result.(*videos.VideoServiceRecommendVideoV2Result)
	success, err := handler.(videos.VideoService).RecommendVideoV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceRecommendVideoV2Args() interface{} {
	return videos.NewVideoServiceRecommendVideoV2Args()
}

func newVideoServiceRecommendVideoV2Result() interface{} {
	return videos.NewVideoServiceRecommendVideoV2Result()
}

func manageVideoHeatV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceManageVideoHeatV2Args)
	realResult := result.(*videos.VideoServiceManageVideoHeatV2Result)
	success, err := handler.(videos.VideoService).ManageVideoHeatV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceManageVideoHeatV2Args() interface{} {
	return videos.NewVideoServiceManageVideoHeatV2Args()
}

func newVideoServiceManageVideoHeatV2Result() interface{} {
	return videos.NewVideoServiceManageVideoHeatV2Result()
}

func manageUserQuotaV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceManageUserQuotaV2Args)
	realResult := result.(*videos.VideoServiceManageUserQuotaV2Result)
	success, err := handler.(videos.VideoService).ManageUserQuotaV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceManageUserQuotaV2Args() interface{} {
	return videos.NewVideoServiceManageUserQuotaV2Args()
}

func newVideoServiceManageUserQuotaV2Result() interface{} {
	return videos.NewVideoServiceManageUserQuotaV2Result()
}

func batchOperateVideosV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceBatchOperateVideosV2Args)
	realResult := result.(*videos.VideoServiceBatchOperateVideosV2Result)
	success, err := handler.(videos.VideoService).BatchOperateVideosV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceBatchOperateVideosV2Args() interface{} {
	return videos.NewVideoServiceBatchOperateVideosV2Args()
}

func newVideoServiceBatchOperateVideosV2Result() interface{} {
	return videos.NewVideoServiceBatchOperateVideosV2Result()
}

func transcodeVideoV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceTranscodeVideoV2Args)
	realResult := result.(*videos.VideoServiceTranscodeVideoV2Result)
	success, err := handler.(videos.VideoService).TranscodeVideoV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceTranscodeVideoV2Args() interface{} {
	return videos.NewVideoServiceTranscodeVideoV2Args()
}

func newVideoServiceTranscodeVideoV2Result() interface{} {
	return videos.NewVideoServiceTranscodeVideoV2Result()
}

func getVideoAnalyticsV2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videos.VideoServiceGetVideoAnalyticsV2Args)
	realResult := result.(*videos.VideoServiceGetVideoAnalyticsV2Result)
	success, err := handler.(videos.VideoService).GetVideoAnalyticsV2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoAnalyticsV2Args() interface{} {
	return videos.NewVideoServiceGetVideoAnalyticsV2Args()
}

func newVideoServiceGetVideoAnalyticsV2Result() interface{} {
	return videos.NewVideoServiceGetVideoAnalyticsV2Result()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) VideoPublishStartV2(ctx context.Context, req *videos.VideoPublishStartRequestV2) (r *videos.VideoPublishStartResponseV2, err error) {
	var _args videos.VideoServiceVideoPublishStartV2Args
	_args.Req = req
	var _result videos.VideoServiceVideoPublishStartV2Result
	if err = p.c.Call(ctx, "VideoPublishStartV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublishUploadingV2(ctx context.Context, req *videos.VideoPublishUploadingRequestV2) (r *videos.VideoPublishUploadingResponseV2, err error) {
	var _args videos.VideoServiceVideoPublishUploadingV2Args
	_args.Req = req
	var _result videos.VideoServiceVideoPublishUploadingV2Result
	if err = p.c.Call(ctx, "VideoPublishUploadingV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublishCompleteV2(ctx context.Context, req *videos.VideoPublishCompleteRequestV2) (r *videos.VideoPublishCompleteResponseV2, err error) {
	var _args videos.VideoServiceVideoPublishCompleteV2Args
	_args.Req = req
	var _result videos.VideoServiceVideoPublishCompleteV2Result
	if err = p.c.Call(ctx, "VideoPublishCompleteV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublishCancelV2(ctx context.Context, req *videos.VideoPublishCancelRequestV2) (r *videos.VideoPublishCancelResponseV2, err error) {
	var _args videos.VideoServiceVideoPublishCancelV2Args
	_args.Req = req
	var _result videos.VideoServiceVideoPublishCancelV2Result
	if err = p.c.Call(ctx, "VideoPublishCancelV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUploadProgressV2(ctx context.Context, req *videos.VideoPublishProgressRequestV2) (r *videos.VideoPublishProgressResponseV2, err error) {
	var _args videos.VideoServiceGetUploadProgressV2Args
	_args.Req = req
	var _result videos.VideoServiceGetUploadProgressV2Result
	if err = p.c.Call(ctx, "GetUploadProgressV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResumeUploadV2(ctx context.Context, req *videos.VideoPublishResumeRequestV2) (r *videos.VideoPublishResumeResponseV2, err error) {
	var _args videos.VideoServiceResumeUploadV2Args
	_args.Req = req
	var _result videos.VideoServiceResumeUploadV2Result
	if err = p.c.Call(ctx, "ResumeUploadV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoFeedListV2(ctx context.Context, req *videos.VideoFeedListRequestV2) (r *videos.VideoFeedListResponseV2, err error) {
	var _args videos.VideoServiceVideoFeedListV2Args
	_args.Req = req
	var _result videos.VideoServiceVideoFeedListV2Result
	if err = p.c.Call(ctx, "VideoFeedListV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoSearchV2(ctx context.Context, req *videos.VideoSearchRequestV2) (r *videos.VideoSearchResponseV2, err error) {
	var _args videos.VideoServiceVideoSearchV2Args
	_args.Req = req
	var _result videos.VideoServiceVideoSearchV2Result
	if err = p.c.Call(ctx, "VideoSearchV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPopularV2(ctx context.Context, req *videos.VideoPopularRequestV2) (r *videos.VideoPopularResponseV2, err error) {
	var _args videos.VideoServiceVideoPopularV2Args
	_args.Req = req
	var _result videos.VideoServiceVideoPopularV2Result
	if err = p.c.Call(ctx, "VideoPopularV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoInfoV2(ctx context.Context, req *videos.VideoInfoRequestV2) (r *videos.VideoInfoResponseV2, err error) {
	var _args videos.VideoServiceVideoInfoV2Args
	_args.Req = req
	var _result videos.VideoServiceVideoInfoV2Result
	if err = p.c.Call(ctx, "VideoInfoV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoDeleteV2(ctx context.Context, req *videos.VideoDeleteRequestV2) (r *videos.VideoDeleteResponseV2, err error) {
	var _args videos.VideoServiceVideoDeleteV2Args
	_args.Req = req
	var _result videos.VideoServiceVideoDeleteV2Result
	if err = p.c.Call(ctx, "VideoDeleteV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoVisitV2(ctx context.Context, req *videos.VideoVisitRequestV2) (r *videos.VideoVisitResponseV2, err error) {
	var _args videos.VideoServiceVideoVisitV2Args
	_args.Req = req
	var _result videos.VideoServiceVideoVisitV2Result
	if err = p.c.Call(ctx, "VideoVisitV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateVisitCountV2(ctx context.Context, req *videos.UpdateVisitCountRequestV2) (r *videos.UpdateVisitCountResponseV2, err error) {
	var _args videos.VideoServiceUpdateVisitCountV2Args
	_args.Req = req
	var _result videos.VideoServiceUpdateVisitCountV2Result
	if err = p.c.Call(ctx, "UpdateVisitCountV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateVideoCommentCountV2(ctx context.Context, req *videos.UpdateVideoCommentCountRequestV2) (r *videos.UpdateVideoCommentCountResponseV2, err error) {
	var _args videos.VideoServiceUpdateVideoCommentCountV2Args
	_args.Req = req
	var _result videos.VideoServiceUpdateVideoCommentCountV2Result
	if err = p.c.Call(ctx, "UpdateVideoCommentCountV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateVideoLikeCountV2(ctx context.Context, req *videos.UpdateLikeCountRequestV2) (r *videos.UpdateLikeCountResponseV2, err error) {
	var _args videos.VideoServiceUpdateVideoLikeCountV2Args
	_args.Req = req
	var _result videos.VideoServiceUpdateVideoLikeCountV2Result
	if err = p.c.Call(ctx, "UpdateVideoLikeCountV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoVisitCountV2(ctx context.Context, req *videos.GetVideoVisitCountRequestV2) (r *videos.GetVideoVisitCountResponseV2, err error) {
	var _args videos.VideoServiceGetVideoVisitCountV2Args
	_args.Req = req
	var _result videos.VideoServiceGetVideoVisitCountV2Result
	if err = p.c.Call(ctx, "GetVideoVisitCountV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StreamVideoV2(ctx context.Context, req *videos.StreamVideoRequestV2) (r *videos.StreamVideoResponseV2, err error) {
	var _args videos.VideoServiceStreamVideoV2Args
	_args.Req = req
	var _result videos.VideoServiceStreamVideoV2Result
	if err = p.c.Call(ctx, "StreamVideoV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateFavoriteV2(ctx context.Context, req *videos.CreateFavoriteRequestV2) (r *videos.CreateFavoriteResponseV2, err error) {
	var _args videos.VideoServiceCreateFavoriteV2Args
	_args.Req = req
	var _result videos.VideoServiceCreateFavoriteV2Result
	if err = p.c.Call(ctx, "CreateFavoriteV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteVideoListV2(ctx context.Context, req *videos.GetFavoriteVideoListRequestV2) (r *videos.GetFavoriteVideoListResponseV2, err error) {
	var _args videos.VideoServiceGetFavoriteVideoListV2Args
	_args.Req = req
	var _result videos.VideoServiceGetFavoriteVideoListV2Result
	if err = p.c.Call(ctx, "GetFavoriteVideoListV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteListV2(ctx context.Context, req *videos.GetFavoriteListRequestV2) (r *videos.GetFavoriteListResponseV2, err error) {
	var _args videos.VideoServiceGetFavoriteListV2Args
	_args.Req = req
	var _result videos.VideoServiceGetFavoriteListV2Result
	if err = p.c.Call(ctx, "GetFavoriteListV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddFavoriteVideoV2(ctx context.Context, req *videos.AddFavoriteVideoRequestV2) (r *videos.AddFavoriteVideoResponseV2, err error) {
	var _args videos.VideoServiceAddFavoriteVideoV2Args
	_args.Req = req
	var _result videos.VideoServiceAddFavoriteVideoV2Result
	if err = p.c.Call(ctx, "AddFavoriteVideoV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteFavoriteV2(ctx context.Context, req *videos.DeleteFavoriteRequestV2) (r *videos.DeleteFavoriteResponseV2, err error) {
	var _args videos.VideoServiceDeleteFavoriteV2Args
	_args.Req = req
	var _result videos.VideoServiceDeleteFavoriteV2Result
	if err = p.c.Call(ctx, "DeleteFavoriteV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteVideoFromFavoriteV2(ctx context.Context, req *videos.DeleteVideoFromFavoriteRequestV2) (r *videos.DeleteVideoFromFavoriteResponseV2, err error) {
	var _args videos.VideoServiceDeleteVideoFromFavoriteV2Args
	_args.Req = req
	var _result videos.VideoServiceDeleteVideoFromFavoriteV2Result
	if err = p.c.Call(ctx, "DeleteVideoFromFavoriteV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SharedVideoV2(ctx context.Context, req *videos.SharedVideoRequestV2) (r *videos.SharedVideoResponseV2, err error) {
	var _args videos.VideoServiceSharedVideoV2Args
	_args.Req = req
	var _result videos.VideoServiceSharedVideoV2Result
	if err = p.c.Call(ctx, "SharedVideoV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RecommendVideoV2(ctx context.Context, req *videos.RecommendVideoRequestV2) (r *videos.RecommendVideoResponseV2, err error) {
	var _args videos.VideoServiceRecommendVideoV2Args
	_args.Req = req
	var _result videos.VideoServiceRecommendVideoV2Result
	if err = p.c.Call(ctx, "RecommendVideoV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ManageVideoHeatV2(ctx context.Context, req *videos.VideoHeatManagementRequest) (r *videos.VideoHeatManagementResponse, err error) {
	var _args videos.VideoServiceManageVideoHeatV2Args
	_args.Req = req
	var _result videos.VideoServiceManageVideoHeatV2Result
	if err = p.c.Call(ctx, "ManageVideoHeatV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ManageUserQuotaV2(ctx context.Context, req *videos.UserQuotaManagementRequest) (r *videos.UserQuotaManagementResponse, err error) {
	var _args videos.VideoServiceManageUserQuotaV2Args
	_args.Req = req
	var _result videos.VideoServiceManageUserQuotaV2Result
	if err = p.c.Call(ctx, "ManageUserQuotaV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchOperateVideosV2(ctx context.Context, req *videos.BatchVideoOperationRequest) (r *videos.BatchVideoOperationResponse, err error) {
	var _args videos.VideoServiceBatchOperateVideosV2Args
	_args.Req = req
	var _result videos.VideoServiceBatchOperateVideosV2Result
	if err = p.c.Call(ctx, "BatchOperateVideosV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TranscodeVideoV2(ctx context.Context, req *videos.VideoTranscodingRequest) (r *videos.VideoTranscodingResponse, err error) {
	var _args videos.VideoServiceTranscodeVideoV2Args
	_args.Req = req
	var _result videos.VideoServiceTranscodeVideoV2Result
	if err = p.c.Call(ctx, "TranscodeVideoV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoAnalyticsV2(ctx context.Context, req *videos.VideoAnalyticsRequest) (r *videos.VideoAnalyticsResponse, err error) {
	var _args videos.VideoServiceGetVideoAnalyticsV2Args
	_args.Req = req
	var _result videos.VideoServiceGetVideoAnalyticsV2Result
	if err = p.c.Call(ctx, "GetVideoAnalyticsV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
