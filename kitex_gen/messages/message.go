// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package messages

import (
	"HuaTug.com/kitex_gen/base"
	"context"
	"fmt"
)

type MessageInfo struct {
	FromUid string `thrift:"from_uid,1,required" frugal:"1,required,string" json:"from_uid"`
	ToUid   string `thrift:"to_uid,2,required" frugal:"2,required,string" json:"to_uid"`
	Content string `thrift:"content,3,required" frugal:"3,required,string" json:"content"`
}

func NewMessageInfo() *MessageInfo {
	return &MessageInfo{}
}

func (p *MessageInfo) InitDefault() {
}

func (p *MessageInfo) GetFromUid() (v string) {
	return p.FromUid
}

func (p *MessageInfo) GetToUid() (v string) {
	return p.ToUid
}

func (p *MessageInfo) GetContent() (v string) {
	return p.Content
}
func (p *MessageInfo) SetFromUid(val string) {
	p.FromUid = val
}
func (p *MessageInfo) SetToUid(val string) {
	p.ToUid = val
}
func (p *MessageInfo) SetContent(val string) {
	p.Content = val
}

func (p *MessageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageInfo(%+v)", *p)
}

var fieldIDToName_MessageInfo = map[int16]string{
	1: "from_uid",
	2: "to_uid",
	3: "content",
}

type InsertMessageRequest struct {
	Message *MessageInfo `thrift:"message,1" frugal:"1,default,MessageInfo" json:"message"`
}

func NewInsertMessageRequest() *InsertMessageRequest {
	return &InsertMessageRequest{}
}

func (p *InsertMessageRequest) InitDefault() {
}

var InsertMessageRequest_Message_DEFAULT *MessageInfo

func (p *InsertMessageRequest) GetMessage() (v *MessageInfo) {
	if !p.IsSetMessage() {
		return InsertMessageRequest_Message_DEFAULT
	}
	return p.Message
}
func (p *InsertMessageRequest) SetMessage(val *MessageInfo) {
	p.Message = val
}

func (p *InsertMessageRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *InsertMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertMessageRequest(%+v)", *p)
}

var fieldIDToName_InsertMessageRequest = map[int16]string{
	1: "message",
}

type InsertMessageResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewInsertMessageResponse() *InsertMessageResponse {
	return &InsertMessageResponse{}
}

func (p *InsertMessageResponse) InitDefault() {
}

var InsertMessageResponse_Base_DEFAULT *base.Status

func (p *InsertMessageResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return InsertMessageResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *InsertMessageResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *InsertMessageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *InsertMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertMessageResponse(%+v)", *p)
}

var fieldIDToName_InsertMessageResponse = map[int16]string{
	1: "base",
}

type PopMessageRequest struct {
	Uid string `thrift:"uid,1,required" frugal:"1,required,string" json:"uid"`
}

func NewPopMessageRequest() *PopMessageRequest {
	return &PopMessageRequest{}
}

func (p *PopMessageRequest) InitDefault() {
}

func (p *PopMessageRequest) GetUid() (v string) {
	return p.Uid
}
func (p *PopMessageRequest) SetUid(val string) {
	p.Uid = val
}

func (p *PopMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PopMessageRequest(%+v)", *p)
}

var fieldIDToName_PopMessageRequest = map[int16]string{
	1: "uid",
}

type PopMessageResponseData struct {
	Items []*MessageInfo `thrift:"Items,1" frugal:"1,default,list<MessageInfo>" json:"Items"`
}

func NewPopMessageResponseData() *PopMessageResponseData {
	return &PopMessageResponseData{}
}

func (p *PopMessageResponseData) InitDefault() {
}

func (p *PopMessageResponseData) GetItems() (v []*MessageInfo) {
	return p.Items
}
func (p *PopMessageResponseData) SetItems(val []*MessageInfo) {
	p.Items = val
}

func (p *PopMessageResponseData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PopMessageResponseData(%+v)", *p)
}

var fieldIDToName_PopMessageResponseData = map[int16]string{
	1: "Items",
}

type PopMessageResponse struct {
	Base *base.Status            `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Data *PopMessageResponseData `thrift:"data,2" frugal:"2,default,PopMessageResponseData" json:"data"`
}

func NewPopMessageResponse() *PopMessageResponse {
	return &PopMessageResponse{}
}

func (p *PopMessageResponse) InitDefault() {
}

var PopMessageResponse_Base_DEFAULT *base.Status

func (p *PopMessageResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return PopMessageResponse_Base_DEFAULT
	}
	return p.Base
}

var PopMessageResponse_Data_DEFAULT *PopMessageResponseData

func (p *PopMessageResponse) GetData() (v *PopMessageResponseData) {
	if !p.IsSetData() {
		return PopMessageResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *PopMessageResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *PopMessageResponse) SetData(val *PopMessageResponseData) {
	p.Data = val
}

func (p *PopMessageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *PopMessageResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *PopMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PopMessageResponse(%+v)", *p)
}

var fieldIDToName_PopMessageResponse = map[int16]string{
	1: "base",
	2: "data",
}

type MessageService interface {
	InsertMessage(ctx context.Context, request *InsertMessageRequest) (r *InsertMessageResponse, err error)

	PopMessage(ctx context.Context, request *PopMessageRequest) (r *PopMessageResponse, err error)
}

type MessageServiceInsertMessageArgs struct {
	Request *InsertMessageRequest `thrift:"request,1" frugal:"1,default,InsertMessageRequest" json:"request"`
}

func NewMessageServiceInsertMessageArgs() *MessageServiceInsertMessageArgs {
	return &MessageServiceInsertMessageArgs{}
}

func (p *MessageServiceInsertMessageArgs) InitDefault() {
}

var MessageServiceInsertMessageArgs_Request_DEFAULT *InsertMessageRequest

func (p *MessageServiceInsertMessageArgs) GetRequest() (v *InsertMessageRequest) {
	if !p.IsSetRequest() {
		return MessageServiceInsertMessageArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MessageServiceInsertMessageArgs) SetRequest(val *InsertMessageRequest) {
	p.Request = val
}

func (p *MessageServiceInsertMessageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MessageServiceInsertMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServiceInsertMessageArgs(%+v)", *p)
}

var fieldIDToName_MessageServiceInsertMessageArgs = map[int16]string{
	1: "request",
}

type MessageServiceInsertMessageResult struct {
	Success *InsertMessageResponse `thrift:"success,0,optional" frugal:"0,optional,InsertMessageResponse" json:"success,omitempty"`
}

func NewMessageServiceInsertMessageResult() *MessageServiceInsertMessageResult {
	return &MessageServiceInsertMessageResult{}
}

func (p *MessageServiceInsertMessageResult) InitDefault() {
}

var MessageServiceInsertMessageResult_Success_DEFAULT *InsertMessageResponse

func (p *MessageServiceInsertMessageResult) GetSuccess() (v *InsertMessageResponse) {
	if !p.IsSetSuccess() {
		return MessageServiceInsertMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MessageServiceInsertMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*InsertMessageResponse)
}

func (p *MessageServiceInsertMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MessageServiceInsertMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServiceInsertMessageResult(%+v)", *p)
}

var fieldIDToName_MessageServiceInsertMessageResult = map[int16]string{
	0: "success",
}

type MessageServicePopMessageArgs struct {
	Request *PopMessageRequest `thrift:"request,1" frugal:"1,default,PopMessageRequest" json:"request"`
}

func NewMessageServicePopMessageArgs() *MessageServicePopMessageArgs {
	return &MessageServicePopMessageArgs{}
}

func (p *MessageServicePopMessageArgs) InitDefault() {
}

var MessageServicePopMessageArgs_Request_DEFAULT *PopMessageRequest

func (p *MessageServicePopMessageArgs) GetRequest() (v *PopMessageRequest) {
	if !p.IsSetRequest() {
		return MessageServicePopMessageArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MessageServicePopMessageArgs) SetRequest(val *PopMessageRequest) {
	p.Request = val
}

func (p *MessageServicePopMessageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MessageServicePopMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServicePopMessageArgs(%+v)", *p)
}

var fieldIDToName_MessageServicePopMessageArgs = map[int16]string{
	1: "request",
}

type MessageServicePopMessageResult struct {
	Success *PopMessageResponse `thrift:"success,0,optional" frugal:"0,optional,PopMessageResponse" json:"success,omitempty"`
}

func NewMessageServicePopMessageResult() *MessageServicePopMessageResult {
	return &MessageServicePopMessageResult{}
}

func (p *MessageServicePopMessageResult) InitDefault() {
}

var MessageServicePopMessageResult_Success_DEFAULT *PopMessageResponse

func (p *MessageServicePopMessageResult) GetSuccess() (v *PopMessageResponse) {
	if !p.IsSetSuccess() {
		return MessageServicePopMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MessageServicePopMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*PopMessageResponse)
}

func (p *MessageServicePopMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MessageServicePopMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageServicePopMessageResult(%+v)", *p)
}

var fieldIDToName_MessageServicePopMessageResult = map[int16]string{
	0: "success",
}
