// Code generated by Kitex v0.10.3. DO NOT EDIT.

package interactionservice

import (
	interactions "HuaTug.com/kitex_gen/interactions"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"LikeAction": kitex.NewMethodInfo(
		likeActionHandler,
		newInteractionServiceLikeActionArgs,
		newInteractionServiceLikeActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"LikeList": kitex.NewMethodInfo(
		likeListHandler,
		newInteractionServiceLikeListArgs,
		newInteractionServiceLikeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateComment": kitex.NewMethodInfo(
		createCommentHandler,
		newInteractionServiceCreateCommentArgs,
		newInteractionServiceCreateCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListComment": kitex.NewMethodInfo(
		listCommentHandler,
		newInteractionServiceListCommentArgs,
		newInteractionServiceListCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteComment": kitex.NewMethodInfo(
		deleteCommentHandler,
		newInteractionServiceDeleteCommentArgs,
		newInteractionServiceDeleteCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoPopularList": kitex.NewMethodInfo(
		videoPopularListHandler,
		newInteractionServiceVideoPopularListArgs,
		newInteractionServiceVideoPopularListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteVideoInfo": kitex.NewMethodInfo(
		deleteVideoInfoHandler,
		newInteractionServiceDeleteVideoInfoArgs,
		newInteractionServiceDeleteVideoInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	interactionServiceServiceInfo                = NewServiceInfo()
	interactionServiceServiceInfoForClient       = NewServiceInfoForClient()
	interactionServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*interactions.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "interactions",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func likeActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactions.InteractionServiceLikeActionArgs)
	realResult := result.(*interactions.InteractionServiceLikeActionResult)
	success, err := handler.(interactions.InteractionService).LikeAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceLikeActionArgs() interface{} {
	return interactions.NewInteractionServiceLikeActionArgs()
}

func newInteractionServiceLikeActionResult() interface{} {
	return interactions.NewInteractionServiceLikeActionResult()
}

func likeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactions.InteractionServiceLikeListArgs)
	realResult := result.(*interactions.InteractionServiceLikeListResult)
	success, err := handler.(interactions.InteractionService).LikeList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceLikeListArgs() interface{} {
	return interactions.NewInteractionServiceLikeListArgs()
}

func newInteractionServiceLikeListResult() interface{} {
	return interactions.NewInteractionServiceLikeListResult()
}

func createCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactions.InteractionServiceCreateCommentArgs)
	realResult := result.(*interactions.InteractionServiceCreateCommentResult)
	success, err := handler.(interactions.InteractionService).CreateComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceCreateCommentArgs() interface{} {
	return interactions.NewInteractionServiceCreateCommentArgs()
}

func newInteractionServiceCreateCommentResult() interface{} {
	return interactions.NewInteractionServiceCreateCommentResult()
}

func listCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactions.InteractionServiceListCommentArgs)
	realResult := result.(*interactions.InteractionServiceListCommentResult)
	success, err := handler.(interactions.InteractionService).ListComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceListCommentArgs() interface{} {
	return interactions.NewInteractionServiceListCommentArgs()
}

func newInteractionServiceListCommentResult() interface{} {
	return interactions.NewInteractionServiceListCommentResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactions.InteractionServiceDeleteCommentArgs)
	realResult := result.(*interactions.InteractionServiceDeleteCommentResult)
	success, err := handler.(interactions.InteractionService).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceDeleteCommentArgs() interface{} {
	return interactions.NewInteractionServiceDeleteCommentArgs()
}

func newInteractionServiceDeleteCommentResult() interface{} {
	return interactions.NewInteractionServiceDeleteCommentResult()
}

func videoPopularListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactions.InteractionServiceVideoPopularListArgs)
	realResult := result.(*interactions.InteractionServiceVideoPopularListResult)
	success, err := handler.(interactions.InteractionService).VideoPopularList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceVideoPopularListArgs() interface{} {
	return interactions.NewInteractionServiceVideoPopularListArgs()
}

func newInteractionServiceVideoPopularListResult() interface{} {
	return interactions.NewInteractionServiceVideoPopularListResult()
}

func deleteVideoInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactions.InteractionServiceDeleteVideoInfoArgs)
	realResult := result.(*interactions.InteractionServiceDeleteVideoInfoResult)
	success, err := handler.(interactions.InteractionService).DeleteVideoInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceDeleteVideoInfoArgs() interface{} {
	return interactions.NewInteractionServiceDeleteVideoInfoArgs()
}

func newInteractionServiceDeleteVideoInfoResult() interface{} {
	return interactions.NewInteractionServiceDeleteVideoInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LikeAction(ctx context.Context, req *interactions.LikeActionRequest) (r *interactions.LikeActionResponse, err error) {
	var _args interactions.InteractionServiceLikeActionArgs
	_args.Req = req
	var _result interactions.InteractionServiceLikeActionResult
	if err = p.c.Call(ctx, "LikeAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LikeList(ctx context.Context, req *interactions.LikeListRequest) (r *interactions.LikeListResponse, err error) {
	var _args interactions.InteractionServiceLikeListArgs
	_args.Req = req
	var _result interactions.InteractionServiceLikeListResult
	if err = p.c.Call(ctx, "LikeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateComment(ctx context.Context, req *interactions.CreateCommentRequest) (r *interactions.CreateCommentResponse, err error) {
	var _args interactions.InteractionServiceCreateCommentArgs
	_args.Req = req
	var _result interactions.InteractionServiceCreateCommentResult
	if err = p.c.Call(ctx, "CreateComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListComment(ctx context.Context, req *interactions.ListCommentRequest) (r *interactions.ListCommentResponse, err error) {
	var _args interactions.InteractionServiceListCommentArgs
	_args.Req = req
	var _result interactions.InteractionServiceListCommentResult
	if err = p.c.Call(ctx, "ListComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *interactions.CommentDeleteRequest) (r *interactions.CommentDeleteResponse, err error) {
	var _args interactions.InteractionServiceDeleteCommentArgs
	_args.Req = req
	var _result interactions.InteractionServiceDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPopularList(ctx context.Context, req *interactions.VideoPopularListRequest) (r *interactions.VideoPopularListResponse, err error) {
	var _args interactions.InteractionServiceVideoPopularListArgs
	_args.Req = req
	var _result interactions.InteractionServiceVideoPopularListResult
	if err = p.c.Call(ctx, "VideoPopularList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteVideoInfo(ctx context.Context, req *interactions.DeleteVideoInfoRequest) (r *interactions.DeleteVideoInfoResponse, err error) {
	var _args interactions.InteractionServiceDeleteVideoInfoArgs
	_args.Req = req
	var _result interactions.InteractionServiceDeleteVideoInfoResult
	if err = p.c.Call(ctx, "DeleteVideoInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
