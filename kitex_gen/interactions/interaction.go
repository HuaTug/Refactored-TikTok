// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package interactions

import (
	"HuaTug.com/kitex_gen/base"
	"context"
	"fmt"
)

type LikeActionRequest struct {
	UserId     int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId    int64  `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	CommentId  int64  `thrift:"comment_id,3" frugal:"3,default,i64" json:"comment_id"`
	ActionType string `thrift:"action_type,4" frugal:"4,default,string" json:"action_type"`
}

func NewLikeActionRequest() *LikeActionRequest {
	return &LikeActionRequest{}
}

func (p *LikeActionRequest) InitDefault() {
}

func (p *LikeActionRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *LikeActionRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *LikeActionRequest) GetCommentId() (v int64) {
	return p.CommentId
}

func (p *LikeActionRequest) GetActionType() (v string) {
	return p.ActionType
}
func (p *LikeActionRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *LikeActionRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *LikeActionRequest) SetCommentId(val int64) {
	p.CommentId = val
}
func (p *LikeActionRequest) SetActionType(val string) {
	p.ActionType = val
}

func (p *LikeActionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeActionRequest(%+v)", *p)
}

var fieldIDToName_LikeActionRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "comment_id",
	4: "action_type",
}

type LikeActionResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewLikeActionResponse() *LikeActionResponse {
	return &LikeActionResponse{}
}

func (p *LikeActionResponse) InitDefault() {
}

var LikeActionResponse_Base_DEFAULT *base.Status

func (p *LikeActionResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return LikeActionResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *LikeActionResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *LikeActionResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LikeActionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeActionResponse(%+v)", *p)
}

var fieldIDToName_LikeActionResponse = map[int16]string{
	1: "base",
}

type LikeListRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum  int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewLikeListRequest() *LikeListRequest {
	return &LikeListRequest{}
}

func (p *LikeListRequest) InitDefault() {
}

func (p *LikeListRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *LikeListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *LikeListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *LikeListRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *LikeListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *LikeListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *LikeListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeListRequest(%+v)", *p)
}

var fieldIDToName_LikeListRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
}

type LikeListResponse struct {
	Base  *base.Status  `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Items []*base.Video `thrift:"items,2" frugal:"2,default,list<base.Video>" json:"items"`
}

func NewLikeListResponse() *LikeListResponse {
	return &LikeListResponse{}
}

func (p *LikeListResponse) InitDefault() {
}

var LikeListResponse_Base_DEFAULT *base.Status

func (p *LikeListResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return LikeListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *LikeListResponse) GetItems() (v []*base.Video) {
	return p.Items
}
func (p *LikeListResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *LikeListResponse) SetItems(val []*base.Video) {
	p.Items = val
}

func (p *LikeListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LikeListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeListResponse(%+v)", *p)
}

var fieldIDToName_LikeListResponse = map[int16]string{
	1: "base",
	2: "items",
}

type CreateCommentRequest struct {
	UserId           int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId          int64  `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	CommentId        int64  `thrift:"comment_id,3" frugal:"3,default,i64" json:"comment_id"`
	Mode             int64  `thrift:"mode,4" frugal:"4,default,i64" json:"mode"`
	Content          string `thrift:"content,5" frugal:"5,default,string" json:"content"`
	ReplyToCommentId int64  `thrift:"reply_to_comment_id,6" frugal:"6,default,i64" json:"reply_to_comment_id"`
}

func NewCreateCommentRequest() *CreateCommentRequest {
	return &CreateCommentRequest{}
}

func (p *CreateCommentRequest) InitDefault() {
}

func (p *CreateCommentRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *CreateCommentRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *CreateCommentRequest) GetCommentId() (v int64) {
	return p.CommentId
}

func (p *CreateCommentRequest) GetMode() (v int64) {
	return p.Mode
}

func (p *CreateCommentRequest) GetContent() (v string) {
	return p.Content
}

func (p *CreateCommentRequest) GetReplyToCommentId() (v int64) {
	return p.ReplyToCommentId
}
func (p *CreateCommentRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *CreateCommentRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *CreateCommentRequest) SetCommentId(val int64) {
	p.CommentId = val
}
func (p *CreateCommentRequest) SetMode(val int64) {
	p.Mode = val
}
func (p *CreateCommentRequest) SetContent(val string) {
	p.Content = val
}
func (p *CreateCommentRequest) SetReplyToCommentId(val int64) {
	p.ReplyToCommentId = val
}

func (p *CreateCommentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCommentRequest(%+v)", *p)
}

var fieldIDToName_CreateCommentRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "comment_id",
	4: "mode",
	5: "content",
	6: "reply_to_comment_id",
}

type CreateCommentResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewCreateCommentResponse() *CreateCommentResponse {
	return &CreateCommentResponse{}
}

func (p *CreateCommentResponse) InitDefault() {
}

var CreateCommentResponse_Base_DEFAULT *base.Status

func (p *CreateCommentResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return CreateCommentResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateCommentResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *CreateCommentResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateCommentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCommentResponse(%+v)", *p)
}

var fieldIDToName_CreateCommentResponse = map[int16]string{
	1: "base",
}

type ListCommentRequest struct {
	VideoId   int64  `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	CommentId int64  `thrift:"comment_id,2" frugal:"2,default,i64" json:"comment_id"`
	PageNum   int64  `thrift:"page_num,3" frugal:"3,default,i64" json:"page_num"`
	PageSize  int64  `thrift:"page_size,4" frugal:"4,default,i64" json:"page_size"`
	SortType  string `thrift:"sort_type,5" frugal:"5,default,string" json:"sort_type"`
}

func NewListCommentRequest() *ListCommentRequest {
	return &ListCommentRequest{}
}

func (p *ListCommentRequest) InitDefault() {
}

func (p *ListCommentRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *ListCommentRequest) GetCommentId() (v int64) {
	return p.CommentId
}

func (p *ListCommentRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *ListCommentRequest) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *ListCommentRequest) GetSortType() (v string) {
	return p.SortType
}
func (p *ListCommentRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *ListCommentRequest) SetCommentId(val int64) {
	p.CommentId = val
}
func (p *ListCommentRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *ListCommentRequest) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *ListCommentRequest) SetSortType(val string) {
	p.SortType = val
}

func (p *ListCommentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListCommentRequest(%+v)", *p)
}

var fieldIDToName_ListCommentRequest = map[int16]string{
	1: "video_id",
	2: "comment_id",
	3: "page_num",
	4: "page_size",
	5: "sort_type",
}

type ListCommentResponse struct {
	Base  *base.Status    `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Items []*base.Comment `thrift:"items,2" frugal:"2,default,list<base.Comment>" json:"items"`
}

func NewListCommentResponse() *ListCommentResponse {
	return &ListCommentResponse{}
}

func (p *ListCommentResponse) InitDefault() {
}

var ListCommentResponse_Base_DEFAULT *base.Status

func (p *ListCommentResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return ListCommentResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ListCommentResponse) GetItems() (v []*base.Comment) {
	return p.Items
}
func (p *ListCommentResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *ListCommentResponse) SetItems(val []*base.Comment) {
	p.Items = val
}

func (p *ListCommentResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListCommentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListCommentResponse(%+v)", *p)
}

var fieldIDToName_ListCommentResponse = map[int16]string{
	1: "base",
	2: "items",
}

type CommentDeleteRequest struct {
	VideoId    int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	CommentId  int64 `thrift:"comment_id,2" frugal:"2,default,i64" json:"comment_id"`
	FromUserId int64 `thrift:"from_user_id,3" frugal:"3,default,i64" json:"from_user_id"`
}

func NewCommentDeleteRequest() *CommentDeleteRequest {
	return &CommentDeleteRequest{}
}

func (p *CommentDeleteRequest) InitDefault() {
}

func (p *CommentDeleteRequest) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *CommentDeleteRequest) GetCommentId() (v int64) {
	return p.CommentId
}

func (p *CommentDeleteRequest) GetFromUserId() (v int64) {
	return p.FromUserId
}
func (p *CommentDeleteRequest) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *CommentDeleteRequest) SetCommentId(val int64) {
	p.CommentId = val
}
func (p *CommentDeleteRequest) SetFromUserId(val int64) {
	p.FromUserId = val
}

func (p *CommentDeleteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentDeleteRequest(%+v)", *p)
}

var fieldIDToName_CommentDeleteRequest = map[int16]string{
	1: "video_id",
	2: "comment_id",
	3: "from_user_id",
}

type CommentDeleteResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewCommentDeleteResponse() *CommentDeleteResponse {
	return &CommentDeleteResponse{}
}

func (p *CommentDeleteResponse) InitDefault() {
}

var CommentDeleteResponse_Base_DEFAULT *base.Status

func (p *CommentDeleteResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return CommentDeleteResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *CommentDeleteResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *CommentDeleteResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CommentDeleteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentDeleteResponse(%+v)", *p)
}

var fieldIDToName_CommentDeleteResponse = map[int16]string{
	1: "base",
}

type VideoPopularListRequest struct {
	PageNum  int64 `thrift:"page_num,1" frugal:"1,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,2" frugal:"2,default,i64" json:"page_size"`
}

func NewVideoPopularListRequest() *VideoPopularListRequest {
	return &VideoPopularListRequest{}
}

func (p *VideoPopularListRequest) InitDefault() {
}

func (p *VideoPopularListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoPopularListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *VideoPopularListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoPopularListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *VideoPopularListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPopularListRequest(%+v)", *p)
}

var fieldIDToName_VideoPopularListRequest = map[int16]string{
	1: "page_num",
	2: "page_size",
}

type VideoPopularListResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Data []string     `thrift:"data,2" frugal:"2,default,list<string>" json:"data"`
}

func NewVideoPopularListResponse() *VideoPopularListResponse {
	return &VideoPopularListResponse{}
}

func (p *VideoPopularListResponse) InitDefault() {
}

var VideoPopularListResponse_Base_DEFAULT *base.Status

func (p *VideoPopularListResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPopularListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPopularListResponse) GetData() (v []string) {
	return p.Data
}
func (p *VideoPopularListResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPopularListResponse) SetData(val []string) {
	p.Data = val
}

func (p *VideoPopularListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPopularListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPopularListResponse(%+v)", *p)
}

var fieldIDToName_VideoPopularListResponse = map[int16]string{
	1: "base",
	2: "data",
}

type DeleteVideoInfoRequest struct {
	VideoId int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
}

func NewDeleteVideoInfoRequest() *DeleteVideoInfoRequest {
	return &DeleteVideoInfoRequest{}
}

func (p *DeleteVideoInfoRequest) InitDefault() {
}

func (p *DeleteVideoInfoRequest) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *DeleteVideoInfoRequest) SetVideoId(val int64) {
	p.VideoId = val
}

func (p *DeleteVideoInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteVideoInfoRequest(%+v)", *p)
}

var fieldIDToName_DeleteVideoInfoRequest = map[int16]string{
	1: "video_id",
}

type DeleteVideoInfoResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewDeleteVideoInfoResponse() *DeleteVideoInfoResponse {
	return &DeleteVideoInfoResponse{}
}

func (p *DeleteVideoInfoResponse) InitDefault() {
}

var DeleteVideoInfoResponse_Base_DEFAULT *base.Status

func (p *DeleteVideoInfoResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return DeleteVideoInfoResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteVideoInfoResponse) SetBase(val *base.Status) {
	p.Base = val
}

func (p *DeleteVideoInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteVideoInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteVideoInfoResponse(%+v)", *p)
}

var fieldIDToName_DeleteVideoInfoResponse = map[int16]string{
	1: "base",
}

type LikeEvent struct {
	UserId     int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId    int64  `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	CommentId  int64  `thrift:"comment_id,3" frugal:"3,default,i64" json:"comment_id"`
	ActionType string `thrift:"action_type,4" frugal:"4,default,string" json:"action_type"`
	EventType  string `thrift:"event_type,5" frugal:"5,default,string" json:"event_type"`
	Timestamp  int64  `thrift:"timestamp,6" frugal:"6,default,i64" json:"timestamp"`
	EventId    string `thrift:"event_id,7" frugal:"7,default,string" json:"event_id"`
}

func NewLikeEvent() *LikeEvent {
	return &LikeEvent{}
}

func (p *LikeEvent) InitDefault() {
}

func (p *LikeEvent) GetUserId() (v int64) {
	return p.UserId
}

func (p *LikeEvent) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *LikeEvent) GetCommentId() (v int64) {
	return p.CommentId
}

func (p *LikeEvent) GetActionType() (v string) {
	return p.ActionType
}

func (p *LikeEvent) GetEventType() (v string) {
	return p.EventType
}

func (p *LikeEvent) GetTimestamp() (v int64) {
	return p.Timestamp
}

func (p *LikeEvent) GetEventId() (v string) {
	return p.EventId
}
func (p *LikeEvent) SetUserId(val int64) {
	p.UserId = val
}
func (p *LikeEvent) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *LikeEvent) SetCommentId(val int64) {
	p.CommentId = val
}
func (p *LikeEvent) SetActionType(val string) {
	p.ActionType = val
}
func (p *LikeEvent) SetEventType(val string) {
	p.EventType = val
}
func (p *LikeEvent) SetTimestamp(val int64) {
	p.Timestamp = val
}
func (p *LikeEvent) SetEventId(val string) {
	p.EventId = val
}

func (p *LikeEvent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeEvent(%+v)", *p)
}

var fieldIDToName_LikeEvent = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "comment_id",
	4: "action_type",
	5: "event_type",
	6: "timestamp",
	7: "event_id",
}

type NotificationEvent struct {
	UserId           int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	FromUserId       int64  `thrift:"from_user_id,2" frugal:"2,default,i64" json:"from_user_id"`
	NotificationType string `thrift:"notification_type,3" frugal:"3,default,string" json:"notification_type"`
	TargetId         int64  `thrift:"target_id,4" frugal:"4,default,i64" json:"target_id"`
	Content          string `thrift:"content,5" frugal:"5,default,string" json:"content"`
	Timestamp        int64  `thrift:"timestamp,6" frugal:"6,default,i64" json:"timestamp"`
	EventId          string `thrift:"event_id,7" frugal:"7,default,string" json:"event_id"`
}

func NewNotificationEvent() *NotificationEvent {
	return &NotificationEvent{}
}

func (p *NotificationEvent) InitDefault() {
}

func (p *NotificationEvent) GetUserId() (v int64) {
	return p.UserId
}

func (p *NotificationEvent) GetFromUserId() (v int64) {
	return p.FromUserId
}

func (p *NotificationEvent) GetNotificationType() (v string) {
	return p.NotificationType
}

func (p *NotificationEvent) GetTargetId() (v int64) {
	return p.TargetId
}

func (p *NotificationEvent) GetContent() (v string) {
	return p.Content
}

func (p *NotificationEvent) GetTimestamp() (v int64) {
	return p.Timestamp
}

func (p *NotificationEvent) GetEventId() (v string) {
	return p.EventId
}
func (p *NotificationEvent) SetUserId(val int64) {
	p.UserId = val
}
func (p *NotificationEvent) SetFromUserId(val int64) {
	p.FromUserId = val
}
func (p *NotificationEvent) SetNotificationType(val string) {
	p.NotificationType = val
}
func (p *NotificationEvent) SetTargetId(val int64) {
	p.TargetId = val
}
func (p *NotificationEvent) SetContent(val string) {
	p.Content = val
}
func (p *NotificationEvent) SetTimestamp(val int64) {
	p.Timestamp = val
}
func (p *NotificationEvent) SetEventId(val string) {
	p.EventId = val
}

func (p *NotificationEvent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotificationEvent(%+v)", *p)
}

var fieldIDToName_NotificationEvent = map[int16]string{
	1: "user_id",
	2: "from_user_id",
	3: "notification_type",
	4: "target_id",
	5: "content",
	6: "timestamp",
	7: "event_id",
}

type LikeActionRequestV2 struct {
	UserId     int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId    int64  `thrift:"video_id,2" frugal:"2,default,i64" json:"video_id"`
	CommentId  int64  `thrift:"comment_id,3" frugal:"3,default,i64" json:"comment_id"`
	ActionType string `thrift:"action_type,4" frugal:"4,default,string" json:"action_type"`
}

func NewLikeActionRequestV2() *LikeActionRequestV2 {
	return &LikeActionRequestV2{}
}

func (p *LikeActionRequestV2) InitDefault() {
}

func (p *LikeActionRequestV2) GetUserId() (v int64) {
	return p.UserId
}

func (p *LikeActionRequestV2) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *LikeActionRequestV2) GetCommentId() (v int64) {
	return p.CommentId
}

func (p *LikeActionRequestV2) GetActionType() (v string) {
	return p.ActionType
}
func (p *LikeActionRequestV2) SetUserId(val int64) {
	p.UserId = val
}
func (p *LikeActionRequestV2) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *LikeActionRequestV2) SetCommentId(val int64) {
	p.CommentId = val
}
func (p *LikeActionRequestV2) SetActionType(val string) {
	p.ActionType = val
}

func (p *LikeActionRequestV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeActionRequestV2(%+v)", *p)
}

var fieldIDToName_LikeActionRequestV2 = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "comment_id",
	4: "action_type",
}

type LikeActionResponseV2 struct {
	Base      *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	IsLiked   bool         `thrift:"is_liked,2" frugal:"2,default,bool" json:"is_liked"`
	LikeCount int64        `thrift:"like_count,3" frugal:"3,default,i64" json:"like_count"`
}

func NewLikeActionResponseV2() *LikeActionResponseV2 {
	return &LikeActionResponseV2{}
}

func (p *LikeActionResponseV2) InitDefault() {
}

var LikeActionResponseV2_Base_DEFAULT *base.Status

func (p *LikeActionResponseV2) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return LikeActionResponseV2_Base_DEFAULT
	}
	return p.Base
}

func (p *LikeActionResponseV2) GetIsLiked() (v bool) {
	return p.IsLiked
}

func (p *LikeActionResponseV2) GetLikeCount() (v int64) {
	return p.LikeCount
}
func (p *LikeActionResponseV2) SetBase(val *base.Status) {
	p.Base = val
}
func (p *LikeActionResponseV2) SetIsLiked(val bool) {
	p.IsLiked = val
}
func (p *LikeActionResponseV2) SetLikeCount(val int64) {
	p.LikeCount = val
}

func (p *LikeActionResponseV2) IsSetBase() bool {
	return p.Base != nil
}

func (p *LikeActionResponseV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeActionResponseV2(%+v)", *p)
}

var fieldIDToName_LikeActionResponseV2 = map[int16]string{
	1: "base",
	2: "is_liked",
	3: "like_count",
}

type GetNotificationsRequest struct {
	UserId           int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum          int64  `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize         int64  `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
	NotificationType string `thrift:"notification_type,4" frugal:"4,default,string" json:"notification_type"`
}

func NewGetNotificationsRequest() *GetNotificationsRequest {
	return &GetNotificationsRequest{}
}

func (p *GetNotificationsRequest) InitDefault() {
}

func (p *GetNotificationsRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetNotificationsRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *GetNotificationsRequest) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *GetNotificationsRequest) GetNotificationType() (v string) {
	return p.NotificationType
}
func (p *GetNotificationsRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetNotificationsRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *GetNotificationsRequest) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *GetNotificationsRequest) SetNotificationType(val string) {
	p.NotificationType = val
}

func (p *GetNotificationsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNotificationsRequest(%+v)", *p)
}

var fieldIDToName_GetNotificationsRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
	4: "notification_type",
}

type GetNotificationsResponse struct {
	Base          *base.Status        `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Notifications []*NotificationInfo `thrift:"notifications,2" frugal:"2,default,list<NotificationInfo>" json:"notifications"`
	TotalCount    int64               `thrift:"total_count,3" frugal:"3,default,i64" json:"total_count"`
	UnreadCount   int64               `thrift:"unread_count,4" frugal:"4,default,i64" json:"unread_count"`
}

func NewGetNotificationsResponse() *GetNotificationsResponse {
	return &GetNotificationsResponse{}
}

func (p *GetNotificationsResponse) InitDefault() {
}

var GetNotificationsResponse_Base_DEFAULT *base.Status

func (p *GetNotificationsResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetNotificationsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetNotificationsResponse) GetNotifications() (v []*NotificationInfo) {
	return p.Notifications
}

func (p *GetNotificationsResponse) GetTotalCount() (v int64) {
	return p.TotalCount
}

func (p *GetNotificationsResponse) GetUnreadCount() (v int64) {
	return p.UnreadCount
}
func (p *GetNotificationsResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetNotificationsResponse) SetNotifications(val []*NotificationInfo) {
	p.Notifications = val
}
func (p *GetNotificationsResponse) SetTotalCount(val int64) {
	p.TotalCount = val
}
func (p *GetNotificationsResponse) SetUnreadCount(val int64) {
	p.UnreadCount = val
}

func (p *GetNotificationsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetNotificationsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNotificationsResponse(%+v)", *p)
}

var fieldIDToName_GetNotificationsResponse = map[int16]string{
	1: "base",
	2: "notifications",
	3: "total_count",
	4: "unread_count",
}

type NotificationInfo struct {
	NotificationId   int64  `thrift:"notification_id,1" frugal:"1,default,i64" json:"notification_id"`
	FromUserId       int64  `thrift:"from_user_id,2" frugal:"2,default,i64" json:"from_user_id"`
	FromUserName     string `thrift:"from_user_name,3" frugal:"3,default,string" json:"from_user_name"`
	FromUserAvatar   string `thrift:"from_user_avatar,4" frugal:"4,default,string" json:"from_user_avatar"`
	NotificationType string `thrift:"notification_type,5" frugal:"5,default,string" json:"notification_type"`
	Content          string `thrift:"content,6" frugal:"6,default,string" json:"content"`
	TargetId         int64  `thrift:"target_id,7" frugal:"7,default,i64" json:"target_id"`
	IsRead           bool   `thrift:"is_read,8" frugal:"8,default,bool" json:"is_read"`
	CreatedAt        string `thrift:"created_at,9" frugal:"9,default,string" json:"created_at"`
}

func NewNotificationInfo() *NotificationInfo {
	return &NotificationInfo{}
}

func (p *NotificationInfo) InitDefault() {
}

func (p *NotificationInfo) GetNotificationId() (v int64) {
	return p.NotificationId
}

func (p *NotificationInfo) GetFromUserId() (v int64) {
	return p.FromUserId
}

func (p *NotificationInfo) GetFromUserName() (v string) {
	return p.FromUserName
}

func (p *NotificationInfo) GetFromUserAvatar() (v string) {
	return p.FromUserAvatar
}

func (p *NotificationInfo) GetNotificationType() (v string) {
	return p.NotificationType
}

func (p *NotificationInfo) GetContent() (v string) {
	return p.Content
}

func (p *NotificationInfo) GetTargetId() (v int64) {
	return p.TargetId
}

func (p *NotificationInfo) GetIsRead() (v bool) {
	return p.IsRead
}

func (p *NotificationInfo) GetCreatedAt() (v string) {
	return p.CreatedAt
}
func (p *NotificationInfo) SetNotificationId(val int64) {
	p.NotificationId = val
}
func (p *NotificationInfo) SetFromUserId(val int64) {
	p.FromUserId = val
}
func (p *NotificationInfo) SetFromUserName(val string) {
	p.FromUserName = val
}
func (p *NotificationInfo) SetFromUserAvatar(val string) {
	p.FromUserAvatar = val
}
func (p *NotificationInfo) SetNotificationType(val string) {
	p.NotificationType = val
}
func (p *NotificationInfo) SetContent(val string) {
	p.Content = val
}
func (p *NotificationInfo) SetTargetId(val int64) {
	p.TargetId = val
}
func (p *NotificationInfo) SetIsRead(val bool) {
	p.IsRead = val
}
func (p *NotificationInfo) SetCreatedAt(val string) {
	p.CreatedAt = val
}

func (p *NotificationInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotificationInfo(%+v)", *p)
}

var fieldIDToName_NotificationInfo = map[int16]string{
	1: "notification_id",
	2: "from_user_id",
	3: "from_user_name",
	4: "from_user_avatar",
	5: "notification_type",
	6: "content",
	7: "target_id",
	8: "is_read",
	9: "created_at",
}

type MarkNotificationReadRequest struct {
	UserId          int64   `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	NotificationIds []int64 `thrift:"notification_ids,2" frugal:"2,default,list<i64>" json:"notification_ids"`
}

func NewMarkNotificationReadRequest() *MarkNotificationReadRequest {
	return &MarkNotificationReadRequest{}
}

func (p *MarkNotificationReadRequest) InitDefault() {
}

func (p *MarkNotificationReadRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *MarkNotificationReadRequest) GetNotificationIds() (v []int64) {
	return p.NotificationIds
}
func (p *MarkNotificationReadRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *MarkNotificationReadRequest) SetNotificationIds(val []int64) {
	p.NotificationIds = val
}

func (p *MarkNotificationReadRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MarkNotificationReadRequest(%+v)", *p)
}

var fieldIDToName_MarkNotificationReadRequest = map[int16]string{
	1: "user_id",
	2: "notification_ids",
}

type MarkNotificationReadResponse struct {
	Base        *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	MarkedCount int64        `thrift:"marked_count,2" frugal:"2,default,i64" json:"marked_count"`
}

func NewMarkNotificationReadResponse() *MarkNotificationReadResponse {
	return &MarkNotificationReadResponse{}
}

func (p *MarkNotificationReadResponse) InitDefault() {
}

var MarkNotificationReadResponse_Base_DEFAULT *base.Status

func (p *MarkNotificationReadResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return MarkNotificationReadResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *MarkNotificationReadResponse) GetMarkedCount() (v int64) {
	return p.MarkedCount
}
func (p *MarkNotificationReadResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *MarkNotificationReadResponse) SetMarkedCount(val int64) {
	p.MarkedCount = val
}

func (p *MarkNotificationReadResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *MarkNotificationReadResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MarkNotificationReadResponse(%+v)", *p)
}

var fieldIDToName_MarkNotificationReadResponse = map[int16]string{
	1: "base",
	2: "marked_count",
}

type InteractionService interface {
	LikeAction(ctx context.Context, req *LikeActionRequest) (r *LikeActionResponse, err error)

	LikeList(ctx context.Context, req *LikeListRequest) (r *LikeListResponse, err error)

	CreateComment(ctx context.Context, req *CreateCommentRequest) (r *CreateCommentResponse, err error)

	ListComment(ctx context.Context, req *ListCommentRequest) (r *ListCommentResponse, err error)

	DeleteComment(ctx context.Context, req *CommentDeleteRequest) (r *CommentDeleteResponse, err error)

	VideoPopularList(ctx context.Context, req *VideoPopularListRequest) (r *VideoPopularListResponse, err error)

	DeleteVideoInfo(ctx context.Context, req *DeleteVideoInfoRequest) (r *DeleteVideoInfoResponse, err error)

	LikeActionV2(ctx context.Context, req *LikeActionRequestV2) (r *LikeActionResponseV2, err error)

	GetNotifications(ctx context.Context, req *GetNotificationsRequest) (r *GetNotificationsResponse, err error)

	MarkNotificationRead(ctx context.Context, req *MarkNotificationReadRequest) (r *MarkNotificationReadResponse, err error)
}

type InteractionServiceLikeActionArgs struct {
	Req *LikeActionRequest `thrift:"req,1" frugal:"1,default,LikeActionRequest" json:"req"`
}

func NewInteractionServiceLikeActionArgs() *InteractionServiceLikeActionArgs {
	return &InteractionServiceLikeActionArgs{}
}

func (p *InteractionServiceLikeActionArgs) InitDefault() {
}

var InteractionServiceLikeActionArgs_Req_DEFAULT *LikeActionRequest

func (p *InteractionServiceLikeActionArgs) GetReq() (v *LikeActionRequest) {
	if !p.IsSetReq() {
		return InteractionServiceLikeActionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceLikeActionArgs) SetReq(val *LikeActionRequest) {
	p.Req = val
}

func (p *InteractionServiceLikeActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceLikeActionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeActionArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeActionArgs = map[int16]string{
	1: "req",
}

type InteractionServiceLikeActionResult struct {
	Success *LikeActionResponse `thrift:"success,0,optional" frugal:"0,optional,LikeActionResponse" json:"success,omitempty"`
}

func NewInteractionServiceLikeActionResult() *InteractionServiceLikeActionResult {
	return &InteractionServiceLikeActionResult{}
}

func (p *InteractionServiceLikeActionResult) InitDefault() {
}

var InteractionServiceLikeActionResult_Success_DEFAULT *LikeActionResponse

func (p *InteractionServiceLikeActionResult) GetSuccess() (v *LikeActionResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceLikeActionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceLikeActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*LikeActionResponse)
}

func (p *InteractionServiceLikeActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceLikeActionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeActionResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeActionResult = map[int16]string{
	0: "success",
}

type InteractionServiceLikeListArgs struct {
	Req *LikeListRequest `thrift:"req,1" frugal:"1,default,LikeListRequest" json:"req"`
}

func NewInteractionServiceLikeListArgs() *InteractionServiceLikeListArgs {
	return &InteractionServiceLikeListArgs{}
}

func (p *InteractionServiceLikeListArgs) InitDefault() {
}

var InteractionServiceLikeListArgs_Req_DEFAULT *LikeListRequest

func (p *InteractionServiceLikeListArgs) GetReq() (v *LikeListRequest) {
	if !p.IsSetReq() {
		return InteractionServiceLikeListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceLikeListArgs) SetReq(val *LikeListRequest) {
	p.Req = val
}

func (p *InteractionServiceLikeListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceLikeListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeListArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeListArgs = map[int16]string{
	1: "req",
}

type InteractionServiceLikeListResult struct {
	Success *LikeListResponse `thrift:"success,0,optional" frugal:"0,optional,LikeListResponse" json:"success,omitempty"`
}

func NewInteractionServiceLikeListResult() *InteractionServiceLikeListResult {
	return &InteractionServiceLikeListResult{}
}

func (p *InteractionServiceLikeListResult) InitDefault() {
}

var InteractionServiceLikeListResult_Success_DEFAULT *LikeListResponse

func (p *InteractionServiceLikeListResult) GetSuccess() (v *LikeListResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceLikeListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceLikeListResult) SetSuccess(x interface{}) {
	p.Success = x.(*LikeListResponse)
}

func (p *InteractionServiceLikeListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceLikeListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeListResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeListResult = map[int16]string{
	0: "success",
}

type InteractionServiceCreateCommentArgs struct {
	Req *CreateCommentRequest `thrift:"req,1" frugal:"1,default,CreateCommentRequest" json:"req"`
}

func NewInteractionServiceCreateCommentArgs() *InteractionServiceCreateCommentArgs {
	return &InteractionServiceCreateCommentArgs{}
}

func (p *InteractionServiceCreateCommentArgs) InitDefault() {
}

var InteractionServiceCreateCommentArgs_Req_DEFAULT *CreateCommentRequest

func (p *InteractionServiceCreateCommentArgs) GetReq() (v *CreateCommentRequest) {
	if !p.IsSetReq() {
		return InteractionServiceCreateCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceCreateCommentArgs) SetReq(val *CreateCommentRequest) {
	p.Req = val
}

func (p *InteractionServiceCreateCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceCreateCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCreateCommentArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceCreateCommentArgs = map[int16]string{
	1: "req",
}

type InteractionServiceCreateCommentResult struct {
	Success *CreateCommentResponse `thrift:"success,0,optional" frugal:"0,optional,CreateCommentResponse" json:"success,omitempty"`
}

func NewInteractionServiceCreateCommentResult() *InteractionServiceCreateCommentResult {
	return &InteractionServiceCreateCommentResult{}
}

func (p *InteractionServiceCreateCommentResult) InitDefault() {
}

var InteractionServiceCreateCommentResult_Success_DEFAULT *CreateCommentResponse

func (p *InteractionServiceCreateCommentResult) GetSuccess() (v *CreateCommentResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceCreateCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceCreateCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCommentResponse)
}

func (p *InteractionServiceCreateCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceCreateCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCreateCommentResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceCreateCommentResult = map[int16]string{
	0: "success",
}

type InteractionServiceListCommentArgs struct {
	Req *ListCommentRequest `thrift:"req,1" frugal:"1,default,ListCommentRequest" json:"req"`
}

func NewInteractionServiceListCommentArgs() *InteractionServiceListCommentArgs {
	return &InteractionServiceListCommentArgs{}
}

func (p *InteractionServiceListCommentArgs) InitDefault() {
}

var InteractionServiceListCommentArgs_Req_DEFAULT *ListCommentRequest

func (p *InteractionServiceListCommentArgs) GetReq() (v *ListCommentRequest) {
	if !p.IsSetReq() {
		return InteractionServiceListCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceListCommentArgs) SetReq(val *ListCommentRequest) {
	p.Req = val
}

func (p *InteractionServiceListCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceListCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceListCommentArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceListCommentArgs = map[int16]string{
	1: "req",
}

type InteractionServiceListCommentResult struct {
	Success *ListCommentResponse `thrift:"success,0,optional" frugal:"0,optional,ListCommentResponse" json:"success,omitempty"`
}

func NewInteractionServiceListCommentResult() *InteractionServiceListCommentResult {
	return &InteractionServiceListCommentResult{}
}

func (p *InteractionServiceListCommentResult) InitDefault() {
}

var InteractionServiceListCommentResult_Success_DEFAULT *ListCommentResponse

func (p *InteractionServiceListCommentResult) GetSuccess() (v *ListCommentResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceListCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceListCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListCommentResponse)
}

func (p *InteractionServiceListCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceListCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceListCommentResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceListCommentResult = map[int16]string{
	0: "success",
}

type InteractionServiceDeleteCommentArgs struct {
	Req *CommentDeleteRequest `thrift:"req,1" frugal:"1,default,CommentDeleteRequest" json:"req"`
}

func NewInteractionServiceDeleteCommentArgs() *InteractionServiceDeleteCommentArgs {
	return &InteractionServiceDeleteCommentArgs{}
}

func (p *InteractionServiceDeleteCommentArgs) InitDefault() {
}

var InteractionServiceDeleteCommentArgs_Req_DEFAULT *CommentDeleteRequest

func (p *InteractionServiceDeleteCommentArgs) GetReq() (v *CommentDeleteRequest) {
	if !p.IsSetReq() {
		return InteractionServiceDeleteCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceDeleteCommentArgs) SetReq(val *CommentDeleteRequest) {
	p.Req = val
}

func (p *InteractionServiceDeleteCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceDeleteCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDeleteCommentArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceDeleteCommentArgs = map[int16]string{
	1: "req",
}

type InteractionServiceDeleteCommentResult struct {
	Success *CommentDeleteResponse `thrift:"success,0,optional" frugal:"0,optional,CommentDeleteResponse" json:"success,omitempty"`
}

func NewInteractionServiceDeleteCommentResult() *InteractionServiceDeleteCommentResult {
	return &InteractionServiceDeleteCommentResult{}
}

func (p *InteractionServiceDeleteCommentResult) InitDefault() {
}

var InteractionServiceDeleteCommentResult_Success_DEFAULT *CommentDeleteResponse

func (p *InteractionServiceDeleteCommentResult) GetSuccess() (v *CommentDeleteResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceDeleteCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceDeleteCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*CommentDeleteResponse)
}

func (p *InteractionServiceDeleteCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceDeleteCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDeleteCommentResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceDeleteCommentResult = map[int16]string{
	0: "success",
}

type InteractionServiceVideoPopularListArgs struct {
	Req *VideoPopularListRequest `thrift:"req,1" frugal:"1,default,VideoPopularListRequest" json:"req"`
}

func NewInteractionServiceVideoPopularListArgs() *InteractionServiceVideoPopularListArgs {
	return &InteractionServiceVideoPopularListArgs{}
}

func (p *InteractionServiceVideoPopularListArgs) InitDefault() {
}

var InteractionServiceVideoPopularListArgs_Req_DEFAULT *VideoPopularListRequest

func (p *InteractionServiceVideoPopularListArgs) GetReq() (v *VideoPopularListRequest) {
	if !p.IsSetReq() {
		return InteractionServiceVideoPopularListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceVideoPopularListArgs) SetReq(val *VideoPopularListRequest) {
	p.Req = val
}

func (p *InteractionServiceVideoPopularListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceVideoPopularListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceVideoPopularListArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceVideoPopularListArgs = map[int16]string{
	1: "req",
}

type InteractionServiceVideoPopularListResult struct {
	Success *VideoPopularListResponse `thrift:"success,0,optional" frugal:"0,optional,VideoPopularListResponse" json:"success,omitempty"`
}

func NewInteractionServiceVideoPopularListResult() *InteractionServiceVideoPopularListResult {
	return &InteractionServiceVideoPopularListResult{}
}

func (p *InteractionServiceVideoPopularListResult) InitDefault() {
}

var InteractionServiceVideoPopularListResult_Success_DEFAULT *VideoPopularListResponse

func (p *InteractionServiceVideoPopularListResult) GetSuccess() (v *VideoPopularListResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceVideoPopularListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceVideoPopularListResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPopularListResponse)
}

func (p *InteractionServiceVideoPopularListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceVideoPopularListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceVideoPopularListResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceVideoPopularListResult = map[int16]string{
	0: "success",
}

type InteractionServiceDeleteVideoInfoArgs struct {
	Req *DeleteVideoInfoRequest `thrift:"req,1" frugal:"1,default,DeleteVideoInfoRequest" json:"req"`
}

func NewInteractionServiceDeleteVideoInfoArgs() *InteractionServiceDeleteVideoInfoArgs {
	return &InteractionServiceDeleteVideoInfoArgs{}
}

func (p *InteractionServiceDeleteVideoInfoArgs) InitDefault() {
}

var InteractionServiceDeleteVideoInfoArgs_Req_DEFAULT *DeleteVideoInfoRequest

func (p *InteractionServiceDeleteVideoInfoArgs) GetReq() (v *DeleteVideoInfoRequest) {
	if !p.IsSetReq() {
		return InteractionServiceDeleteVideoInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceDeleteVideoInfoArgs) SetReq(val *DeleteVideoInfoRequest) {
	p.Req = val
}

func (p *InteractionServiceDeleteVideoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceDeleteVideoInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDeleteVideoInfoArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceDeleteVideoInfoArgs = map[int16]string{
	1: "req",
}

type InteractionServiceDeleteVideoInfoResult struct {
	Success *DeleteVideoInfoResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteVideoInfoResponse" json:"success,omitempty"`
}

func NewInteractionServiceDeleteVideoInfoResult() *InteractionServiceDeleteVideoInfoResult {
	return &InteractionServiceDeleteVideoInfoResult{}
}

func (p *InteractionServiceDeleteVideoInfoResult) InitDefault() {
}

var InteractionServiceDeleteVideoInfoResult_Success_DEFAULT *DeleteVideoInfoResponse

func (p *InteractionServiceDeleteVideoInfoResult) GetSuccess() (v *DeleteVideoInfoResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceDeleteVideoInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceDeleteVideoInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteVideoInfoResponse)
}

func (p *InteractionServiceDeleteVideoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceDeleteVideoInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDeleteVideoInfoResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceDeleteVideoInfoResult = map[int16]string{
	0: "success",
}

type InteractionServiceLikeActionV2Args struct {
	Req *LikeActionRequestV2 `thrift:"req,1" frugal:"1,default,LikeActionRequestV2" json:"req"`
}

func NewInteractionServiceLikeActionV2Args() *InteractionServiceLikeActionV2Args {
	return &InteractionServiceLikeActionV2Args{}
}

func (p *InteractionServiceLikeActionV2Args) InitDefault() {
}

var InteractionServiceLikeActionV2Args_Req_DEFAULT *LikeActionRequestV2

func (p *InteractionServiceLikeActionV2Args) GetReq() (v *LikeActionRequestV2) {
	if !p.IsSetReq() {
		return InteractionServiceLikeActionV2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceLikeActionV2Args) SetReq(val *LikeActionRequestV2) {
	p.Req = val
}

func (p *InteractionServiceLikeActionV2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceLikeActionV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeActionV2Args(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeActionV2Args = map[int16]string{
	1: "req",
}

type InteractionServiceLikeActionV2Result struct {
	Success *LikeActionResponseV2 `thrift:"success,0,optional" frugal:"0,optional,LikeActionResponseV2" json:"success,omitempty"`
}

func NewInteractionServiceLikeActionV2Result() *InteractionServiceLikeActionV2Result {
	return &InteractionServiceLikeActionV2Result{}
}

func (p *InteractionServiceLikeActionV2Result) InitDefault() {
}

var InteractionServiceLikeActionV2Result_Success_DEFAULT *LikeActionResponseV2

func (p *InteractionServiceLikeActionV2Result) GetSuccess() (v *LikeActionResponseV2) {
	if !p.IsSetSuccess() {
		return InteractionServiceLikeActionV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceLikeActionV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*LikeActionResponseV2)
}

func (p *InteractionServiceLikeActionV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceLikeActionV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeActionV2Result(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeActionV2Result = map[int16]string{
	0: "success",
}

type InteractionServiceGetNotificationsArgs struct {
	Req *GetNotificationsRequest `thrift:"req,1" frugal:"1,default,GetNotificationsRequest" json:"req"`
}

func NewInteractionServiceGetNotificationsArgs() *InteractionServiceGetNotificationsArgs {
	return &InteractionServiceGetNotificationsArgs{}
}

func (p *InteractionServiceGetNotificationsArgs) InitDefault() {
}

var InteractionServiceGetNotificationsArgs_Req_DEFAULT *GetNotificationsRequest

func (p *InteractionServiceGetNotificationsArgs) GetReq() (v *GetNotificationsRequest) {
	if !p.IsSetReq() {
		return InteractionServiceGetNotificationsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceGetNotificationsArgs) SetReq(val *GetNotificationsRequest) {
	p.Req = val
}

func (p *InteractionServiceGetNotificationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceGetNotificationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetNotificationsArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetNotificationsArgs = map[int16]string{
	1: "req",
}

type InteractionServiceGetNotificationsResult struct {
	Success *GetNotificationsResponse `thrift:"success,0,optional" frugal:"0,optional,GetNotificationsResponse" json:"success,omitempty"`
}

func NewInteractionServiceGetNotificationsResult() *InteractionServiceGetNotificationsResult {
	return &InteractionServiceGetNotificationsResult{}
}

func (p *InteractionServiceGetNotificationsResult) InitDefault() {
}

var InteractionServiceGetNotificationsResult_Success_DEFAULT *GetNotificationsResponse

func (p *InteractionServiceGetNotificationsResult) GetSuccess() (v *GetNotificationsResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceGetNotificationsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceGetNotificationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetNotificationsResponse)
}

func (p *InteractionServiceGetNotificationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceGetNotificationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetNotificationsResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetNotificationsResult = map[int16]string{
	0: "success",
}

type InteractionServiceMarkNotificationReadArgs struct {
	Req *MarkNotificationReadRequest `thrift:"req,1" frugal:"1,default,MarkNotificationReadRequest" json:"req"`
}

func NewInteractionServiceMarkNotificationReadArgs() *InteractionServiceMarkNotificationReadArgs {
	return &InteractionServiceMarkNotificationReadArgs{}
}

func (p *InteractionServiceMarkNotificationReadArgs) InitDefault() {
}

var InteractionServiceMarkNotificationReadArgs_Req_DEFAULT *MarkNotificationReadRequest

func (p *InteractionServiceMarkNotificationReadArgs) GetReq() (v *MarkNotificationReadRequest) {
	if !p.IsSetReq() {
		return InteractionServiceMarkNotificationReadArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceMarkNotificationReadArgs) SetReq(val *MarkNotificationReadRequest) {
	p.Req = val
}

func (p *InteractionServiceMarkNotificationReadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceMarkNotificationReadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceMarkNotificationReadArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceMarkNotificationReadArgs = map[int16]string{
	1: "req",
}

type InteractionServiceMarkNotificationReadResult struct {
	Success *MarkNotificationReadResponse `thrift:"success,0,optional" frugal:"0,optional,MarkNotificationReadResponse" json:"success,omitempty"`
}

func NewInteractionServiceMarkNotificationReadResult() *InteractionServiceMarkNotificationReadResult {
	return &InteractionServiceMarkNotificationReadResult{}
}

func (p *InteractionServiceMarkNotificationReadResult) InitDefault() {
}

var InteractionServiceMarkNotificationReadResult_Success_DEFAULT *MarkNotificationReadResponse

func (p *InteractionServiceMarkNotificationReadResult) GetSuccess() (v *MarkNotificationReadResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceMarkNotificationReadResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceMarkNotificationReadResult) SetSuccess(x interface{}) {
	p.Success = x.(*MarkNotificationReadResponse)
}

func (p *InteractionServiceMarkNotificationReadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceMarkNotificationReadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceMarkNotificationReadResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceMarkNotificationReadResult = map[int16]string{
	0: "success",
}
